
basic_synth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074f4  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001038  080077c0  080077c0  000087c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  080087f8  080087f8  000097f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000008  08008800  08008800  00009800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000060  24000000  08008808  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000049c  24000060  08008868  0000a060  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240004fc  08008868  0000a4fc  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
  9 .debug_info   00014b5b  00000000  00000000  0000a08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002e91  00000000  00000000  0001ebe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000d80  00000000  00000000  00021a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000a31  00000000  00000000  00022800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035619  00000000  00000000  00023231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000167ea  00000000  00000000  0005884a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0013de97  00000000  00000000  0006f034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001acecb  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000389c  00000000  00000000  001acf10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000068  00000000  00000000  001b07ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000060 	.word	0x24000060
 80002e8:	00000000 	.word	0x00000000
 80002ec:	080077a8 	.word	0x080077a8

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000064 	.word	0x24000064
 8000308:	080077a8 	.word	0x080077a8

0800030c <_ZN5CodecC1Ev>:

#include "Codec.h"
#include "i2c.h"
#include "gpio.h"

Codec::Codec() {
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	4a04      	ldr	r2, [pc, #16]	@ (8000328 <_ZN5CodecC1Ev+0x1c>)
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4618      	mov	r0, r3
 800031e:	370c      	adds	r7, #12
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr
 8000328:	080077c8 	.word	0x080077c8

0800032c <_ZN5CodecD1Ev>:

Codec::~Codec() {
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	4a04      	ldr	r2, [pc, #16]	@ (8000348 <_ZN5CodecD1Ev+0x1c>)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4618      	mov	r0, r3
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr
 8000348:	080077c8 	.word	0x080077c8

0800034c <_ZN5CodecD0Ev>:
Codec::~Codec() {
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
}
 8000354:	6878      	ldr	r0, [r7, #4]
 8000356:	f7ff ffe9 	bl	800032c <_ZN5CodecD1Ev>
 800035a:	2104      	movs	r1, #4
 800035c:	6878      	ldr	r0, [r7, #4]
 800035e:	f007 f993 	bl	8007688 <_ZdlPvj>
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4618      	mov	r0, r3
 8000366:	3708      	adds	r7, #8
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}

0800036c <_ZN5SynthC1Ev>:
#include "stm32h7xx_hal.h"

#include "Synth.h"
#include "wavetable.h"

Synth::Synth() {
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	4a0a      	ldr	r2, [pc, #40]	@ (80003a0 <_ZN5SynthC1Ev+0x34>)
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	f04f 0200 	mov.w	r2, #0
 8000380:	605a      	str	r2, [r3, #4]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	f04f 0200 	mov.w	r2, #0
 8000388:	60da      	str	r2, [r3, #12]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	f04f 0200 	mov.w	r2, #0
 8000390:	611a      	str	r2, [r3, #16]
	// TODO Auto-generated constructor stub

}
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4618      	mov	r0, r3
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr
 80003a0:	080087d8 	.word	0x080087d8

080003a4 <_ZN5SynthD1Ev>:

Synth::~Synth() {
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	4a04      	ldr	r2, [pc, #16]	@ (80003c0 <_ZN5SynthD1Ev+0x1c>)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4618      	mov	r0, r3
 80003b6:	370c      	adds	r7, #12
 80003b8:	46bd      	mov	sp, r7
 80003ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003be:	4770      	bx	lr
 80003c0:	080087d8 	.word	0x080087d8

080003c4 <_ZN5SynthD0Ev>:
Synth::~Synth() {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
}
 80003cc:	6878      	ldr	r0, [r7, #4]
 80003ce:	f7ff ffe9 	bl	80003a4 <_ZN5SynthD1Ev>
 80003d2:	2114      	movs	r1, #20
 80003d4:	6878      	ldr	r0, [r7, #4]
 80003d6:	f007 f957 	bl	8007688 <_ZdlPvj>
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4618      	mov	r0, r3
 80003de:	3708      	adds	r7, #8
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <_ZN5Synth19calculate_oscilatorEv>:

//#define LIM 32767.0f
#define LIM 32767.0f

float Synth::calculate_oscilator()
{
 80003e4:	b480      	push	{r7}
 80003e6:	b089      	sub	sp, #36	@ 0x24
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
	uint16_t a, b;
	float da, db;

	float osc_wtb_inc = WTB_LEN * (pitch) / SAMPLE_RATE;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	edd3 7a04 	vldr	s15, [r3, #16]
 80003f2:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8000524 <_ZN5Synth19calculate_oscilatorEv+0x140>
 80003f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80003fa:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8000528 <_ZN5Synth19calculate_oscilatorEv+0x144>
 80003fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000402:	edc7 7a06 	vstr	s15, [r7, #24]

	osc_wtb_pointer += osc_wtb_inc;
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	ed93 7a01 	vldr	s14, [r3, #4]
 800040c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000410:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	edc3 7a01 	vstr	s15, [r3, #4]

	if (osc_wtb_pointer > WTB_LEN)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000420:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8000524 <_ZN5Synth19calculate_oscilatorEv+0x140>
 8000424:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800042c:	dd09      	ble.n	8000442 <_ZN5Synth19calculate_oscilatorEv+0x5e>
	{
		osc_wtb_pointer -= WTB_LEN;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	edd3 7a01 	vldr	s15, [r3, #4]
 8000434:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8000524 <_ZN5Synth19calculate_oscilatorEv+0x140>
 8000438:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	edc3 7a01 	vstr	s15, [r3, #4]
	}

	a = (int)osc_wtb_pointer;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	edd3 7a01 	vldr	s15, [r3, #4]
 8000448:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800044c:	ee17 3a90 	vmov	r3, s15
 8000450:	82fb      	strh	r3, [r7, #22]
	da = osc_wtb_pointer - a;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	ed93 7a01 	vldr	s14, [r3, #4]
 8000458:	8afb      	ldrh	r3, [r7, #22]
 800045a:	ee07 3a90 	vmov	s15, r3
 800045e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000462:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000466:	edc7 7a04 	vstr	s15, [r7, #16]
	b = a + 1;
 800046a:	8afb      	ldrh	r3, [r7, #22]
 800046c:	3301      	adds	r3, #1
 800046e:	83fb      	strh	r3, [r7, #30]
	db = b - osc_wtb_pointer;
 8000470:	8bfb      	ldrh	r3, [r7, #30]
 8000472:	ee07 3a90 	vmov	s15, r3
 8000476:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000484:	edc7 7a03 	vstr	s15, [r7, #12]

	if (b >= WTB_LEN)
 8000488:	8bfb      	ldrh	r3, [r7, #30]
 800048a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800048e:	d301      	bcc.n	8000494 <_ZN5Synth19calculate_oscilatorEv+0xb0>
	{
		b = 0;
 8000490:	2300      	movs	r3, #0
 8000492:	83fb      	strh	r3, [r7, #30]
	}

	osc = da* triangle[a] + db * triangle[b];
 8000494:	8afb      	ldrh	r3, [r7, #22]
 8000496:	4a25      	ldr	r2, [pc, #148]	@ (800052c <_ZN5Synth19calculate_oscilatorEv+0x148>)
 8000498:	009b      	lsls	r3, r3, #2
 800049a:	4413      	add	r3, r2
 800049c:	ed93 7a00 	vldr	s14, [r3]
 80004a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80004a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80004a8:	8bfb      	ldrh	r3, [r7, #30]
 80004aa:	4a20      	ldr	r2, [pc, #128]	@ (800052c <_ZN5Synth19calculate_oscilatorEv+0x148>)
 80004ac:	009b      	lsls	r3, r3, #2
 80004ae:	4413      	add	r3, r2
 80004b0:	edd3 6a00 	vldr	s13, [r3]
 80004b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80004b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80004bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	edc3 7a02 	vstr	s15, [r3, #8]

	signal = osc * LIM;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80004cc:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8000530 <_ZN5Synth19calculate_oscilatorEv+0x14c>
 80004d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	edc3 7a03 	vstr	s15, [r3, #12]

	if (signal > LIM)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	edd3 7a03 	vldr	s15, [r3, #12]
 80004e0:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8000530 <_ZN5Synth19calculate_oscilatorEv+0x14c>
 80004e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80004e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004ec:	dd02      	ble.n	80004f4 <_ZN5Synth19calculate_oscilatorEv+0x110>
	{
		signal = LIM;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4a10      	ldr	r2, [pc, #64]	@ (8000534 <_ZN5Synth19calculate_oscilatorEv+0x150>)
 80004f2:	60da      	str	r2, [r3, #12]
	}
	if (signal < -LIM)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80004fa:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8000538 <_ZN5Synth19calculate_oscilatorEv+0x154>
 80004fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000506:	d502      	bpl.n	800050e <_ZN5Synth19calculate_oscilatorEv+0x12a>
	{
		signal = -LIM;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	4a0c      	ldr	r2, [pc, #48]	@ (800053c <_ZN5Synth19calculate_oscilatorEv+0x158>)
 800050c:	60da      	str	r2, [r3, #12]
	}

	return signal;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	68db      	ldr	r3, [r3, #12]
 8000512:	ee07 3a90 	vmov	s15, r3
}
 8000516:	eeb0 0a67 	vmov.f32	s0, s15
 800051a:	3724      	adds	r7, #36	@ 0x24
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr
 8000524:	44800000 	.word	0x44800000
 8000528:	473b8000 	.word	0x473b8000
 800052c:	080077d0 	.word	0x080077d0
 8000530:	46fffe00 	.word	0x46fffe00
 8000534:	46fffe00 	.word	0x46fffe00
 8000538:	c6fffe00 	.word	0xc6fffe00
 800053c:	c6fffe00 	.word	0xc6fffe00

08000540 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000546:	4b0d      	ldr	r3, [pc, #52]	@ (800057c <MX_DMA_Init+0x3c>)
 8000548:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800054c:	4a0b      	ldr	r2, [pc, #44]	@ (800057c <MX_DMA_Init+0x3c>)
 800054e:	f043 0301 	orr.w	r3, r3, #1
 8000552:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000556:	4b09      	ldr	r3, [pc, #36]	@ (800057c <MX_DMA_Init+0x3c>)
 8000558:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800055c:	f003 0301 	and.w	r3, r3, #1
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000564:	2200      	movs	r2, #0
 8000566:	2100      	movs	r1, #0
 8000568:	200b      	movs	r0, #11
 800056a:	f000 fe6a 	bl	8001242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800056e:	200b      	movs	r0, #11
 8000570:	f000 fe81 	bl	8001276 <HAL_NVIC_EnableIRQ>

}
 8000574:	bf00      	nop
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	58024400 	.word	0x58024400

08000580 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08a      	sub	sp, #40	@ 0x28
 8000584:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000586:	f107 0314 	add.w	r3, r7, #20
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000596:	4b31      	ldr	r3, [pc, #196]	@ (800065c <MX_GPIO_Init+0xdc>)
 8000598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800059c:	4a2f      	ldr	r2, [pc, #188]	@ (800065c <MX_GPIO_Init+0xdc>)
 800059e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005a6:	4b2d      	ldr	r3, [pc, #180]	@ (800065c <MX_GPIO_Init+0xdc>)
 80005a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005b0:	613b      	str	r3, [r7, #16]
 80005b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b4:	4b29      	ldr	r3, [pc, #164]	@ (800065c <MX_GPIO_Init+0xdc>)
 80005b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005ba:	4a28      	ldr	r2, [pc, #160]	@ (800065c <MX_GPIO_Init+0xdc>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005c4:	4b25      	ldr	r3, [pc, #148]	@ (800065c <MX_GPIO_Init+0xdc>)
 80005c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d2:	4b22      	ldr	r3, [pc, #136]	@ (800065c <MX_GPIO_Init+0xdc>)
 80005d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005d8:	4a20      	ldr	r2, [pc, #128]	@ (800065c <MX_GPIO_Init+0xdc>)
 80005da:	f043 0302 	orr.w	r3, r3, #2
 80005de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005e2:	4b1e      	ldr	r3, [pc, #120]	@ (800065c <MX_GPIO_Init+0xdc>)
 80005e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005e8:	f003 0302 	and.w	r3, r3, #2
 80005ec:	60bb      	str	r3, [r7, #8]
 80005ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f0:	4b1a      	ldr	r3, [pc, #104]	@ (800065c <MX_GPIO_Init+0xdc>)
 80005f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005f6:	4a19      	ldr	r2, [pc, #100]	@ (800065c <MX_GPIO_Init+0xdc>)
 80005f8:	f043 0304 	orr.w	r3, r3, #4
 80005fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000600:	4b16      	ldr	r3, [pc, #88]	@ (800065c <MX_GPIO_Init+0xdc>)
 8000602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000606:	f003 0304 	and.w	r3, r3, #4
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800060e:	4b13      	ldr	r3, [pc, #76]	@ (800065c <MX_GPIO_Init+0xdc>)
 8000610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000614:	4a11      	ldr	r2, [pc, #68]	@ (800065c <MX_GPIO_Init+0xdc>)
 8000616:	f043 0308 	orr.w	r3, r3, #8
 800061a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800061e:	4b0f      	ldr	r3, [pc, #60]	@ (800065c <MX_GPIO_Init+0xdc>)
 8000620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000624:	f003 0308 	and.w	r3, r3, #8
 8000628:	603b      	str	r3, [r7, #0]
 800062a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CODEC_RESET_GPIO_Port, CODEC_RESET_Pin, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	2110      	movs	r1, #16
 8000630:	480b      	ldr	r0, [pc, #44]	@ (8000660 <MX_GPIO_Init+0xe0>)
 8000632:	f003 f92f 	bl	8003894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CODEC_RESET_Pin;
 8000636:	2310      	movs	r3, #16
 8000638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063a:	2301      	movs	r3, #1
 800063c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000642:	2300      	movs	r3, #0
 8000644:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CODEC_RESET_GPIO_Port, &GPIO_InitStruct);
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4619      	mov	r1, r3
 800064c:	4804      	ldr	r0, [pc, #16]	@ (8000660 <MX_GPIO_Init+0xe0>)
 800064e:	f002 ff79 	bl	8003544 <HAL_GPIO_Init>

}
 8000652:	bf00      	nop
 8000654:	3728      	adds	r7, #40	@ 0x28
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	58024400 	.word	0x58024400
 8000660:	58020c00 	.word	0x58020c00

08000664 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000668:	4b1b      	ldr	r3, [pc, #108]	@ (80006d8 <MX_I2C1_Init+0x74>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <MX_I2C1_Init+0x78>)
 800066c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60404E72;
 800066e:	4b1a      	ldr	r3, [pc, #104]	@ (80006d8 <MX_I2C1_Init+0x74>)
 8000670:	4a1b      	ldr	r2, [pc, #108]	@ (80006e0 <MX_I2C1_Init+0x7c>)
 8000672:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000674:	4b18      	ldr	r3, [pc, #96]	@ (80006d8 <MX_I2C1_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800067a:	4b17      	ldr	r3, [pc, #92]	@ (80006d8 <MX_I2C1_Init+0x74>)
 800067c:	2201      	movs	r2, #1
 800067e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000680:	4b15      	ldr	r3, [pc, #84]	@ (80006d8 <MX_I2C1_Init+0x74>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000686:	4b14      	ldr	r3, [pc, #80]	@ (80006d8 <MX_I2C1_Init+0x74>)
 8000688:	2200      	movs	r2, #0
 800068a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800068c:	4b12      	ldr	r3, [pc, #72]	@ (80006d8 <MX_I2C1_Init+0x74>)
 800068e:	2200      	movs	r2, #0
 8000690:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000692:	4b11      	ldr	r3, [pc, #68]	@ (80006d8 <MX_I2C1_Init+0x74>)
 8000694:	2200      	movs	r2, #0
 8000696:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000698:	4b0f      	ldr	r3, [pc, #60]	@ (80006d8 <MX_I2C1_Init+0x74>)
 800069a:	2200      	movs	r2, #0
 800069c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800069e:	480e      	ldr	r0, [pc, #56]	@ (80006d8 <MX_I2C1_Init+0x74>)
 80006a0:	f003 f912 	bl	80038c8 <HAL_I2C_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006aa:	f000 fb27 	bl	8000cfc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ae:	2100      	movs	r1, #0
 80006b0:	4809      	ldr	r0, [pc, #36]	@ (80006d8 <MX_I2C1_Init+0x74>)
 80006b2:	f003 f9a5 	bl	8003a00 <HAL_I2CEx_ConfigAnalogFilter>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006bc:	f000 fb1e 	bl	8000cfc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006c0:	2100      	movs	r1, #0
 80006c2:	4805      	ldr	r0, [pc, #20]	@ (80006d8 <MX_I2C1_Init+0x74>)
 80006c4:	f003 f9e7 	bl	8003a96 <HAL_I2CEx_ConfigDigitalFilter>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006ce:	f000 fb15 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	2400007c 	.word	0x2400007c
 80006dc:	40005400 	.word	0x40005400
 80006e0:	60404e72 	.word	0x60404e72

080006e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b0b8      	sub	sp, #224	@ 0xe0
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006fc:	f107 0310 	add.w	r3, r7, #16
 8000700:	22b8      	movs	r2, #184	@ 0xb8
 8000702:	2100      	movs	r1, #0
 8000704:	4618      	mov	r0, r3
 8000706:	f006 ffd7 	bl	80076b8 <memset>
  if(i2cHandle->Instance==I2C1)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a26      	ldr	r2, [pc, #152]	@ (80007a8 <HAL_I2C_MspInit+0xc4>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d145      	bne.n	80007a0 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000714:	f04f 0208 	mov.w	r2, #8
 8000718:	f04f 0300 	mov.w	r3, #0
 800071c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000720:	2300      	movs	r3, #0
 8000722:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000726:	f107 0310 	add.w	r3, r7, #16
 800072a:	4618      	mov	r0, r3
 800072c:	f004 fbc6 	bl	8004ebc <HAL_RCCEx_PeriphCLKConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000736:	f000 fae1 	bl	8000cfc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	4b1c      	ldr	r3, [pc, #112]	@ (80007ac <HAL_I2C_MspInit+0xc8>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000740:	4a1a      	ldr	r2, [pc, #104]	@ (80007ac <HAL_I2C_MspInit+0xc8>)
 8000742:	f043 0302 	orr.w	r3, r3, #2
 8000746:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800074a:	4b18      	ldr	r3, [pc, #96]	@ (80007ac <HAL_I2C_MspInit+0xc8>)
 800074c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000750:	f003 0302 	and.w	r3, r3, #2
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000758:	23c0      	movs	r3, #192	@ 0xc0
 800075a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800075e:	2312      	movs	r3, #18
 8000760:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000770:	2304      	movs	r3, #4
 8000772:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000776:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800077a:	4619      	mov	r1, r3
 800077c:	480c      	ldr	r0, [pc, #48]	@ (80007b0 <HAL_I2C_MspInit+0xcc>)
 800077e:	f002 fee1 	bl	8003544 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000782:	4b0a      	ldr	r3, [pc, #40]	@ (80007ac <HAL_I2C_MspInit+0xc8>)
 8000784:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000788:	4a08      	ldr	r2, [pc, #32]	@ (80007ac <HAL_I2C_MspInit+0xc8>)
 800078a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800078e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000792:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <HAL_I2C_MspInit+0xc8>)
 8000794:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000798:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007a0:	bf00      	nop
 80007a2:	37e0      	adds	r7, #224	@ 0xe0
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40005400 	.word	0x40005400
 80007ac:	58024400 	.word	0x58024400
 80007b0:	58020400 	.word	0x58020400

080007b4 <MX_I2S3_Init>:
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007b8:	4b15      	ldr	r3, [pc, #84]	@ (8000810 <MX_I2S3_Init+0x5c>)
 80007ba:	4a16      	ldr	r2, [pc, #88]	@ (8000814 <MX_I2S3_Init+0x60>)
 80007bc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007be:	4b14      	ldr	r3, [pc, #80]	@ (8000810 <MX_I2S3_Init+0x5c>)
 80007c0:	2204      	movs	r2, #4
 80007c2:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007c4:	4b12      	ldr	r3, [pc, #72]	@ (8000810 <MX_I2S3_Init+0x5c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007ca:	4b11      	ldr	r3, [pc, #68]	@ (8000810 <MX_I2S3_Init+0x5c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <MX_I2S3_Init+0x5c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <MX_I2S3_Init+0x5c>)
 80007d8:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80007dc:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007de:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <MX_I2S3_Init+0x5c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  hi2s3.Init.FirstBit = I2S_FIRSTBIT_MSB;
 80007e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000810 <MX_I2S3_Init+0x5c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  hi2s3.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 80007ea:	4b09      	ldr	r3, [pc, #36]	@ (8000810 <MX_I2S3_Init+0x5c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  hi2s3.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 80007f0:	4b07      	ldr	r3, [pc, #28]	@ (8000810 <MX_I2S3_Init+0x5c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s3.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 80007f6:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <MX_I2S3_Init+0x5c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007fc:	4804      	ldr	r0, [pc, #16]	@ (8000810 <MX_I2S3_Init+0x5c>)
 80007fe:	f003 f997 	bl	8003b30 <HAL_I2S_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_I2S3_Init+0x58>
  {
    Error_Handler();
 8000808:	f000 fa78 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	240000d0 	.word	0x240000d0
 8000814:	40003c00 	.word	0x40003c00

08000818 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b0ba      	sub	sp, #232	@ 0xe8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000830:	f107 0318 	add.w	r3, r7, #24
 8000834:	22b8      	movs	r2, #184	@ 0xb8
 8000836:	2100      	movs	r1, #0
 8000838:	4618      	mov	r0, r3
 800083a:	f006 ff3d 	bl	80076b8 <memset>
  if(i2sHandle->Instance==SPI3)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a6c      	ldr	r2, [pc, #432]	@ (80009f4 <HAL_I2S_MspInit+0x1dc>)
 8000844:	4293      	cmp	r3, r2
 8000846:	f040 80d0 	bne.w	80009ea <HAL_I2S_MspInit+0x1d2>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 800084a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800084e:	f04f 0300 	mov.w	r3, #0
 8000852:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 20;
 8000856:	2314      	movs	r3, #20
 8000858:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 177;
 800085a:	23b1      	movs	r3, #177	@ 0xb1
 800085c:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800085e:	2302      	movs	r3, #2
 8000860:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000862:	2302      	movs	r3, #2
 8000864:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000866:	2302      	movs	r3, #2
 8000868:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800086a:	2300      	movs	r3, #0
 800086c:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 800086e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000872:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0.0;
 8000874:	2300      	movs	r3, #0
 8000876:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8000878:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800087c:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800087e:	f107 0318 	add.w	r3, r7, #24
 8000882:	4618      	mov	r0, r3
 8000884:	f004 fb1a 	bl	8004ebc <HAL_RCCEx_PeriphCLKConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <HAL_I2S_MspInit+0x7a>
    {
      Error_Handler();
 800088e:	f000 fa35 	bl	8000cfc <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000892:	4b59      	ldr	r3, [pc, #356]	@ (80009f8 <HAL_I2S_MspInit+0x1e0>)
 8000894:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000898:	4a57      	ldr	r2, [pc, #348]	@ (80009f8 <HAL_I2S_MspInit+0x1e0>)
 800089a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800089e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80008a2:	4b55      	ldr	r3, [pc, #340]	@ (80009f8 <HAL_I2S_MspInit+0x1e0>)
 80008a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80008a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80008ac:	617b      	str	r3, [r7, #20]
 80008ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b0:	4b51      	ldr	r3, [pc, #324]	@ (80009f8 <HAL_I2S_MspInit+0x1e0>)
 80008b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008b6:	4a50      	ldr	r2, [pc, #320]	@ (80009f8 <HAL_I2S_MspInit+0x1e0>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008c0:	4b4d      	ldr	r3, [pc, #308]	@ (80009f8 <HAL_I2S_MspInit+0x1e0>)
 80008c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	4b4a      	ldr	r3, [pc, #296]	@ (80009f8 <HAL_I2S_MspInit+0x1e0>)
 80008d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008d4:	4a48      	ldr	r2, [pc, #288]	@ (80009f8 <HAL_I2S_MspInit+0x1e0>)
 80008d6:	f043 0302 	orr.w	r3, r3, #2
 80008da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008de:	4b46      	ldr	r3, [pc, #280]	@ (80009f8 <HAL_I2S_MspInit+0x1e0>)
 80008e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e4:	f003 0302 	and.w	r3, r3, #2
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ec:	4b42      	ldr	r3, [pc, #264]	@ (80009f8 <HAL_I2S_MspInit+0x1e0>)
 80008ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f2:	4a41      	ldr	r2, [pc, #260]	@ (80009f8 <HAL_I2S_MspInit+0x1e0>)
 80008f4:	f043 0304 	orr.w	r3, r3, #4
 80008f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008fc:	4b3e      	ldr	r3, [pc, #248]	@ (80009f8 <HAL_I2S_MspInit+0x1e0>)
 80008fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000902:	f003 0304 	and.w	r3, r3, #4
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
    /**I2S3 GPIO Configuration
    PA4     ------> I2S3_WS
    PB2     ------> I2S3_SDO
    PC10     ------> I2S3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800090a:	2310      	movs	r3, #16
 800090c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	2302      	movs	r3, #2
 8000912:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000922:	2306      	movs	r3, #6
 8000924:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000928:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800092c:	4619      	mov	r1, r3
 800092e:	4833      	ldr	r0, [pc, #204]	@ (80009fc <HAL_I2S_MspInit+0x1e4>)
 8000930:	f002 fe08 	bl	8003544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000934:	2304      	movs	r3, #4
 8000936:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	2302      	movs	r3, #2
 800093c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800094c:	2307      	movs	r3, #7
 800094e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000952:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000956:	4619      	mov	r1, r3
 8000958:	4829      	ldr	r0, [pc, #164]	@ (8000a00 <HAL_I2S_MspInit+0x1e8>)
 800095a:	f002 fdf3 	bl	8003544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800095e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000962:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000978:	2306      	movs	r3, #6
 800097a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800097e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000982:	4619      	mov	r1, r3
 8000984:	481f      	ldr	r0, [pc, #124]	@ (8000a04 <HAL_I2S_MspInit+0x1ec>)
 8000986:	f002 fddd 	bl	8003544 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream0;
 800098a:	4b1f      	ldr	r3, [pc, #124]	@ (8000a08 <HAL_I2S_MspInit+0x1f0>)
 800098c:	4a1f      	ldr	r2, [pc, #124]	@ (8000a0c <HAL_I2S_MspInit+0x1f4>)
 800098e:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8000990:	4b1d      	ldr	r3, [pc, #116]	@ (8000a08 <HAL_I2S_MspInit+0x1f0>)
 8000992:	223e      	movs	r2, #62	@ 0x3e
 8000994:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000996:	4b1c      	ldr	r3, [pc, #112]	@ (8000a08 <HAL_I2S_MspInit+0x1f0>)
 8000998:	2240      	movs	r2, #64	@ 0x40
 800099a:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800099c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a08 <HAL_I2S_MspInit+0x1f0>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009a2:	4b19      	ldr	r3, [pc, #100]	@ (8000a08 <HAL_I2S_MspInit+0x1f0>)
 80009a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009a8:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009aa:	4b17      	ldr	r3, [pc, #92]	@ (8000a08 <HAL_I2S_MspInit+0x1f0>)
 80009ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009b0:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009b2:	4b15      	ldr	r3, [pc, #84]	@ (8000a08 <HAL_I2S_MspInit+0x1f0>)
 80009b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009b8:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 80009ba:	4b13      	ldr	r3, [pc, #76]	@ (8000a08 <HAL_I2S_MspInit+0x1f0>)
 80009bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009c0:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009c2:	4b11      	ldr	r3, [pc, #68]	@ (8000a08 <HAL_I2S_MspInit+0x1f0>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a08 <HAL_I2S_MspInit+0x1f0>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80009ce:	480e      	ldr	r0, [pc, #56]	@ (8000a08 <HAL_I2S_MspInit+0x1f0>)
 80009d0:	f000 fce4 	bl	800139c <HAL_DMA_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <HAL_I2S_MspInit+0x1c6>
    {
      Error_Handler();
 80009da:	f000 f98f 	bl	8000cfc <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a09      	ldr	r2, [pc, #36]	@ (8000a08 <HAL_I2S_MspInit+0x1f0>)
 80009e2:	645a      	str	r2, [r3, #68]	@ 0x44
 80009e4:	4a08      	ldr	r2, [pc, #32]	@ (8000a08 <HAL_I2S_MspInit+0x1f0>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80009ea:	bf00      	nop
 80009ec:	37e8      	adds	r7, #232	@ 0xe8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40003c00 	.word	0x40003c00
 80009f8:	58024400 	.word	0x58024400
 80009fc:	58020000 	.word	0x58020000
 8000a00:	58020400 	.word	0x58020400
 8000a04:	58020800 	.word	0x58020800
 8000a08:	24000124 	.word	0x24000124
 8000a0c:	40020010 	.word	0x40020010

08000a10 <ledInit>:
#define GPIOE_PUPDR          *((volatile uint32_t *)0x5802100C)
#define GPIOE_ODR            *((volatile uint32_t *)0x58021014)
#define GPIOE_RCC_AHB4ENR    *((volatile uint32_t *)0x580244E0)

void inline ledInit()
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
	GPIOE_RCC_AHB4ENR |= 1 << 4;
 8000a14:	4b14      	ldr	r3, [pc, #80]	@ (8000a68 <ledInit+0x58>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a13      	ldr	r2, [pc, #76]	@ (8000a68 <ledInit+0x58>)
 8000a1a:	f043 0310 	orr.w	r3, r3, #16
 8000a1e:	6013      	str	r3, [r2, #0]
	GPIOE_MODER &= ~(3 << 6);  // Clear bits 6 and 7
 8000a20:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <ledInit+0x5c>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a11      	ldr	r2, [pc, #68]	@ (8000a6c <ledInit+0x5c>)
 8000a26:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000a2a:	6013      	str	r3, [r2, #0]
	GPIOE_MODER |= (1 << 6);   // Set bit 6
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a6c <ledInit+0x5c>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a0e      	ldr	r2, [pc, #56]	@ (8000a6c <ledInit+0x5c>)
 8000a32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a36:	6013      	str	r3, [r2, #0]
	GPIOE_OTYPER &= ~(1 << 3);
 8000a38:	4b0d      	ldr	r3, [pc, #52]	@ (8000a70 <ledInit+0x60>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a0c      	ldr	r2, [pc, #48]	@ (8000a70 <ledInit+0x60>)
 8000a3e:	f023 0308 	bic.w	r3, r3, #8
 8000a42:	6013      	str	r3, [r2, #0]
	GPIOE_OSPEEDR |= (3 << 6);
 8000a44:	4b0b      	ldr	r3, [pc, #44]	@ (8000a74 <ledInit+0x64>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a0a      	ldr	r2, [pc, #40]	@ (8000a74 <ledInit+0x64>)
 8000a4a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000a4e:	6013      	str	r3, [r2, #0]
	GPIOE_PUPDR &= ~(3 << 6);
 8000a50:	4b09      	ldr	r3, [pc, #36]	@ (8000a78 <ledInit+0x68>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a08      	ldr	r2, [pc, #32]	@ (8000a78 <ledInit+0x68>)
 8000a56:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000a5a:	6013      	str	r3, [r2, #0]
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	580244e0 	.word	0x580244e0
 8000a6c:	58021000 	.word	0x58021000
 8000a70:	58021004 	.word	0x58021004
 8000a74:	58021008 	.word	0x58021008
 8000a78:	5802100c 	.word	0x5802100c

08000a7c <ledToggle>:
{
	GPIOE_ODR &= ~(1 << 3);
}

void inline ledToggle()
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
	GPIOE_ODR ^= 1 << 3;
 8000a80:	4b05      	ldr	r3, [pc, #20]	@ (8000a98 <ledToggle+0x1c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a04      	ldr	r2, [pc, #16]	@ (8000a98 <ledToggle+0x1c>)
 8000a86:	f083 0308 	eor.w	r3, r3, #8
 8000a8a:	6013      	str	r3, [r2, #0]
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	58021014 	.word	0x58021014

08000a9c <ledBlink>:

void inline ledBlink(uint32_t millis)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	static uint32_t tickStart = 0;
	uint32_t nowTicks = HAL_GetTick();
 8000aa4:	f000 fae6 	bl	8001074 <HAL_GetTick>
 8000aa8:	60f8      	str	r0, [r7, #12]

	if (nowTicks - tickStart > millis)
 8000aaa:	4b08      	ldr	r3, [pc, #32]	@ (8000acc <ledBlink+0x30>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	68fa      	ldr	r2, [r7, #12]
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d204      	bcs.n	8000ac2 <ledBlink+0x26>
	{
		ledToggle();
 8000ab8:	f7ff ffe0 	bl	8000a7c <ledToggle>
		tickStart = nowTicks;
 8000abc:	4a03      	ldr	r2, [pc, #12]	@ (8000acc <ledBlink+0x30>)
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	6013      	str	r3, [r2, #0]
	}
}
 8000ac2:	bf00      	nop
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	2400019c 	.word	0x2400019c

08000ad0 <_Z10make_soundt>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void make_sound(uint16_t start_index)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i = 0; i < BULL_LEN_HALF; i++)
 8000ada:	2300      	movs	r3, #0
 8000adc:	81fb      	strh	r3, [r7, #14]
 8000ade:	e024      	b.n	8000b2a <_Z10make_soundt+0x5a>
	{
		float signal = synth.calculate_oscilator();
 8000ae0:	4816      	ldr	r0, [pc, #88]	@ (8000b3c <_Z10make_soundt+0x6c>)
 8000ae2:	f7ff fc7f 	bl	80003e4 <_ZN5Synth19calculate_oscilatorEv>
 8000ae6:	ed87 0a02 	vstr	s0, [r7, #8]
		audio_buff[start_index + i] = (uint16_t)signal;
 8000aea:	edd7 7a02 	vldr	s15, [r7, #8]
 8000aee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000af2:	ee17 3a90 	vmov	r3, s15
 8000af6:	b299      	uxth	r1, r3
 8000af8:	88fa      	ldrh	r2, [r7, #6]
 8000afa:	89fb      	ldrh	r3, [r7, #14]
 8000afc:	4413      	add	r3, r2
 8000afe:	b209      	sxth	r1, r1
 8000b00:	4a0f      	ldr	r2, [pc, #60]	@ (8000b40 <_Z10make_soundt+0x70>)
 8000b02:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		audio_buff[start_index + i + 1] = (uint16_t)signal;
 8000b06:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b0e:	ee17 3a90 	vmov	r3, s15
 8000b12:	b299      	uxth	r1, r3
 8000b14:	88fa      	ldrh	r2, [r7, #6]
 8000b16:	89fb      	ldrh	r3, [r7, #14]
 8000b18:	4413      	add	r3, r2
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	b209      	sxth	r1, r1
 8000b1e:	4a08      	ldr	r2, [pc, #32]	@ (8000b40 <_Z10make_soundt+0x70>)
 8000b20:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint16_t i = 0; i < BULL_LEN_HALF; i++)
 8000b24:	89fb      	ldrh	r3, [r7, #14]
 8000b26:	3301      	adds	r3, #1
 8000b28:	81fb      	strh	r3, [r7, #14]
 8000b2a:	89fb      	ldrh	r3, [r7, #14]
 8000b2c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b2e:	d9d7      	bls.n	8000ae0 <_Z10make_soundt+0x10>
	}
}
 8000b30:	bf00      	nop
 8000b32:	bf00      	nop
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	240001a4 	.word	0x240001a4
 8000b40:	240001b8 	.word	0x240001b8

08000b44 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	make_sound(0);
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f7ff ffbf 	bl	8000ad0 <_Z10make_soundt>
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000b60:	f000 f8a0 	bl	8000ca4 <_ZL10MPU_Configv>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b64:	f000 fa00 	bl	8000f68 <HAL_Init>

  /* USER CODE BEGIN Init */

  ledInit();
 8000b68:	f7ff ff52 	bl	8000a10 <ledInit>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b6c:	f000 f81e 	bl	8000bac <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b70:	f7ff fd06 	bl	8000580 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b74:	f7ff fce4 	bl	8000540 <MX_DMA_Init>
  MX_I2S3_Init();
 8000b78:	f7ff fe1c 	bl	80007b4 <MX_I2S3_Init>
  MX_I2C1_Init();
 8000b7c:	f7ff fd72 	bl	8000664 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  synth.pitch = 250.0f;
 8000b80:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <main+0x40>)
 8000b82:	4a07      	ldr	r2, [pc, #28]	@ (8000ba0 <main+0x44>)
 8000b84:	611a      	str	r2, [r3, #16]

  HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *) audio_buff, BUFF_LEN);
 8000b86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b8a:	4906      	ldr	r1, [pc, #24]	@ (8000ba4 <main+0x48>)
 8000b8c:	4806      	ldr	r0, [pc, #24]	@ (8000ba8 <main+0x4c>)
 8000b8e:	f003 f8ff 	bl	8003d90 <HAL_I2S_Transmit_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ledBlink(1000);
 8000b92:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b96:	f7ff ff81 	bl	8000a9c <ledBlink>
 8000b9a:	e7fa      	b.n	8000b92 <main+0x36>
 8000b9c:	240001a4 	.word	0x240001a4
 8000ba0:	437a0000 	.word	0x437a0000
 8000ba4:	240001b8 	.word	0x240001b8
 8000ba8:	240000d0 	.word	0x240000d0

08000bac <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b09c      	sub	sp, #112	@ 0x70
 8000bb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb6:	224c      	movs	r2, #76	@ 0x4c
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f006 fd7c 	bl	80076b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	2220      	movs	r2, #32
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f006 fd76 	bl	80076b8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bcc:	2002      	movs	r0, #2
 8000bce:	f003 f9eb 	bl	8003fa8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	4b32      	ldr	r3, [pc, #200]	@ (8000ca0 <_Z18SystemClock_Configv+0xf4>)
 8000bd8:	699b      	ldr	r3, [r3, #24]
 8000bda:	4a31      	ldr	r2, [pc, #196]	@ (8000ca0 <_Z18SystemClock_Configv+0xf4>)
 8000bdc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000be0:	6193      	str	r3, [r2, #24]
 8000be2:	4b2f      	ldr	r3, [pc, #188]	@ (8000ca0 <_Z18SystemClock_Configv+0xf4>)
 8000be4:	699b      	ldr	r3, [r3, #24]
 8000be6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bee:	bf00      	nop
 8000bf0:	4b2b      	ldr	r3, [pc, #172]	@ (8000ca0 <_Z18SystemClock_Configv+0xf4>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000bfc:	bf14      	ite	ne
 8000bfe:	2301      	movne	r3, #1
 8000c00:	2300      	moveq	r3, #0
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d1f3      	bne.n	8000bf0 <_Z18SystemClock_Configv+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c0c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c10:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c12:	2302      	movs	r3, #2
 8000c14:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c16:	2302      	movs	r3, #2
 8000c18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000c1e:	232c      	movs	r3, #44	@ 0x2c
 8000c20:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000c22:	2301      	movs	r3, #1
 8000c24:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c26:	2302      	movs	r3, #2
 8000c28:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c2e:	230c      	movs	r3, #12
 8000c30:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f003 f9ec 	bl	800401c <HAL_RCC_OscConfig>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	bf14      	ite	ne
 8000c4a:	2301      	movne	r3, #1
 8000c4c:	2300      	moveq	r3, #0
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 8000c54:	f000 f852 	bl	8000cfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c58:	233f      	movs	r3, #63	@ 0x3f
 8000c5a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c64:	2308      	movs	r3, #8
 8000c66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c68:	2340      	movs	r3, #64	@ 0x40
 8000c6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c6c:	2340      	movs	r3, #64	@ 0x40
 8000c6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c74:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c76:	2340      	movs	r3, #64	@ 0x40
 8000c78:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	2103      	movs	r1, #3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f003 fda6 	bl	80047d0 <HAL_RCC_ClockConfig>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	bf14      	ite	ne
 8000c8a:	2301      	movne	r3, #1
 8000c8c:	2300      	moveq	r3, #0
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <_Z18SystemClock_Configv+0xec>
  {
    Error_Handler();
 8000c94:	f000 f832 	bl	8000cfc <Error_Handler>
  }
}
 8000c98:	bf00      	nop
 8000c9a:	3770      	adds	r7, #112	@ 0x70
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	58024800 	.word	0x58024800

08000ca4 <_ZL10MPU_Configv>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000caa:	463b      	mov	r3, r7
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000cb6:	f000 faf9 	bl	80012ac <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000cc6:	231f      	movs	r3, #31
 8000cc8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000cca:	2387      	movs	r3, #135	@ 0x87
 8000ccc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ce6:	463b      	mov	r3, r7
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f000 fb17 	bl	800131c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000cee:	2004      	movs	r0, #4
 8000cf0:	f000 faf4 	bl	80012dc <HAL_MPU_Enable>

}
 8000cf4:	bf00      	nop
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d00:	b672      	cpsid	i
}
 8000d02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <Error_Handler+0x8>

08000d08 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d10a      	bne.n	8000d2e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d105      	bne.n	8000d2e <_Z41__static_initialization_and_destruction_0ii+0x26>
Codec codec;
 8000d22:	480c      	ldr	r0, [pc, #48]	@ (8000d54 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8000d24:	f7ff faf2 	bl	800030c <_ZN5CodecC1Ev>
Synth synth;
 8000d28:	480b      	ldr	r0, [pc, #44]	@ (8000d58 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8000d2a:	f7ff fb1f 	bl	800036c <_ZN5SynthC1Ev>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d10a      	bne.n	8000d4a <_Z41__static_initialization_and_destruction_0ii+0x42>
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d105      	bne.n	8000d4a <_Z41__static_initialization_and_destruction_0ii+0x42>
 8000d3e:	4806      	ldr	r0, [pc, #24]	@ (8000d58 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8000d40:	f7ff fb30 	bl	80003a4 <_ZN5SynthD1Ev>
Codec codec;
 8000d44:	4803      	ldr	r0, [pc, #12]	@ (8000d54 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8000d46:	f7ff faf1 	bl	800032c <_ZN5CodecD1Ev>
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	240001a0 	.word	0x240001a0
 8000d58:	240001a4 	.word	0x240001a4

08000d5c <_GLOBAL__sub_I_codec>:
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000d64:	2001      	movs	r0, #1
 8000d66:	f7ff ffcf 	bl	8000d08 <_Z41__static_initialization_and_destruction_0ii>
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <_GLOBAL__sub_D_codec>:
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000d74:	2000      	movs	r0, #0
 8000d76:	f7ff ffc7 	bl	8000d08 <_Z41__static_initialization_and_destruction_0ii>
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d82:	4b0a      	ldr	r3, [pc, #40]	@ (8000dac <HAL_MspInit+0x30>)
 8000d84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d88:	4a08      	ldr	r2, [pc, #32]	@ (8000dac <HAL_MspInit+0x30>)
 8000d8a:	f043 0302 	orr.w	r3, r3, #2
 8000d8e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d92:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <HAL_MspInit+0x30>)
 8000d94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d98:	f003 0302 	and.w	r3, r3, #2
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	58024400 	.word	0x58024400

08000db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <NMI_Handler+0x4>

08000db8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <HardFault_Handler+0x4>

08000dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <MemManage_Handler+0x4>

08000dc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <BusFault_Handler+0x4>

08000dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <UsageFault_Handler+0x4>

08000dd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e06:	f000 f921 	bl	800104c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8000e14:	4802      	ldr	r0, [pc, #8]	@ (8000e20 <DMA1_Stream0_IRQHandler+0x10>)
 8000e16:	f001 f883 	bl	8001f20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	24000124 	.word	0x24000124

08000e24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e28:	4b32      	ldr	r3, [pc, #200]	@ (8000ef4 <SystemInit+0xd0>)
 8000e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e2e:	4a31      	ldr	r2, [pc, #196]	@ (8000ef4 <SystemInit+0xd0>)
 8000e30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e38:	4b2f      	ldr	r3, [pc, #188]	@ (8000ef8 <SystemInit+0xd4>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f003 030f 	and.w	r3, r3, #15
 8000e40:	2b06      	cmp	r3, #6
 8000e42:	d807      	bhi.n	8000e54 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e44:	4b2c      	ldr	r3, [pc, #176]	@ (8000ef8 <SystemInit+0xd4>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f023 030f 	bic.w	r3, r3, #15
 8000e4c:	4a2a      	ldr	r2, [pc, #168]	@ (8000ef8 <SystemInit+0xd4>)
 8000e4e:	f043 0307 	orr.w	r3, r3, #7
 8000e52:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e54:	4b29      	ldr	r3, [pc, #164]	@ (8000efc <SystemInit+0xd8>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a28      	ldr	r2, [pc, #160]	@ (8000efc <SystemInit+0xd8>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e60:	4b26      	ldr	r3, [pc, #152]	@ (8000efc <SystemInit+0xd8>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e66:	4b25      	ldr	r3, [pc, #148]	@ (8000efc <SystemInit+0xd8>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	4924      	ldr	r1, [pc, #144]	@ (8000efc <SystemInit+0xd8>)
 8000e6c:	4b24      	ldr	r3, [pc, #144]	@ (8000f00 <SystemInit+0xdc>)
 8000e6e:	4013      	ands	r3, r2
 8000e70:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e72:	4b21      	ldr	r3, [pc, #132]	@ (8000ef8 <SystemInit+0xd4>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 0308 	and.w	r3, r3, #8
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d007      	beq.n	8000e8e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef8 <SystemInit+0xd4>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f023 030f 	bic.w	r3, r3, #15
 8000e86:	4a1c      	ldr	r2, [pc, #112]	@ (8000ef8 <SystemInit+0xd4>)
 8000e88:	f043 0307 	orr.w	r3, r3, #7
 8000e8c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000efc <SystemInit+0xd8>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e94:	4b19      	ldr	r3, [pc, #100]	@ (8000efc <SystemInit+0xd8>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000e9a:	4b18      	ldr	r3, [pc, #96]	@ (8000efc <SystemInit+0xd8>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ea0:	4b16      	ldr	r3, [pc, #88]	@ (8000efc <SystemInit+0xd8>)
 8000ea2:	4a18      	ldr	r2, [pc, #96]	@ (8000f04 <SystemInit+0xe0>)
 8000ea4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ea6:	4b15      	ldr	r3, [pc, #84]	@ (8000efc <SystemInit+0xd8>)
 8000ea8:	4a17      	ldr	r2, [pc, #92]	@ (8000f08 <SystemInit+0xe4>)
 8000eaa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000eac:	4b13      	ldr	r3, [pc, #76]	@ (8000efc <SystemInit+0xd8>)
 8000eae:	4a17      	ldr	r2, [pc, #92]	@ (8000f0c <SystemInit+0xe8>)
 8000eb0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000eb2:	4b12      	ldr	r3, [pc, #72]	@ (8000efc <SystemInit+0xd8>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000eb8:	4b10      	ldr	r3, [pc, #64]	@ (8000efc <SystemInit+0xd8>)
 8000eba:	4a14      	ldr	r2, [pc, #80]	@ (8000f0c <SystemInit+0xe8>)
 8000ebc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8000efc <SystemInit+0xd8>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ec4:	4b0d      	ldr	r3, [pc, #52]	@ (8000efc <SystemInit+0xd8>)
 8000ec6:	4a11      	ldr	r2, [pc, #68]	@ (8000f0c <SystemInit+0xe8>)
 8000ec8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000eca:	4b0c      	ldr	r3, [pc, #48]	@ (8000efc <SystemInit+0xd8>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8000efc <SystemInit+0xd8>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a09      	ldr	r2, [pc, #36]	@ (8000efc <SystemInit+0xd8>)
 8000ed6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000eda:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000edc:	4b07      	ldr	r3, [pc, #28]	@ (8000efc <SystemInit+0xd8>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8000f10 <SystemInit+0xec>)
 8000ee4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000ee8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000ed00 	.word	0xe000ed00
 8000ef8:	52002000 	.word	0x52002000
 8000efc:	58024400 	.word	0x58024400
 8000f00:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f04:	02020200 	.word	0x02020200
 8000f08:	01ff0000 	.word	0x01ff0000
 8000f0c:	01010280 	.word	0x01010280
 8000f10:	52004000 	.word	0x52004000

08000f14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f18:	f7ff ff84 	bl	8000e24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f1c:	480c      	ldr	r0, [pc, #48]	@ (8000f50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f1e:	490d      	ldr	r1, [pc, #52]	@ (8000f54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f20:	4a0d      	ldr	r2, [pc, #52]	@ (8000f58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f24:	e002      	b.n	8000f2c <LoopCopyDataInit>

08000f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2a:	3304      	adds	r3, #4

08000f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f30:	d3f9      	bcc.n	8000f26 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f32:	4a0a      	ldr	r2, [pc, #40]	@ (8000f5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f34:	4c0a      	ldr	r4, [pc, #40]	@ (8000f60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f38:	e001      	b.n	8000f3e <LoopFillZerobss>

08000f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f3c:	3204      	adds	r2, #4

08000f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f40:	d3fb      	bcc.n	8000f3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f42:	f006 fbc1 	bl	80076c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f46:	f7ff fe09 	bl	8000b5c <main>
  bx  lr
 8000f4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f4c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000f50:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f54:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8000f58:	08008808 	.word	0x08008808
  ldr r2, =_sbss
 8000f5c:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8000f60:	240004fc 	.word	0x240004fc

08000f64 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f64:	e7fe      	b.n	8000f64 <ADC3_IRQHandler>
	...

08000f68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6e:	2003      	movs	r0, #3
 8000f70:	f000 f95c 	bl	800122c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f74:	f003 fde2 	bl	8004b3c <HAL_RCC_GetSysClockFreq>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	4b15      	ldr	r3, [pc, #84]	@ (8000fd0 <HAL_Init+0x68>)
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	0a1b      	lsrs	r3, r3, #8
 8000f80:	f003 030f 	and.w	r3, r3, #15
 8000f84:	4913      	ldr	r1, [pc, #76]	@ (8000fd4 <HAL_Init+0x6c>)
 8000f86:	5ccb      	ldrb	r3, [r1, r3]
 8000f88:	f003 031f 	and.w	r3, r3, #31
 8000f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f90:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f92:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd0 <HAL_Init+0x68>)
 8000f94:	699b      	ldr	r3, [r3, #24]
 8000f96:	f003 030f 	and.w	r3, r3, #15
 8000f9a:	4a0e      	ldr	r2, [pc, #56]	@ (8000fd4 <HAL_Init+0x6c>)
 8000f9c:	5cd3      	ldrb	r3, [r2, r3]
 8000f9e:	f003 031f 	and.w	r3, r3, #31
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fa8:	4a0b      	ldr	r2, [pc, #44]	@ (8000fd8 <HAL_Init+0x70>)
 8000faa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fac:	4a0b      	ldr	r2, [pc, #44]	@ (8000fdc <HAL_Init+0x74>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fb2:	200f      	movs	r0, #15
 8000fb4:	f000 f814 	bl	8000fe0 <HAL_InitTick>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e002      	b.n	8000fc8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc2:	f7ff fedb 	bl	8000d7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc6:	2300      	movs	r3, #0
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	58024400 	.word	0x58024400
 8000fd4:	080087e0 	.word	0x080087e0
 8000fd8:	24000004 	.word	0x24000004
 8000fdc:	24000000 	.word	0x24000000

08000fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000fe8:	4b15      	ldr	r3, [pc, #84]	@ (8001040 <HAL_InitTick+0x60>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d101      	bne.n	8000ff4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e021      	b.n	8001038 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ff4:	4b13      	ldr	r3, [pc, #76]	@ (8001044 <HAL_InitTick+0x64>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <HAL_InitTick+0x60>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001002:	fbb3 f3f1 	udiv	r3, r3, r1
 8001006:	fbb2 f3f3 	udiv	r3, r2, r3
 800100a:	4618      	mov	r0, r3
 800100c:	f000 f941 	bl	8001292 <HAL_SYSTICK_Config>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e00e      	b.n	8001038 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b0f      	cmp	r3, #15
 800101e:	d80a      	bhi.n	8001036 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001020:	2200      	movs	r2, #0
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	f04f 30ff 	mov.w	r0, #4294967295
 8001028:	f000 f90b 	bl	8001242 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800102c:	4a06      	ldr	r2, [pc, #24]	@ (8001048 <HAL_InitTick+0x68>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001032:	2300      	movs	r3, #0
 8001034:	e000      	b.n	8001038 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
}
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	2400000c 	.word	0x2400000c
 8001044:	24000000 	.word	0x24000000
 8001048:	24000008 	.word	0x24000008

0800104c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001050:	4b06      	ldr	r3, [pc, #24]	@ (800106c <HAL_IncTick+0x20>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	461a      	mov	r2, r3
 8001056:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <HAL_IncTick+0x24>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4413      	add	r3, r2
 800105c:	4a04      	ldr	r2, [pc, #16]	@ (8001070 <HAL_IncTick+0x24>)
 800105e:	6013      	str	r3, [r2, #0]
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	2400000c 	.word	0x2400000c
 8001070:	240003b8 	.word	0x240003b8

08001074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return uwTick;
 8001078:	4b03      	ldr	r3, [pc, #12]	@ (8001088 <HAL_GetTick+0x14>)
 800107a:	681b      	ldr	r3, [r3, #0]
}
 800107c:	4618      	mov	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	240003b8 	.word	0x240003b8

0800108c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800109c:	4b0b      	ldr	r3, [pc, #44]	@ (80010cc <__NVIC_SetPriorityGrouping+0x40>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a2:	68ba      	ldr	r2, [r7, #8]
 80010a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010a8:	4013      	ands	r3, r2
 80010aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010b4:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 80010b6:	4313      	orrs	r3, r2
 80010b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ba:	4a04      	ldr	r2, [pc, #16]	@ (80010cc <__NVIC_SetPriorityGrouping+0x40>)
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	60d3      	str	r3, [r2, #12]
}
 80010c0:	bf00      	nop
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00
 80010d0:	05fa0000 	.word	0x05fa0000

080010d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d8:	4b04      	ldr	r3, [pc, #16]	@ (80010ec <__NVIC_GetPriorityGrouping+0x18>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	0a1b      	lsrs	r3, r3, #8
 80010de:	f003 0307 	and.w	r3, r3, #7
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	db0b      	blt.n	800111a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001102:	88fb      	ldrh	r3, [r7, #6]
 8001104:	f003 021f 	and.w	r2, r3, #31
 8001108:	4907      	ldr	r1, [pc, #28]	@ (8001128 <__NVIC_EnableIRQ+0x38>)
 800110a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800110e:	095b      	lsrs	r3, r3, #5
 8001110:	2001      	movs	r0, #1
 8001112:	fa00 f202 	lsl.w	r2, r0, r2
 8001116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000e100 	.word	0xe000e100

0800112c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001138:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800113c:	2b00      	cmp	r3, #0
 800113e:	db0a      	blt.n	8001156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	b2da      	uxtb	r2, r3
 8001144:	490c      	ldr	r1, [pc, #48]	@ (8001178 <__NVIC_SetPriority+0x4c>)
 8001146:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800114a:	0112      	lsls	r2, r2, #4
 800114c:	b2d2      	uxtb	r2, r2
 800114e:	440b      	add	r3, r1
 8001150:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001154:	e00a      	b.n	800116c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4908      	ldr	r1, [pc, #32]	@ (800117c <__NVIC_SetPriority+0x50>)
 800115c:	88fb      	ldrh	r3, [r7, #6]
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	3b04      	subs	r3, #4
 8001164:	0112      	lsls	r2, r2, #4
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	440b      	add	r3, r1
 800116a:	761a      	strb	r2, [r3, #24]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000e100 	.word	0xe000e100
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001180:	b480      	push	{r7}
 8001182:	b089      	sub	sp, #36	@ 0x24
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	f1c3 0307 	rsb	r3, r3, #7
 800119a:	2b04      	cmp	r3, #4
 800119c:	bf28      	it	cs
 800119e:	2304      	movcs	r3, #4
 80011a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3304      	adds	r3, #4
 80011a6:	2b06      	cmp	r3, #6
 80011a8:	d902      	bls.n	80011b0 <NVIC_EncodePriority+0x30>
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3b03      	subs	r3, #3
 80011ae:	e000      	b.n	80011b2 <NVIC_EncodePriority+0x32>
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	f04f 32ff 	mov.w	r2, #4294967295
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43da      	mvns	r2, r3
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	401a      	ands	r2, r3
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c8:	f04f 31ff 	mov.w	r1, #4294967295
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	fa01 f303 	lsl.w	r3, r1, r3
 80011d2:	43d9      	mvns	r1, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d8:	4313      	orrs	r3, r2
         );
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3724      	adds	r7, #36	@ 0x24
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
	...

080011e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011f8:	d301      	bcc.n	80011fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011fa:	2301      	movs	r3, #1
 80011fc:	e00f      	b.n	800121e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001228 <SysTick_Config+0x40>)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3b01      	subs	r3, #1
 8001204:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001206:	210f      	movs	r1, #15
 8001208:	f04f 30ff 	mov.w	r0, #4294967295
 800120c:	f7ff ff8e 	bl	800112c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001210:	4b05      	ldr	r3, [pc, #20]	@ (8001228 <SysTick_Config+0x40>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001216:	4b04      	ldr	r3, [pc, #16]	@ (8001228 <SysTick_Config+0x40>)
 8001218:	2207      	movs	r2, #7
 800121a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	e000e010 	.word	0xe000e010

0800122c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff ff29 	bl	800108c <__NVIC_SetPriorityGrouping>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b086      	sub	sp, #24
 8001246:	af00      	add	r7, sp, #0
 8001248:	4603      	mov	r3, r0
 800124a:	60b9      	str	r1, [r7, #8]
 800124c:	607a      	str	r2, [r7, #4]
 800124e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001250:	f7ff ff40 	bl	80010d4 <__NVIC_GetPriorityGrouping>
 8001254:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	68b9      	ldr	r1, [r7, #8]
 800125a:	6978      	ldr	r0, [r7, #20]
 800125c:	f7ff ff90 	bl	8001180 <NVIC_EncodePriority>
 8001260:	4602      	mov	r2, r0
 8001262:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001266:	4611      	mov	r1, r2
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff5f 	bl	800112c <__NVIC_SetPriority>
}
 800126e:	bf00      	nop
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001280:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff33 	bl	80010f0 <__NVIC_EnableIRQ>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff ffa4 	bl	80011e8 <SysTick_Config>
 80012a0:	4603      	mov	r3, r0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80012b0:	f3bf 8f5f 	dmb	sy
}
 80012b4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80012b6:	4b07      	ldr	r3, [pc, #28]	@ (80012d4 <HAL_MPU_Disable+0x28>)
 80012b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ba:	4a06      	ldr	r2, [pc, #24]	@ (80012d4 <HAL_MPU_Disable+0x28>)
 80012bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012c0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80012c2:	4b05      	ldr	r3, [pc, #20]	@ (80012d8 <HAL_MPU_Disable+0x2c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	605a      	str	r2, [r3, #4]
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	e000ed00 	.word	0xe000ed00
 80012d8:	e000ed90 	.word	0xe000ed90

080012dc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80012e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001314 <HAL_MPU_Enable+0x38>)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80012ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001318 <HAL_MPU_Enable+0x3c>)
 80012f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f2:	4a09      	ldr	r2, [pc, #36]	@ (8001318 <HAL_MPU_Enable+0x3c>)
 80012f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012f8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80012fa:	f3bf 8f4f 	dsb	sy
}
 80012fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001300:	f3bf 8f6f 	isb	sy
}
 8001304:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	e000ed90 	.word	0xe000ed90
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	785a      	ldrb	r2, [r3, #1]
 8001328:	4b1b      	ldr	r3, [pc, #108]	@ (8001398 <HAL_MPU_ConfigRegion+0x7c>)
 800132a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800132c:	4b1a      	ldr	r3, [pc, #104]	@ (8001398 <HAL_MPU_ConfigRegion+0x7c>)
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	4a19      	ldr	r2, [pc, #100]	@ (8001398 <HAL_MPU_ConfigRegion+0x7c>)
 8001332:	f023 0301 	bic.w	r3, r3, #1
 8001336:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001338:	4a17      	ldr	r2, [pc, #92]	@ (8001398 <HAL_MPU_ConfigRegion+0x7c>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	7b1b      	ldrb	r3, [r3, #12]
 8001344:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	7adb      	ldrb	r3, [r3, #11]
 800134a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800134c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	7a9b      	ldrb	r3, [r3, #10]
 8001352:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001354:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	7b5b      	ldrb	r3, [r3, #13]
 800135a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800135c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	7b9b      	ldrb	r3, [r3, #14]
 8001362:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001364:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	7bdb      	ldrb	r3, [r3, #15]
 800136a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800136c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	7a5b      	ldrb	r3, [r3, #9]
 8001372:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001374:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	7a1b      	ldrb	r3, [r3, #8]
 800137a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800137c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	7812      	ldrb	r2, [r2, #0]
 8001382:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001384:	4a04      	ldr	r2, [pc, #16]	@ (8001398 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001386:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001388:	6113      	str	r3, [r2, #16]
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000ed90 	.word	0xe000ed90

0800139c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80013a4:	f7ff fe66 	bl	8001074 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d101      	bne.n	80013b4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e312      	b.n	80019da <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a66      	ldr	r2, [pc, #408]	@ (8001554 <HAL_DMA_Init+0x1b8>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d04a      	beq.n	8001454 <HAL_DMA_Init+0xb8>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a65      	ldr	r2, [pc, #404]	@ (8001558 <HAL_DMA_Init+0x1bc>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d045      	beq.n	8001454 <HAL_DMA_Init+0xb8>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a63      	ldr	r2, [pc, #396]	@ (800155c <HAL_DMA_Init+0x1c0>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d040      	beq.n	8001454 <HAL_DMA_Init+0xb8>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a62      	ldr	r2, [pc, #392]	@ (8001560 <HAL_DMA_Init+0x1c4>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d03b      	beq.n	8001454 <HAL_DMA_Init+0xb8>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a60      	ldr	r2, [pc, #384]	@ (8001564 <HAL_DMA_Init+0x1c8>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d036      	beq.n	8001454 <HAL_DMA_Init+0xb8>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a5f      	ldr	r2, [pc, #380]	@ (8001568 <HAL_DMA_Init+0x1cc>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d031      	beq.n	8001454 <HAL_DMA_Init+0xb8>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a5d      	ldr	r2, [pc, #372]	@ (800156c <HAL_DMA_Init+0x1d0>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d02c      	beq.n	8001454 <HAL_DMA_Init+0xb8>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a5c      	ldr	r2, [pc, #368]	@ (8001570 <HAL_DMA_Init+0x1d4>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d027      	beq.n	8001454 <HAL_DMA_Init+0xb8>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a5a      	ldr	r2, [pc, #360]	@ (8001574 <HAL_DMA_Init+0x1d8>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d022      	beq.n	8001454 <HAL_DMA_Init+0xb8>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a59      	ldr	r2, [pc, #356]	@ (8001578 <HAL_DMA_Init+0x1dc>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d01d      	beq.n	8001454 <HAL_DMA_Init+0xb8>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a57      	ldr	r2, [pc, #348]	@ (800157c <HAL_DMA_Init+0x1e0>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d018      	beq.n	8001454 <HAL_DMA_Init+0xb8>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a56      	ldr	r2, [pc, #344]	@ (8001580 <HAL_DMA_Init+0x1e4>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d013      	beq.n	8001454 <HAL_DMA_Init+0xb8>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a54      	ldr	r2, [pc, #336]	@ (8001584 <HAL_DMA_Init+0x1e8>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d00e      	beq.n	8001454 <HAL_DMA_Init+0xb8>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a53      	ldr	r2, [pc, #332]	@ (8001588 <HAL_DMA_Init+0x1ec>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d009      	beq.n	8001454 <HAL_DMA_Init+0xb8>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a51      	ldr	r2, [pc, #324]	@ (800158c <HAL_DMA_Init+0x1f0>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d004      	beq.n	8001454 <HAL_DMA_Init+0xb8>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a50      	ldr	r2, [pc, #320]	@ (8001590 <HAL_DMA_Init+0x1f4>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d101      	bne.n	8001458 <HAL_DMA_Init+0xbc>
 8001454:	2301      	movs	r3, #1
 8001456:	e000      	b.n	800145a <HAL_DMA_Init+0xbe>
 8001458:	2300      	movs	r3, #0
 800145a:	2b00      	cmp	r3, #0
 800145c:	f000 813c 	beq.w	80016d8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2202      	movs	r2, #2
 8001464:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a37      	ldr	r2, [pc, #220]	@ (8001554 <HAL_DMA_Init+0x1b8>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d04a      	beq.n	8001510 <HAL_DMA_Init+0x174>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a36      	ldr	r2, [pc, #216]	@ (8001558 <HAL_DMA_Init+0x1bc>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d045      	beq.n	8001510 <HAL_DMA_Init+0x174>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a34      	ldr	r2, [pc, #208]	@ (800155c <HAL_DMA_Init+0x1c0>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d040      	beq.n	8001510 <HAL_DMA_Init+0x174>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a33      	ldr	r2, [pc, #204]	@ (8001560 <HAL_DMA_Init+0x1c4>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d03b      	beq.n	8001510 <HAL_DMA_Init+0x174>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a31      	ldr	r2, [pc, #196]	@ (8001564 <HAL_DMA_Init+0x1c8>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d036      	beq.n	8001510 <HAL_DMA_Init+0x174>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a30      	ldr	r2, [pc, #192]	@ (8001568 <HAL_DMA_Init+0x1cc>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d031      	beq.n	8001510 <HAL_DMA_Init+0x174>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a2e      	ldr	r2, [pc, #184]	@ (800156c <HAL_DMA_Init+0x1d0>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d02c      	beq.n	8001510 <HAL_DMA_Init+0x174>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a2d      	ldr	r2, [pc, #180]	@ (8001570 <HAL_DMA_Init+0x1d4>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d027      	beq.n	8001510 <HAL_DMA_Init+0x174>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a2b      	ldr	r2, [pc, #172]	@ (8001574 <HAL_DMA_Init+0x1d8>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d022      	beq.n	8001510 <HAL_DMA_Init+0x174>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a2a      	ldr	r2, [pc, #168]	@ (8001578 <HAL_DMA_Init+0x1dc>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d01d      	beq.n	8001510 <HAL_DMA_Init+0x174>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a28      	ldr	r2, [pc, #160]	@ (800157c <HAL_DMA_Init+0x1e0>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d018      	beq.n	8001510 <HAL_DMA_Init+0x174>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a27      	ldr	r2, [pc, #156]	@ (8001580 <HAL_DMA_Init+0x1e4>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d013      	beq.n	8001510 <HAL_DMA_Init+0x174>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a25      	ldr	r2, [pc, #148]	@ (8001584 <HAL_DMA_Init+0x1e8>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d00e      	beq.n	8001510 <HAL_DMA_Init+0x174>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a24      	ldr	r2, [pc, #144]	@ (8001588 <HAL_DMA_Init+0x1ec>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d009      	beq.n	8001510 <HAL_DMA_Init+0x174>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a22      	ldr	r2, [pc, #136]	@ (800158c <HAL_DMA_Init+0x1f0>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d004      	beq.n	8001510 <HAL_DMA_Init+0x174>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a21      	ldr	r2, [pc, #132]	@ (8001590 <HAL_DMA_Init+0x1f4>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d108      	bne.n	8001522 <HAL_DMA_Init+0x186>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 0201 	bic.w	r2, r2, #1
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	e007      	b.n	8001532 <HAL_DMA_Init+0x196>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 0201 	bic.w	r2, r2, #1
 8001530:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001532:	e02f      	b.n	8001594 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001534:	f7ff fd9e 	bl	8001074 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b05      	cmp	r3, #5
 8001540:	d928      	bls.n	8001594 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2220      	movs	r2, #32
 8001546:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2203      	movs	r2, #3
 800154c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e242      	b.n	80019da <HAL_DMA_Init+0x63e>
 8001554:	40020010 	.word	0x40020010
 8001558:	40020028 	.word	0x40020028
 800155c:	40020040 	.word	0x40020040
 8001560:	40020058 	.word	0x40020058
 8001564:	40020070 	.word	0x40020070
 8001568:	40020088 	.word	0x40020088
 800156c:	400200a0 	.word	0x400200a0
 8001570:	400200b8 	.word	0x400200b8
 8001574:	40020410 	.word	0x40020410
 8001578:	40020428 	.word	0x40020428
 800157c:	40020440 	.word	0x40020440
 8001580:	40020458 	.word	0x40020458
 8001584:	40020470 	.word	0x40020470
 8001588:	40020488 	.word	0x40020488
 800158c:	400204a0 	.word	0x400204a0
 8001590:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1c8      	bne.n	8001534 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	4b83      	ldr	r3, [pc, #524]	@ (80017bc <HAL_DMA_Init+0x420>)
 80015ae:	4013      	ands	r3, r2
 80015b0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80015ba:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a1b      	ldr	r3, [r3, #32]
 80015d8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	4313      	orrs	r3, r2
 80015de:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e4:	2b04      	cmp	r3, #4
 80015e6:	d107      	bne.n	80015f8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f0:	4313      	orrs	r3, r2
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	2b28      	cmp	r3, #40	@ 0x28
 80015fe:	d903      	bls.n	8001608 <HAL_DMA_Init+0x26c>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b2e      	cmp	r3, #46	@ 0x2e
 8001606:	d91f      	bls.n	8001648 <HAL_DMA_Init+0x2ac>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b3e      	cmp	r3, #62	@ 0x3e
 800160e:	d903      	bls.n	8001618 <HAL_DMA_Init+0x27c>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2b42      	cmp	r3, #66	@ 0x42
 8001616:	d917      	bls.n	8001648 <HAL_DMA_Init+0x2ac>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b46      	cmp	r3, #70	@ 0x46
 800161e:	d903      	bls.n	8001628 <HAL_DMA_Init+0x28c>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2b48      	cmp	r3, #72	@ 0x48
 8001626:	d90f      	bls.n	8001648 <HAL_DMA_Init+0x2ac>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b4e      	cmp	r3, #78	@ 0x4e
 800162e:	d903      	bls.n	8001638 <HAL_DMA_Init+0x29c>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b52      	cmp	r3, #82	@ 0x52
 8001636:	d907      	bls.n	8001648 <HAL_DMA_Init+0x2ac>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	2b73      	cmp	r3, #115	@ 0x73
 800163e:	d905      	bls.n	800164c <HAL_DMA_Init+0x2b0>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2b77      	cmp	r3, #119	@ 0x77
 8001646:	d801      	bhi.n	800164c <HAL_DMA_Init+0x2b0>
 8001648:	2301      	movs	r3, #1
 800164a:	e000      	b.n	800164e <HAL_DMA_Init+0x2b2>
 800164c:	2300      	movs	r3, #0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001658:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	f023 0307 	bic.w	r3, r3, #7
 8001670:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	4313      	orrs	r3, r2
 800167a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001680:	2b04      	cmp	r3, #4
 8001682:	d117      	bne.n	80016b4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001688:	697a      	ldr	r2, [r7, #20]
 800168a:	4313      	orrs	r3, r2
 800168c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00e      	beq.n	80016b4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f001 fdca 	bl	8003230 <DMA_CheckFifoParam>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d008      	beq.n	80016b4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2240      	movs	r2, #64	@ 0x40
 80016a6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e192      	b.n	80019da <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f001 fd05 	bl	80030cc <DMA_CalcBaseAndBitshift>
 80016c2:	4603      	mov	r3, r0
 80016c4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016ca:	f003 031f 	and.w	r3, r3, #31
 80016ce:	223f      	movs	r2, #63	@ 0x3f
 80016d0:	409a      	lsls	r2, r3
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	e0c8      	b.n	800186a <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a38      	ldr	r2, [pc, #224]	@ (80017c0 <HAL_DMA_Init+0x424>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d022      	beq.n	8001728 <HAL_DMA_Init+0x38c>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a37      	ldr	r2, [pc, #220]	@ (80017c4 <HAL_DMA_Init+0x428>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d01d      	beq.n	8001728 <HAL_DMA_Init+0x38c>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a35      	ldr	r2, [pc, #212]	@ (80017c8 <HAL_DMA_Init+0x42c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d018      	beq.n	8001728 <HAL_DMA_Init+0x38c>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a34      	ldr	r2, [pc, #208]	@ (80017cc <HAL_DMA_Init+0x430>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d013      	beq.n	8001728 <HAL_DMA_Init+0x38c>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a32      	ldr	r2, [pc, #200]	@ (80017d0 <HAL_DMA_Init+0x434>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d00e      	beq.n	8001728 <HAL_DMA_Init+0x38c>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a31      	ldr	r2, [pc, #196]	@ (80017d4 <HAL_DMA_Init+0x438>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d009      	beq.n	8001728 <HAL_DMA_Init+0x38c>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a2f      	ldr	r2, [pc, #188]	@ (80017d8 <HAL_DMA_Init+0x43c>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d004      	beq.n	8001728 <HAL_DMA_Init+0x38c>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a2e      	ldr	r2, [pc, #184]	@ (80017dc <HAL_DMA_Init+0x440>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d101      	bne.n	800172c <HAL_DMA_Init+0x390>
 8001728:	2301      	movs	r3, #1
 800172a:	e000      	b.n	800172e <HAL_DMA_Init+0x392>
 800172c:	2300      	movs	r3, #0
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 8092 	beq.w	8001858 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a21      	ldr	r2, [pc, #132]	@ (80017c0 <HAL_DMA_Init+0x424>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d021      	beq.n	8001782 <HAL_DMA_Init+0x3e6>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a20      	ldr	r2, [pc, #128]	@ (80017c4 <HAL_DMA_Init+0x428>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d01c      	beq.n	8001782 <HAL_DMA_Init+0x3e6>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a1e      	ldr	r2, [pc, #120]	@ (80017c8 <HAL_DMA_Init+0x42c>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d017      	beq.n	8001782 <HAL_DMA_Init+0x3e6>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a1d      	ldr	r2, [pc, #116]	@ (80017cc <HAL_DMA_Init+0x430>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d012      	beq.n	8001782 <HAL_DMA_Init+0x3e6>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a1b      	ldr	r2, [pc, #108]	@ (80017d0 <HAL_DMA_Init+0x434>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d00d      	beq.n	8001782 <HAL_DMA_Init+0x3e6>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a1a      	ldr	r2, [pc, #104]	@ (80017d4 <HAL_DMA_Init+0x438>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d008      	beq.n	8001782 <HAL_DMA_Init+0x3e6>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a18      	ldr	r2, [pc, #96]	@ (80017d8 <HAL_DMA_Init+0x43c>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d003      	beq.n	8001782 <HAL_DMA_Init+0x3e6>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a17      	ldr	r2, [pc, #92]	@ (80017dc <HAL_DMA_Init+0x440>)
 8001780:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2202      	movs	r2, #2
 8001786:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	4b10      	ldr	r3, [pc, #64]	@ (80017e0 <HAL_DMA_Init+0x444>)
 800179e:	4013      	ands	r3, r2
 80017a0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	2b40      	cmp	r3, #64	@ 0x40
 80017a8:	d01c      	beq.n	80017e4 <HAL_DMA_Init+0x448>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	2b80      	cmp	r3, #128	@ 0x80
 80017b0:	d102      	bne.n	80017b8 <HAL_DMA_Init+0x41c>
 80017b2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017b6:	e016      	b.n	80017e6 <HAL_DMA_Init+0x44a>
 80017b8:	2300      	movs	r3, #0
 80017ba:	e014      	b.n	80017e6 <HAL_DMA_Init+0x44a>
 80017bc:	fe10803f 	.word	0xfe10803f
 80017c0:	58025408 	.word	0x58025408
 80017c4:	5802541c 	.word	0x5802541c
 80017c8:	58025430 	.word	0x58025430
 80017cc:	58025444 	.word	0x58025444
 80017d0:	58025458 	.word	0x58025458
 80017d4:	5802546c 	.word	0x5802546c
 80017d8:	58025480 	.word	0x58025480
 80017dc:	58025494 	.word	0x58025494
 80017e0:	fffe000f 	.word	0xfffe000f
 80017e4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	68d2      	ldr	r2, [r2, #12]
 80017ea:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80017ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80017f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80017fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001804:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800180c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a1b      	ldr	r3, [r3, #32]
 8001812:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001814:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	4313      	orrs	r3, r2
 800181a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	4b6e      	ldr	r3, [pc, #440]	@ (80019e4 <HAL_DMA_Init+0x648>)
 800182c:	4413      	add	r3, r2
 800182e:	4a6e      	ldr	r2, [pc, #440]	@ (80019e8 <HAL_DMA_Init+0x64c>)
 8001830:	fba2 2303 	umull	r2, r3, r2, r3
 8001834:	091b      	lsrs	r3, r3, #4
 8001836:	009a      	lsls	r2, r3, #2
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f001 fc45 	bl	80030cc <DMA_CalcBaseAndBitshift>
 8001842:	4603      	mov	r3, r0
 8001844:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800184a:	f003 031f 	and.w	r3, r3, #31
 800184e:	2201      	movs	r2, #1
 8001850:	409a      	lsls	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	e008      	b.n	800186a <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2240      	movs	r2, #64	@ 0x40
 800185c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2203      	movs	r2, #3
 8001862:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e0b7      	b.n	80019da <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a5f      	ldr	r2, [pc, #380]	@ (80019ec <HAL_DMA_Init+0x650>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d072      	beq.n	800195a <HAL_DMA_Init+0x5be>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a5d      	ldr	r2, [pc, #372]	@ (80019f0 <HAL_DMA_Init+0x654>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d06d      	beq.n	800195a <HAL_DMA_Init+0x5be>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a5c      	ldr	r2, [pc, #368]	@ (80019f4 <HAL_DMA_Init+0x658>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d068      	beq.n	800195a <HAL_DMA_Init+0x5be>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a5a      	ldr	r2, [pc, #360]	@ (80019f8 <HAL_DMA_Init+0x65c>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d063      	beq.n	800195a <HAL_DMA_Init+0x5be>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a59      	ldr	r2, [pc, #356]	@ (80019fc <HAL_DMA_Init+0x660>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d05e      	beq.n	800195a <HAL_DMA_Init+0x5be>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a57      	ldr	r2, [pc, #348]	@ (8001a00 <HAL_DMA_Init+0x664>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d059      	beq.n	800195a <HAL_DMA_Init+0x5be>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a56      	ldr	r2, [pc, #344]	@ (8001a04 <HAL_DMA_Init+0x668>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d054      	beq.n	800195a <HAL_DMA_Init+0x5be>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a54      	ldr	r2, [pc, #336]	@ (8001a08 <HAL_DMA_Init+0x66c>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d04f      	beq.n	800195a <HAL_DMA_Init+0x5be>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a53      	ldr	r2, [pc, #332]	@ (8001a0c <HAL_DMA_Init+0x670>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d04a      	beq.n	800195a <HAL_DMA_Init+0x5be>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a51      	ldr	r2, [pc, #324]	@ (8001a10 <HAL_DMA_Init+0x674>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d045      	beq.n	800195a <HAL_DMA_Init+0x5be>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a50      	ldr	r2, [pc, #320]	@ (8001a14 <HAL_DMA_Init+0x678>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d040      	beq.n	800195a <HAL_DMA_Init+0x5be>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a4e      	ldr	r2, [pc, #312]	@ (8001a18 <HAL_DMA_Init+0x67c>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d03b      	beq.n	800195a <HAL_DMA_Init+0x5be>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a4d      	ldr	r2, [pc, #308]	@ (8001a1c <HAL_DMA_Init+0x680>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d036      	beq.n	800195a <HAL_DMA_Init+0x5be>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a4b      	ldr	r2, [pc, #300]	@ (8001a20 <HAL_DMA_Init+0x684>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d031      	beq.n	800195a <HAL_DMA_Init+0x5be>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a4a      	ldr	r2, [pc, #296]	@ (8001a24 <HAL_DMA_Init+0x688>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d02c      	beq.n	800195a <HAL_DMA_Init+0x5be>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a48      	ldr	r2, [pc, #288]	@ (8001a28 <HAL_DMA_Init+0x68c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d027      	beq.n	800195a <HAL_DMA_Init+0x5be>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a47      	ldr	r2, [pc, #284]	@ (8001a2c <HAL_DMA_Init+0x690>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d022      	beq.n	800195a <HAL_DMA_Init+0x5be>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a45      	ldr	r2, [pc, #276]	@ (8001a30 <HAL_DMA_Init+0x694>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d01d      	beq.n	800195a <HAL_DMA_Init+0x5be>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a44      	ldr	r2, [pc, #272]	@ (8001a34 <HAL_DMA_Init+0x698>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d018      	beq.n	800195a <HAL_DMA_Init+0x5be>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a42      	ldr	r2, [pc, #264]	@ (8001a38 <HAL_DMA_Init+0x69c>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d013      	beq.n	800195a <HAL_DMA_Init+0x5be>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a41      	ldr	r2, [pc, #260]	@ (8001a3c <HAL_DMA_Init+0x6a0>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d00e      	beq.n	800195a <HAL_DMA_Init+0x5be>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a3f      	ldr	r2, [pc, #252]	@ (8001a40 <HAL_DMA_Init+0x6a4>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d009      	beq.n	800195a <HAL_DMA_Init+0x5be>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a3e      	ldr	r2, [pc, #248]	@ (8001a44 <HAL_DMA_Init+0x6a8>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d004      	beq.n	800195a <HAL_DMA_Init+0x5be>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a3c      	ldr	r2, [pc, #240]	@ (8001a48 <HAL_DMA_Init+0x6ac>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d101      	bne.n	800195e <HAL_DMA_Init+0x5c2>
 800195a:	2301      	movs	r3, #1
 800195c:	e000      	b.n	8001960 <HAL_DMA_Init+0x5c4>
 800195e:	2300      	movs	r3, #0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d032      	beq.n	80019ca <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f001 fcdf 	bl	8003328 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	2b80      	cmp	r3, #128	@ 0x80
 8001970:	d102      	bne.n	8001978 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001980:	b2d2      	uxtb	r2, r2
 8001982:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800198c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d010      	beq.n	80019b8 <HAL_DMA_Init+0x61c>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b08      	cmp	r3, #8
 800199c:	d80c      	bhi.n	80019b8 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f001 fd5c 	bl	800345c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	e008      	b.n	80019ca <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	a7fdabf8 	.word	0xa7fdabf8
 80019e8:	cccccccd 	.word	0xcccccccd
 80019ec:	40020010 	.word	0x40020010
 80019f0:	40020028 	.word	0x40020028
 80019f4:	40020040 	.word	0x40020040
 80019f8:	40020058 	.word	0x40020058
 80019fc:	40020070 	.word	0x40020070
 8001a00:	40020088 	.word	0x40020088
 8001a04:	400200a0 	.word	0x400200a0
 8001a08:	400200b8 	.word	0x400200b8
 8001a0c:	40020410 	.word	0x40020410
 8001a10:	40020428 	.word	0x40020428
 8001a14:	40020440 	.word	0x40020440
 8001a18:	40020458 	.word	0x40020458
 8001a1c:	40020470 	.word	0x40020470
 8001a20:	40020488 	.word	0x40020488
 8001a24:	400204a0 	.word	0x400204a0
 8001a28:	400204b8 	.word	0x400204b8
 8001a2c:	58025408 	.word	0x58025408
 8001a30:	5802541c 	.word	0x5802541c
 8001a34:	58025430 	.word	0x58025430
 8001a38:	58025444 	.word	0x58025444
 8001a3c:	58025458 	.word	0x58025458
 8001a40:	5802546c 	.word	0x5802546c
 8001a44:	58025480 	.word	0x58025480
 8001a48:	58025494 	.word	0x58025494

08001a4c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
 8001a58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d101      	bne.n	8001a68 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e226      	b.n	8001eb6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d101      	bne.n	8001a76 <HAL_DMA_Start_IT+0x2a>
 8001a72:	2302      	movs	r3, #2
 8001a74:	e21f      	b.n	8001eb6 <HAL_DMA_Start_IT+0x46a>
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	f040 820a 	bne.w	8001ea0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2202      	movs	r2, #2
 8001a90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2200      	movs	r2, #0
 8001a98:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a68      	ldr	r2, [pc, #416]	@ (8001c40 <HAL_DMA_Start_IT+0x1f4>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d04a      	beq.n	8001b3a <HAL_DMA_Start_IT+0xee>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a66      	ldr	r2, [pc, #408]	@ (8001c44 <HAL_DMA_Start_IT+0x1f8>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d045      	beq.n	8001b3a <HAL_DMA_Start_IT+0xee>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a65      	ldr	r2, [pc, #404]	@ (8001c48 <HAL_DMA_Start_IT+0x1fc>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d040      	beq.n	8001b3a <HAL_DMA_Start_IT+0xee>
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a63      	ldr	r2, [pc, #396]	@ (8001c4c <HAL_DMA_Start_IT+0x200>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d03b      	beq.n	8001b3a <HAL_DMA_Start_IT+0xee>
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a62      	ldr	r2, [pc, #392]	@ (8001c50 <HAL_DMA_Start_IT+0x204>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d036      	beq.n	8001b3a <HAL_DMA_Start_IT+0xee>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a60      	ldr	r2, [pc, #384]	@ (8001c54 <HAL_DMA_Start_IT+0x208>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d031      	beq.n	8001b3a <HAL_DMA_Start_IT+0xee>
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a5f      	ldr	r2, [pc, #380]	@ (8001c58 <HAL_DMA_Start_IT+0x20c>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d02c      	beq.n	8001b3a <HAL_DMA_Start_IT+0xee>
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a5d      	ldr	r2, [pc, #372]	@ (8001c5c <HAL_DMA_Start_IT+0x210>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d027      	beq.n	8001b3a <HAL_DMA_Start_IT+0xee>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a5c      	ldr	r2, [pc, #368]	@ (8001c60 <HAL_DMA_Start_IT+0x214>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d022      	beq.n	8001b3a <HAL_DMA_Start_IT+0xee>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a5a      	ldr	r2, [pc, #360]	@ (8001c64 <HAL_DMA_Start_IT+0x218>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d01d      	beq.n	8001b3a <HAL_DMA_Start_IT+0xee>
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a59      	ldr	r2, [pc, #356]	@ (8001c68 <HAL_DMA_Start_IT+0x21c>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d018      	beq.n	8001b3a <HAL_DMA_Start_IT+0xee>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a57      	ldr	r2, [pc, #348]	@ (8001c6c <HAL_DMA_Start_IT+0x220>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d013      	beq.n	8001b3a <HAL_DMA_Start_IT+0xee>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a56      	ldr	r2, [pc, #344]	@ (8001c70 <HAL_DMA_Start_IT+0x224>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d00e      	beq.n	8001b3a <HAL_DMA_Start_IT+0xee>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a54      	ldr	r2, [pc, #336]	@ (8001c74 <HAL_DMA_Start_IT+0x228>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d009      	beq.n	8001b3a <HAL_DMA_Start_IT+0xee>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a53      	ldr	r2, [pc, #332]	@ (8001c78 <HAL_DMA_Start_IT+0x22c>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d004      	beq.n	8001b3a <HAL_DMA_Start_IT+0xee>
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a51      	ldr	r2, [pc, #324]	@ (8001c7c <HAL_DMA_Start_IT+0x230>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d108      	bne.n	8001b4c <HAL_DMA_Start_IT+0x100>
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0201 	bic.w	r2, r2, #1
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	e007      	b.n	8001b5c <HAL_DMA_Start_IT+0x110>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 0201 	bic.w	r2, r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	68b9      	ldr	r1, [r7, #8]
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	f001 f906 	bl	8002d74 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a34      	ldr	r2, [pc, #208]	@ (8001c40 <HAL_DMA_Start_IT+0x1f4>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d04a      	beq.n	8001c08 <HAL_DMA_Start_IT+0x1bc>
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a33      	ldr	r2, [pc, #204]	@ (8001c44 <HAL_DMA_Start_IT+0x1f8>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d045      	beq.n	8001c08 <HAL_DMA_Start_IT+0x1bc>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a31      	ldr	r2, [pc, #196]	@ (8001c48 <HAL_DMA_Start_IT+0x1fc>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d040      	beq.n	8001c08 <HAL_DMA_Start_IT+0x1bc>
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a30      	ldr	r2, [pc, #192]	@ (8001c4c <HAL_DMA_Start_IT+0x200>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d03b      	beq.n	8001c08 <HAL_DMA_Start_IT+0x1bc>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a2e      	ldr	r2, [pc, #184]	@ (8001c50 <HAL_DMA_Start_IT+0x204>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d036      	beq.n	8001c08 <HAL_DMA_Start_IT+0x1bc>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a2d      	ldr	r2, [pc, #180]	@ (8001c54 <HAL_DMA_Start_IT+0x208>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d031      	beq.n	8001c08 <HAL_DMA_Start_IT+0x1bc>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a2b      	ldr	r2, [pc, #172]	@ (8001c58 <HAL_DMA_Start_IT+0x20c>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d02c      	beq.n	8001c08 <HAL_DMA_Start_IT+0x1bc>
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a2a      	ldr	r2, [pc, #168]	@ (8001c5c <HAL_DMA_Start_IT+0x210>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d027      	beq.n	8001c08 <HAL_DMA_Start_IT+0x1bc>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a28      	ldr	r2, [pc, #160]	@ (8001c60 <HAL_DMA_Start_IT+0x214>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d022      	beq.n	8001c08 <HAL_DMA_Start_IT+0x1bc>
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a27      	ldr	r2, [pc, #156]	@ (8001c64 <HAL_DMA_Start_IT+0x218>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d01d      	beq.n	8001c08 <HAL_DMA_Start_IT+0x1bc>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a25      	ldr	r2, [pc, #148]	@ (8001c68 <HAL_DMA_Start_IT+0x21c>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d018      	beq.n	8001c08 <HAL_DMA_Start_IT+0x1bc>
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a24      	ldr	r2, [pc, #144]	@ (8001c6c <HAL_DMA_Start_IT+0x220>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d013      	beq.n	8001c08 <HAL_DMA_Start_IT+0x1bc>
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a22      	ldr	r2, [pc, #136]	@ (8001c70 <HAL_DMA_Start_IT+0x224>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d00e      	beq.n	8001c08 <HAL_DMA_Start_IT+0x1bc>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a21      	ldr	r2, [pc, #132]	@ (8001c74 <HAL_DMA_Start_IT+0x228>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d009      	beq.n	8001c08 <HAL_DMA_Start_IT+0x1bc>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a1f      	ldr	r2, [pc, #124]	@ (8001c78 <HAL_DMA_Start_IT+0x22c>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d004      	beq.n	8001c08 <HAL_DMA_Start_IT+0x1bc>
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a1e      	ldr	r2, [pc, #120]	@ (8001c7c <HAL_DMA_Start_IT+0x230>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d101      	bne.n	8001c0c <HAL_DMA_Start_IT+0x1c0>
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e000      	b.n	8001c0e <HAL_DMA_Start_IT+0x1c2>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d036      	beq.n	8001c80 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f023 021e 	bic.w	r2, r3, #30
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f042 0216 	orr.w	r2, r2, #22
 8001c24:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d03e      	beq.n	8001cac <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f042 0208 	orr.w	r2, r2, #8
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	e035      	b.n	8001cac <HAL_DMA_Start_IT+0x260>
 8001c40:	40020010 	.word	0x40020010
 8001c44:	40020028 	.word	0x40020028
 8001c48:	40020040 	.word	0x40020040
 8001c4c:	40020058 	.word	0x40020058
 8001c50:	40020070 	.word	0x40020070
 8001c54:	40020088 	.word	0x40020088
 8001c58:	400200a0 	.word	0x400200a0
 8001c5c:	400200b8 	.word	0x400200b8
 8001c60:	40020410 	.word	0x40020410
 8001c64:	40020428 	.word	0x40020428
 8001c68:	40020440 	.word	0x40020440
 8001c6c:	40020458 	.word	0x40020458
 8001c70:	40020470 	.word	0x40020470
 8001c74:	40020488 	.word	0x40020488
 8001c78:	400204a0 	.word	0x400204a0
 8001c7c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f023 020e 	bic.w	r2, r3, #14
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f042 020a 	orr.w	r2, r2, #10
 8001c92:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d007      	beq.n	8001cac <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0204 	orr.w	r2, r2, #4
 8001caa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a83      	ldr	r2, [pc, #524]	@ (8001ec0 <HAL_DMA_Start_IT+0x474>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d072      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a82      	ldr	r2, [pc, #520]	@ (8001ec4 <HAL_DMA_Start_IT+0x478>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d06d      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a80      	ldr	r2, [pc, #512]	@ (8001ec8 <HAL_DMA_Start_IT+0x47c>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d068      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a7f      	ldr	r2, [pc, #508]	@ (8001ecc <HAL_DMA_Start_IT+0x480>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d063      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a7d      	ldr	r2, [pc, #500]	@ (8001ed0 <HAL_DMA_Start_IT+0x484>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d05e      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a7c      	ldr	r2, [pc, #496]	@ (8001ed4 <HAL_DMA_Start_IT+0x488>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d059      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a7a      	ldr	r2, [pc, #488]	@ (8001ed8 <HAL_DMA_Start_IT+0x48c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d054      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a79      	ldr	r2, [pc, #484]	@ (8001edc <HAL_DMA_Start_IT+0x490>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d04f      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a77      	ldr	r2, [pc, #476]	@ (8001ee0 <HAL_DMA_Start_IT+0x494>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d04a      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a76      	ldr	r2, [pc, #472]	@ (8001ee4 <HAL_DMA_Start_IT+0x498>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d045      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a74      	ldr	r2, [pc, #464]	@ (8001ee8 <HAL_DMA_Start_IT+0x49c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d040      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a73      	ldr	r2, [pc, #460]	@ (8001eec <HAL_DMA_Start_IT+0x4a0>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d03b      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a71      	ldr	r2, [pc, #452]	@ (8001ef0 <HAL_DMA_Start_IT+0x4a4>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d036      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a70      	ldr	r2, [pc, #448]	@ (8001ef4 <HAL_DMA_Start_IT+0x4a8>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d031      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a6e      	ldr	r2, [pc, #440]	@ (8001ef8 <HAL_DMA_Start_IT+0x4ac>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d02c      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a6d      	ldr	r2, [pc, #436]	@ (8001efc <HAL_DMA_Start_IT+0x4b0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d027      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a6b      	ldr	r2, [pc, #428]	@ (8001f00 <HAL_DMA_Start_IT+0x4b4>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d022      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a6a      	ldr	r2, [pc, #424]	@ (8001f04 <HAL_DMA_Start_IT+0x4b8>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d01d      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a68      	ldr	r2, [pc, #416]	@ (8001f08 <HAL_DMA_Start_IT+0x4bc>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d018      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a67      	ldr	r2, [pc, #412]	@ (8001f0c <HAL_DMA_Start_IT+0x4c0>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d013      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a65      	ldr	r2, [pc, #404]	@ (8001f10 <HAL_DMA_Start_IT+0x4c4>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d00e      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a64      	ldr	r2, [pc, #400]	@ (8001f14 <HAL_DMA_Start_IT+0x4c8>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d009      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a62      	ldr	r2, [pc, #392]	@ (8001f18 <HAL_DMA_Start_IT+0x4cc>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d004      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a61      	ldr	r2, [pc, #388]	@ (8001f1c <HAL_DMA_Start_IT+0x4d0>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d101      	bne.n	8001da0 <HAL_DMA_Start_IT+0x354>
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e000      	b.n	8001da2 <HAL_DMA_Start_IT+0x356>
 8001da0:	2300      	movs	r3, #0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d01a      	beq.n	8001ddc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d007      	beq.n	8001dc4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dbe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dc2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d007      	beq.n	8001ddc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001dd6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dda:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a37      	ldr	r2, [pc, #220]	@ (8001ec0 <HAL_DMA_Start_IT+0x474>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d04a      	beq.n	8001e7c <HAL_DMA_Start_IT+0x430>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a36      	ldr	r2, [pc, #216]	@ (8001ec4 <HAL_DMA_Start_IT+0x478>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d045      	beq.n	8001e7c <HAL_DMA_Start_IT+0x430>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a34      	ldr	r2, [pc, #208]	@ (8001ec8 <HAL_DMA_Start_IT+0x47c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d040      	beq.n	8001e7c <HAL_DMA_Start_IT+0x430>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a33      	ldr	r2, [pc, #204]	@ (8001ecc <HAL_DMA_Start_IT+0x480>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d03b      	beq.n	8001e7c <HAL_DMA_Start_IT+0x430>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a31      	ldr	r2, [pc, #196]	@ (8001ed0 <HAL_DMA_Start_IT+0x484>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d036      	beq.n	8001e7c <HAL_DMA_Start_IT+0x430>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a30      	ldr	r2, [pc, #192]	@ (8001ed4 <HAL_DMA_Start_IT+0x488>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d031      	beq.n	8001e7c <HAL_DMA_Start_IT+0x430>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a2e      	ldr	r2, [pc, #184]	@ (8001ed8 <HAL_DMA_Start_IT+0x48c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d02c      	beq.n	8001e7c <HAL_DMA_Start_IT+0x430>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a2d      	ldr	r2, [pc, #180]	@ (8001edc <HAL_DMA_Start_IT+0x490>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d027      	beq.n	8001e7c <HAL_DMA_Start_IT+0x430>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a2b      	ldr	r2, [pc, #172]	@ (8001ee0 <HAL_DMA_Start_IT+0x494>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d022      	beq.n	8001e7c <HAL_DMA_Start_IT+0x430>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a2a      	ldr	r2, [pc, #168]	@ (8001ee4 <HAL_DMA_Start_IT+0x498>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d01d      	beq.n	8001e7c <HAL_DMA_Start_IT+0x430>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a28      	ldr	r2, [pc, #160]	@ (8001ee8 <HAL_DMA_Start_IT+0x49c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d018      	beq.n	8001e7c <HAL_DMA_Start_IT+0x430>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a27      	ldr	r2, [pc, #156]	@ (8001eec <HAL_DMA_Start_IT+0x4a0>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d013      	beq.n	8001e7c <HAL_DMA_Start_IT+0x430>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a25      	ldr	r2, [pc, #148]	@ (8001ef0 <HAL_DMA_Start_IT+0x4a4>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d00e      	beq.n	8001e7c <HAL_DMA_Start_IT+0x430>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a24      	ldr	r2, [pc, #144]	@ (8001ef4 <HAL_DMA_Start_IT+0x4a8>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d009      	beq.n	8001e7c <HAL_DMA_Start_IT+0x430>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a22      	ldr	r2, [pc, #136]	@ (8001ef8 <HAL_DMA_Start_IT+0x4ac>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d004      	beq.n	8001e7c <HAL_DMA_Start_IT+0x430>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a21      	ldr	r2, [pc, #132]	@ (8001efc <HAL_DMA_Start_IT+0x4b0>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d108      	bne.n	8001e8e <HAL_DMA_Start_IT+0x442>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0201 	orr.w	r2, r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	e012      	b.n	8001eb4 <HAL_DMA_Start_IT+0x468>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f042 0201 	orr.w	r2, r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	e009      	b.n	8001eb4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ea6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001eb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40020010 	.word	0x40020010
 8001ec4:	40020028 	.word	0x40020028
 8001ec8:	40020040 	.word	0x40020040
 8001ecc:	40020058 	.word	0x40020058
 8001ed0:	40020070 	.word	0x40020070
 8001ed4:	40020088 	.word	0x40020088
 8001ed8:	400200a0 	.word	0x400200a0
 8001edc:	400200b8 	.word	0x400200b8
 8001ee0:	40020410 	.word	0x40020410
 8001ee4:	40020428 	.word	0x40020428
 8001ee8:	40020440 	.word	0x40020440
 8001eec:	40020458 	.word	0x40020458
 8001ef0:	40020470 	.word	0x40020470
 8001ef4:	40020488 	.word	0x40020488
 8001ef8:	400204a0 	.word	0x400204a0
 8001efc:	400204b8 	.word	0x400204b8
 8001f00:	58025408 	.word	0x58025408
 8001f04:	5802541c 	.word	0x5802541c
 8001f08:	58025430 	.word	0x58025430
 8001f0c:	58025444 	.word	0x58025444
 8001f10:	58025458 	.word	0x58025458
 8001f14:	5802546c 	.word	0x5802546c
 8001f18:	58025480 	.word	0x58025480
 8001f1c:	58025494 	.word	0x58025494

08001f20 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08a      	sub	sp, #40	@ 0x28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f2c:	4b67      	ldr	r3, [pc, #412]	@ (80020cc <HAL_DMA_IRQHandler+0x1ac>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a67      	ldr	r2, [pc, #412]	@ (80020d0 <HAL_DMA_IRQHandler+0x1b0>)
 8001f32:	fba2 2303 	umull	r2, r3, r2, r3
 8001f36:	0a9b      	lsrs	r3, r3, #10
 8001f38:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f3e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f44:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001f46:	6a3b      	ldr	r3, [r7, #32]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a5f      	ldr	r2, [pc, #380]	@ (80020d4 <HAL_DMA_IRQHandler+0x1b4>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d04a      	beq.n	8001ff2 <HAL_DMA_IRQHandler+0xd2>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a5d      	ldr	r2, [pc, #372]	@ (80020d8 <HAL_DMA_IRQHandler+0x1b8>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d045      	beq.n	8001ff2 <HAL_DMA_IRQHandler+0xd2>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a5c      	ldr	r2, [pc, #368]	@ (80020dc <HAL_DMA_IRQHandler+0x1bc>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d040      	beq.n	8001ff2 <HAL_DMA_IRQHandler+0xd2>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a5a      	ldr	r2, [pc, #360]	@ (80020e0 <HAL_DMA_IRQHandler+0x1c0>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d03b      	beq.n	8001ff2 <HAL_DMA_IRQHandler+0xd2>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a59      	ldr	r2, [pc, #356]	@ (80020e4 <HAL_DMA_IRQHandler+0x1c4>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d036      	beq.n	8001ff2 <HAL_DMA_IRQHandler+0xd2>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a57      	ldr	r2, [pc, #348]	@ (80020e8 <HAL_DMA_IRQHandler+0x1c8>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d031      	beq.n	8001ff2 <HAL_DMA_IRQHandler+0xd2>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a56      	ldr	r2, [pc, #344]	@ (80020ec <HAL_DMA_IRQHandler+0x1cc>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d02c      	beq.n	8001ff2 <HAL_DMA_IRQHandler+0xd2>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a54      	ldr	r2, [pc, #336]	@ (80020f0 <HAL_DMA_IRQHandler+0x1d0>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d027      	beq.n	8001ff2 <HAL_DMA_IRQHandler+0xd2>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a53      	ldr	r2, [pc, #332]	@ (80020f4 <HAL_DMA_IRQHandler+0x1d4>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d022      	beq.n	8001ff2 <HAL_DMA_IRQHandler+0xd2>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a51      	ldr	r2, [pc, #324]	@ (80020f8 <HAL_DMA_IRQHandler+0x1d8>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d01d      	beq.n	8001ff2 <HAL_DMA_IRQHandler+0xd2>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a50      	ldr	r2, [pc, #320]	@ (80020fc <HAL_DMA_IRQHandler+0x1dc>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d018      	beq.n	8001ff2 <HAL_DMA_IRQHandler+0xd2>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a4e      	ldr	r2, [pc, #312]	@ (8002100 <HAL_DMA_IRQHandler+0x1e0>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d013      	beq.n	8001ff2 <HAL_DMA_IRQHandler+0xd2>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a4d      	ldr	r2, [pc, #308]	@ (8002104 <HAL_DMA_IRQHandler+0x1e4>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d00e      	beq.n	8001ff2 <HAL_DMA_IRQHandler+0xd2>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a4b      	ldr	r2, [pc, #300]	@ (8002108 <HAL_DMA_IRQHandler+0x1e8>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d009      	beq.n	8001ff2 <HAL_DMA_IRQHandler+0xd2>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a4a      	ldr	r2, [pc, #296]	@ (800210c <HAL_DMA_IRQHandler+0x1ec>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d004      	beq.n	8001ff2 <HAL_DMA_IRQHandler+0xd2>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a48      	ldr	r2, [pc, #288]	@ (8002110 <HAL_DMA_IRQHandler+0x1f0>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d101      	bne.n	8001ff6 <HAL_DMA_IRQHandler+0xd6>
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e000      	b.n	8001ff8 <HAL_DMA_IRQHandler+0xd8>
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 842b 	beq.w	8002854 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002002:	f003 031f 	and.w	r3, r3, #31
 8002006:	2208      	movs	r2, #8
 8002008:	409a      	lsls	r2, r3
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 80a2 	beq.w	8002158 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a2e      	ldr	r2, [pc, #184]	@ (80020d4 <HAL_DMA_IRQHandler+0x1b4>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d04a      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x194>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a2d      	ldr	r2, [pc, #180]	@ (80020d8 <HAL_DMA_IRQHandler+0x1b8>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d045      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x194>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a2b      	ldr	r2, [pc, #172]	@ (80020dc <HAL_DMA_IRQHandler+0x1bc>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d040      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x194>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a2a      	ldr	r2, [pc, #168]	@ (80020e0 <HAL_DMA_IRQHandler+0x1c0>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d03b      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x194>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a28      	ldr	r2, [pc, #160]	@ (80020e4 <HAL_DMA_IRQHandler+0x1c4>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d036      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x194>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a27      	ldr	r2, [pc, #156]	@ (80020e8 <HAL_DMA_IRQHandler+0x1c8>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d031      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x194>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a25      	ldr	r2, [pc, #148]	@ (80020ec <HAL_DMA_IRQHandler+0x1cc>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d02c      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x194>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a24      	ldr	r2, [pc, #144]	@ (80020f0 <HAL_DMA_IRQHandler+0x1d0>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d027      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x194>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a22      	ldr	r2, [pc, #136]	@ (80020f4 <HAL_DMA_IRQHandler+0x1d4>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d022      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x194>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a21      	ldr	r2, [pc, #132]	@ (80020f8 <HAL_DMA_IRQHandler+0x1d8>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d01d      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x194>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a1f      	ldr	r2, [pc, #124]	@ (80020fc <HAL_DMA_IRQHandler+0x1dc>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d018      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x194>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a1e      	ldr	r2, [pc, #120]	@ (8002100 <HAL_DMA_IRQHandler+0x1e0>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d013      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x194>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a1c      	ldr	r2, [pc, #112]	@ (8002104 <HAL_DMA_IRQHandler+0x1e4>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d00e      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x194>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a1b      	ldr	r2, [pc, #108]	@ (8002108 <HAL_DMA_IRQHandler+0x1e8>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d009      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x194>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a19      	ldr	r2, [pc, #100]	@ (800210c <HAL_DMA_IRQHandler+0x1ec>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d004      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x194>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a18      	ldr	r2, [pc, #96]	@ (8002110 <HAL_DMA_IRQHandler+0x1f0>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d12f      	bne.n	8002114 <HAL_DMA_IRQHandler+0x1f4>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0304 	and.w	r3, r3, #4
 80020be:	2b00      	cmp	r3, #0
 80020c0:	bf14      	ite	ne
 80020c2:	2301      	movne	r3, #1
 80020c4:	2300      	moveq	r3, #0
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	e02e      	b.n	8002128 <HAL_DMA_IRQHandler+0x208>
 80020ca:	bf00      	nop
 80020cc:	24000000 	.word	0x24000000
 80020d0:	1b4e81b5 	.word	0x1b4e81b5
 80020d4:	40020010 	.word	0x40020010
 80020d8:	40020028 	.word	0x40020028
 80020dc:	40020040 	.word	0x40020040
 80020e0:	40020058 	.word	0x40020058
 80020e4:	40020070 	.word	0x40020070
 80020e8:	40020088 	.word	0x40020088
 80020ec:	400200a0 	.word	0x400200a0
 80020f0:	400200b8 	.word	0x400200b8
 80020f4:	40020410 	.word	0x40020410
 80020f8:	40020428 	.word	0x40020428
 80020fc:	40020440 	.word	0x40020440
 8002100:	40020458 	.word	0x40020458
 8002104:	40020470 	.word	0x40020470
 8002108:	40020488 	.word	0x40020488
 800210c:	400204a0 	.word	0x400204a0
 8002110:	400204b8 	.word	0x400204b8
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	2b00      	cmp	r3, #0
 8002120:	bf14      	ite	ne
 8002122:	2301      	movne	r3, #1
 8002124:	2300      	moveq	r3, #0
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b00      	cmp	r3, #0
 800212a:	d015      	beq.n	8002158 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 0204 	bic.w	r2, r2, #4
 800213a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002140:	f003 031f 	and.w	r3, r3, #31
 8002144:	2208      	movs	r2, #8
 8002146:	409a      	lsls	r2, r3
 8002148:	6a3b      	ldr	r3, [r7, #32]
 800214a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002150:	f043 0201 	orr.w	r2, r3, #1
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800215c:	f003 031f 	and.w	r3, r3, #31
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	fa22 f303 	lsr.w	r3, r2, r3
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d06e      	beq.n	800224c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a69      	ldr	r2, [pc, #420]	@ (8002318 <HAL_DMA_IRQHandler+0x3f8>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d04a      	beq.n	800220e <HAL_DMA_IRQHandler+0x2ee>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a67      	ldr	r2, [pc, #412]	@ (800231c <HAL_DMA_IRQHandler+0x3fc>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d045      	beq.n	800220e <HAL_DMA_IRQHandler+0x2ee>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a66      	ldr	r2, [pc, #408]	@ (8002320 <HAL_DMA_IRQHandler+0x400>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d040      	beq.n	800220e <HAL_DMA_IRQHandler+0x2ee>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a64      	ldr	r2, [pc, #400]	@ (8002324 <HAL_DMA_IRQHandler+0x404>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d03b      	beq.n	800220e <HAL_DMA_IRQHandler+0x2ee>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a63      	ldr	r2, [pc, #396]	@ (8002328 <HAL_DMA_IRQHandler+0x408>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d036      	beq.n	800220e <HAL_DMA_IRQHandler+0x2ee>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a61      	ldr	r2, [pc, #388]	@ (800232c <HAL_DMA_IRQHandler+0x40c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d031      	beq.n	800220e <HAL_DMA_IRQHandler+0x2ee>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a60      	ldr	r2, [pc, #384]	@ (8002330 <HAL_DMA_IRQHandler+0x410>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d02c      	beq.n	800220e <HAL_DMA_IRQHandler+0x2ee>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a5e      	ldr	r2, [pc, #376]	@ (8002334 <HAL_DMA_IRQHandler+0x414>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d027      	beq.n	800220e <HAL_DMA_IRQHandler+0x2ee>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a5d      	ldr	r2, [pc, #372]	@ (8002338 <HAL_DMA_IRQHandler+0x418>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d022      	beq.n	800220e <HAL_DMA_IRQHandler+0x2ee>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a5b      	ldr	r2, [pc, #364]	@ (800233c <HAL_DMA_IRQHandler+0x41c>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d01d      	beq.n	800220e <HAL_DMA_IRQHandler+0x2ee>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a5a      	ldr	r2, [pc, #360]	@ (8002340 <HAL_DMA_IRQHandler+0x420>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d018      	beq.n	800220e <HAL_DMA_IRQHandler+0x2ee>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a58      	ldr	r2, [pc, #352]	@ (8002344 <HAL_DMA_IRQHandler+0x424>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d013      	beq.n	800220e <HAL_DMA_IRQHandler+0x2ee>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a57      	ldr	r2, [pc, #348]	@ (8002348 <HAL_DMA_IRQHandler+0x428>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d00e      	beq.n	800220e <HAL_DMA_IRQHandler+0x2ee>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a55      	ldr	r2, [pc, #340]	@ (800234c <HAL_DMA_IRQHandler+0x42c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d009      	beq.n	800220e <HAL_DMA_IRQHandler+0x2ee>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a54      	ldr	r2, [pc, #336]	@ (8002350 <HAL_DMA_IRQHandler+0x430>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d004      	beq.n	800220e <HAL_DMA_IRQHandler+0x2ee>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a52      	ldr	r2, [pc, #328]	@ (8002354 <HAL_DMA_IRQHandler+0x434>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d10a      	bne.n	8002224 <HAL_DMA_IRQHandler+0x304>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	695b      	ldr	r3, [r3, #20]
 8002214:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002218:	2b00      	cmp	r3, #0
 800221a:	bf14      	ite	ne
 800221c:	2301      	movne	r3, #1
 800221e:	2300      	moveq	r3, #0
 8002220:	b2db      	uxtb	r3, r3
 8002222:	e003      	b.n	800222c <HAL_DMA_IRQHandler+0x30c>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2300      	movs	r3, #0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00d      	beq.n	800224c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002234:	f003 031f 	and.w	r3, r3, #31
 8002238:	2201      	movs	r2, #1
 800223a:	409a      	lsls	r2, r3
 800223c:	6a3b      	ldr	r3, [r7, #32]
 800223e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002244:	f043 0202 	orr.w	r2, r3, #2
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002250:	f003 031f 	and.w	r3, r3, #31
 8002254:	2204      	movs	r2, #4
 8002256:	409a      	lsls	r2, r3
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	4013      	ands	r3, r2
 800225c:	2b00      	cmp	r3, #0
 800225e:	f000 808f 	beq.w	8002380 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a2c      	ldr	r2, [pc, #176]	@ (8002318 <HAL_DMA_IRQHandler+0x3f8>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d04a      	beq.n	8002302 <HAL_DMA_IRQHandler+0x3e2>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a2a      	ldr	r2, [pc, #168]	@ (800231c <HAL_DMA_IRQHandler+0x3fc>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d045      	beq.n	8002302 <HAL_DMA_IRQHandler+0x3e2>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a29      	ldr	r2, [pc, #164]	@ (8002320 <HAL_DMA_IRQHandler+0x400>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d040      	beq.n	8002302 <HAL_DMA_IRQHandler+0x3e2>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a27      	ldr	r2, [pc, #156]	@ (8002324 <HAL_DMA_IRQHandler+0x404>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d03b      	beq.n	8002302 <HAL_DMA_IRQHandler+0x3e2>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a26      	ldr	r2, [pc, #152]	@ (8002328 <HAL_DMA_IRQHandler+0x408>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d036      	beq.n	8002302 <HAL_DMA_IRQHandler+0x3e2>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a24      	ldr	r2, [pc, #144]	@ (800232c <HAL_DMA_IRQHandler+0x40c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d031      	beq.n	8002302 <HAL_DMA_IRQHandler+0x3e2>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a23      	ldr	r2, [pc, #140]	@ (8002330 <HAL_DMA_IRQHandler+0x410>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d02c      	beq.n	8002302 <HAL_DMA_IRQHandler+0x3e2>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a21      	ldr	r2, [pc, #132]	@ (8002334 <HAL_DMA_IRQHandler+0x414>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d027      	beq.n	8002302 <HAL_DMA_IRQHandler+0x3e2>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a20      	ldr	r2, [pc, #128]	@ (8002338 <HAL_DMA_IRQHandler+0x418>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d022      	beq.n	8002302 <HAL_DMA_IRQHandler+0x3e2>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a1e      	ldr	r2, [pc, #120]	@ (800233c <HAL_DMA_IRQHandler+0x41c>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d01d      	beq.n	8002302 <HAL_DMA_IRQHandler+0x3e2>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a1d      	ldr	r2, [pc, #116]	@ (8002340 <HAL_DMA_IRQHandler+0x420>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d018      	beq.n	8002302 <HAL_DMA_IRQHandler+0x3e2>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002344 <HAL_DMA_IRQHandler+0x424>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d013      	beq.n	8002302 <HAL_DMA_IRQHandler+0x3e2>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a1a      	ldr	r2, [pc, #104]	@ (8002348 <HAL_DMA_IRQHandler+0x428>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d00e      	beq.n	8002302 <HAL_DMA_IRQHandler+0x3e2>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a18      	ldr	r2, [pc, #96]	@ (800234c <HAL_DMA_IRQHandler+0x42c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d009      	beq.n	8002302 <HAL_DMA_IRQHandler+0x3e2>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a17      	ldr	r2, [pc, #92]	@ (8002350 <HAL_DMA_IRQHandler+0x430>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d004      	beq.n	8002302 <HAL_DMA_IRQHandler+0x3e2>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a15      	ldr	r2, [pc, #84]	@ (8002354 <HAL_DMA_IRQHandler+0x434>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d12a      	bne.n	8002358 <HAL_DMA_IRQHandler+0x438>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	bf14      	ite	ne
 8002310:	2301      	movne	r3, #1
 8002312:	2300      	moveq	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	e023      	b.n	8002360 <HAL_DMA_IRQHandler+0x440>
 8002318:	40020010 	.word	0x40020010
 800231c:	40020028 	.word	0x40020028
 8002320:	40020040 	.word	0x40020040
 8002324:	40020058 	.word	0x40020058
 8002328:	40020070 	.word	0x40020070
 800232c:	40020088 	.word	0x40020088
 8002330:	400200a0 	.word	0x400200a0
 8002334:	400200b8 	.word	0x400200b8
 8002338:	40020410 	.word	0x40020410
 800233c:	40020428 	.word	0x40020428
 8002340:	40020440 	.word	0x40020440
 8002344:	40020458 	.word	0x40020458
 8002348:	40020470 	.word	0x40020470
 800234c:	40020488 	.word	0x40020488
 8002350:	400204a0 	.word	0x400204a0
 8002354:	400204b8 	.word	0x400204b8
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2300      	movs	r3, #0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00d      	beq.n	8002380 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002368:	f003 031f 	and.w	r3, r3, #31
 800236c:	2204      	movs	r2, #4
 800236e:	409a      	lsls	r2, r3
 8002370:	6a3b      	ldr	r3, [r7, #32]
 8002372:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002378:	f043 0204 	orr.w	r2, r3, #4
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002384:	f003 031f 	and.w	r3, r3, #31
 8002388:	2210      	movs	r2, #16
 800238a:	409a      	lsls	r2, r3
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	4013      	ands	r3, r2
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 80a6 	beq.w	80024e2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a85      	ldr	r2, [pc, #532]	@ (80025b0 <HAL_DMA_IRQHandler+0x690>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d04a      	beq.n	8002436 <HAL_DMA_IRQHandler+0x516>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a83      	ldr	r2, [pc, #524]	@ (80025b4 <HAL_DMA_IRQHandler+0x694>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d045      	beq.n	8002436 <HAL_DMA_IRQHandler+0x516>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a82      	ldr	r2, [pc, #520]	@ (80025b8 <HAL_DMA_IRQHandler+0x698>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d040      	beq.n	8002436 <HAL_DMA_IRQHandler+0x516>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a80      	ldr	r2, [pc, #512]	@ (80025bc <HAL_DMA_IRQHandler+0x69c>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d03b      	beq.n	8002436 <HAL_DMA_IRQHandler+0x516>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a7f      	ldr	r2, [pc, #508]	@ (80025c0 <HAL_DMA_IRQHandler+0x6a0>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d036      	beq.n	8002436 <HAL_DMA_IRQHandler+0x516>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a7d      	ldr	r2, [pc, #500]	@ (80025c4 <HAL_DMA_IRQHandler+0x6a4>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d031      	beq.n	8002436 <HAL_DMA_IRQHandler+0x516>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a7c      	ldr	r2, [pc, #496]	@ (80025c8 <HAL_DMA_IRQHandler+0x6a8>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d02c      	beq.n	8002436 <HAL_DMA_IRQHandler+0x516>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a7a      	ldr	r2, [pc, #488]	@ (80025cc <HAL_DMA_IRQHandler+0x6ac>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d027      	beq.n	8002436 <HAL_DMA_IRQHandler+0x516>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a79      	ldr	r2, [pc, #484]	@ (80025d0 <HAL_DMA_IRQHandler+0x6b0>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d022      	beq.n	8002436 <HAL_DMA_IRQHandler+0x516>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a77      	ldr	r2, [pc, #476]	@ (80025d4 <HAL_DMA_IRQHandler+0x6b4>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d01d      	beq.n	8002436 <HAL_DMA_IRQHandler+0x516>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a76      	ldr	r2, [pc, #472]	@ (80025d8 <HAL_DMA_IRQHandler+0x6b8>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d018      	beq.n	8002436 <HAL_DMA_IRQHandler+0x516>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a74      	ldr	r2, [pc, #464]	@ (80025dc <HAL_DMA_IRQHandler+0x6bc>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d013      	beq.n	8002436 <HAL_DMA_IRQHandler+0x516>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a73      	ldr	r2, [pc, #460]	@ (80025e0 <HAL_DMA_IRQHandler+0x6c0>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d00e      	beq.n	8002436 <HAL_DMA_IRQHandler+0x516>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a71      	ldr	r2, [pc, #452]	@ (80025e4 <HAL_DMA_IRQHandler+0x6c4>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d009      	beq.n	8002436 <HAL_DMA_IRQHandler+0x516>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a70      	ldr	r2, [pc, #448]	@ (80025e8 <HAL_DMA_IRQHandler+0x6c8>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d004      	beq.n	8002436 <HAL_DMA_IRQHandler+0x516>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a6e      	ldr	r2, [pc, #440]	@ (80025ec <HAL_DMA_IRQHandler+0x6cc>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d10a      	bne.n	800244c <HAL_DMA_IRQHandler+0x52c>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0308 	and.w	r3, r3, #8
 8002440:	2b00      	cmp	r3, #0
 8002442:	bf14      	ite	ne
 8002444:	2301      	movne	r3, #1
 8002446:	2300      	moveq	r3, #0
 8002448:	b2db      	uxtb	r3, r3
 800244a:	e009      	b.n	8002460 <HAL_DMA_IRQHandler+0x540>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0304 	and.w	r3, r3, #4
 8002456:	2b00      	cmp	r3, #0
 8002458:	bf14      	ite	ne
 800245a:	2301      	movne	r3, #1
 800245c:	2300      	moveq	r3, #0
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b00      	cmp	r3, #0
 8002462:	d03e      	beq.n	80024e2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002468:	f003 031f 	and.w	r3, r3, #31
 800246c:	2210      	movs	r2, #16
 800246e:	409a      	lsls	r2, r3
 8002470:	6a3b      	ldr	r3, [r7, #32]
 8002472:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d018      	beq.n	80024b4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d108      	bne.n	80024a2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002494:	2b00      	cmp	r3, #0
 8002496:	d024      	beq.n	80024e2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	4798      	blx	r3
 80024a0:	e01f      	b.n	80024e2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d01b      	beq.n	80024e2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	4798      	blx	r3
 80024b2:	e016      	b.n	80024e2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d107      	bne.n	80024d2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0208 	bic.w	r2, r2, #8
 80024d0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024e6:	f003 031f 	and.w	r3, r3, #31
 80024ea:	2220      	movs	r2, #32
 80024ec:	409a      	lsls	r2, r3
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 8110 	beq.w	8002718 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a2c      	ldr	r2, [pc, #176]	@ (80025b0 <HAL_DMA_IRQHandler+0x690>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d04a      	beq.n	8002598 <HAL_DMA_IRQHandler+0x678>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a2b      	ldr	r2, [pc, #172]	@ (80025b4 <HAL_DMA_IRQHandler+0x694>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d045      	beq.n	8002598 <HAL_DMA_IRQHandler+0x678>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a29      	ldr	r2, [pc, #164]	@ (80025b8 <HAL_DMA_IRQHandler+0x698>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d040      	beq.n	8002598 <HAL_DMA_IRQHandler+0x678>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a28      	ldr	r2, [pc, #160]	@ (80025bc <HAL_DMA_IRQHandler+0x69c>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d03b      	beq.n	8002598 <HAL_DMA_IRQHandler+0x678>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a26      	ldr	r2, [pc, #152]	@ (80025c0 <HAL_DMA_IRQHandler+0x6a0>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d036      	beq.n	8002598 <HAL_DMA_IRQHandler+0x678>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a25      	ldr	r2, [pc, #148]	@ (80025c4 <HAL_DMA_IRQHandler+0x6a4>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d031      	beq.n	8002598 <HAL_DMA_IRQHandler+0x678>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a23      	ldr	r2, [pc, #140]	@ (80025c8 <HAL_DMA_IRQHandler+0x6a8>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d02c      	beq.n	8002598 <HAL_DMA_IRQHandler+0x678>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a22      	ldr	r2, [pc, #136]	@ (80025cc <HAL_DMA_IRQHandler+0x6ac>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d027      	beq.n	8002598 <HAL_DMA_IRQHandler+0x678>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a20      	ldr	r2, [pc, #128]	@ (80025d0 <HAL_DMA_IRQHandler+0x6b0>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d022      	beq.n	8002598 <HAL_DMA_IRQHandler+0x678>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a1f      	ldr	r2, [pc, #124]	@ (80025d4 <HAL_DMA_IRQHandler+0x6b4>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d01d      	beq.n	8002598 <HAL_DMA_IRQHandler+0x678>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a1d      	ldr	r2, [pc, #116]	@ (80025d8 <HAL_DMA_IRQHandler+0x6b8>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d018      	beq.n	8002598 <HAL_DMA_IRQHandler+0x678>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a1c      	ldr	r2, [pc, #112]	@ (80025dc <HAL_DMA_IRQHandler+0x6bc>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d013      	beq.n	8002598 <HAL_DMA_IRQHandler+0x678>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a1a      	ldr	r2, [pc, #104]	@ (80025e0 <HAL_DMA_IRQHandler+0x6c0>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d00e      	beq.n	8002598 <HAL_DMA_IRQHandler+0x678>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a19      	ldr	r2, [pc, #100]	@ (80025e4 <HAL_DMA_IRQHandler+0x6c4>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d009      	beq.n	8002598 <HAL_DMA_IRQHandler+0x678>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a17      	ldr	r2, [pc, #92]	@ (80025e8 <HAL_DMA_IRQHandler+0x6c8>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d004      	beq.n	8002598 <HAL_DMA_IRQHandler+0x678>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a16      	ldr	r2, [pc, #88]	@ (80025ec <HAL_DMA_IRQHandler+0x6cc>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d12b      	bne.n	80025f0 <HAL_DMA_IRQHandler+0x6d0>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0310 	and.w	r3, r3, #16
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	bf14      	ite	ne
 80025a6:	2301      	movne	r3, #1
 80025a8:	2300      	moveq	r3, #0
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	e02a      	b.n	8002604 <HAL_DMA_IRQHandler+0x6e4>
 80025ae:	bf00      	nop
 80025b0:	40020010 	.word	0x40020010
 80025b4:	40020028 	.word	0x40020028
 80025b8:	40020040 	.word	0x40020040
 80025bc:	40020058 	.word	0x40020058
 80025c0:	40020070 	.word	0x40020070
 80025c4:	40020088 	.word	0x40020088
 80025c8:	400200a0 	.word	0x400200a0
 80025cc:	400200b8 	.word	0x400200b8
 80025d0:	40020410 	.word	0x40020410
 80025d4:	40020428 	.word	0x40020428
 80025d8:	40020440 	.word	0x40020440
 80025dc:	40020458 	.word	0x40020458
 80025e0:	40020470 	.word	0x40020470
 80025e4:	40020488 	.word	0x40020488
 80025e8:	400204a0 	.word	0x400204a0
 80025ec:	400204b8 	.word	0x400204b8
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	bf14      	ite	ne
 80025fe:	2301      	movne	r3, #1
 8002600:	2300      	moveq	r3, #0
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 8087 	beq.w	8002718 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800260e:	f003 031f 	and.w	r3, r3, #31
 8002612:	2220      	movs	r2, #32
 8002614:	409a      	lsls	r2, r3
 8002616:	6a3b      	ldr	r3, [r7, #32]
 8002618:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b04      	cmp	r3, #4
 8002624:	d139      	bne.n	800269a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 0216 	bic.w	r2, r2, #22
 8002634:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	695a      	ldr	r2, [r3, #20]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002644:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264a:	2b00      	cmp	r3, #0
 800264c:	d103      	bne.n	8002656 <HAL_DMA_IRQHandler+0x736>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002652:	2b00      	cmp	r3, #0
 8002654:	d007      	beq.n	8002666 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 0208 	bic.w	r2, r2, #8
 8002664:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800266a:	f003 031f 	and.w	r3, r3, #31
 800266e:	223f      	movs	r2, #63	@ 0x3f
 8002670:	409a      	lsls	r2, r3
 8002672:	6a3b      	ldr	r3, [r7, #32]
 8002674:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 834a 	beq.w	8002d24 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	4798      	blx	r3
          }
          return;
 8002698:	e344      	b.n	8002d24 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d018      	beq.n	80026da <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d108      	bne.n	80026c8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d02c      	beq.n	8002718 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	4798      	blx	r3
 80026c6:	e027      	b.n	8002718 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d023      	beq.n	8002718 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	4798      	blx	r3
 80026d8:	e01e      	b.n	8002718 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10f      	bne.n	8002708 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0210 	bic.w	r2, r2, #16
 80026f6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 8306 	beq.w	8002d2e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 8088 	beq.w	8002840 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2204      	movs	r2, #4
 8002734:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a7a      	ldr	r2, [pc, #488]	@ (8002928 <HAL_DMA_IRQHandler+0xa08>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d04a      	beq.n	80027d8 <HAL_DMA_IRQHandler+0x8b8>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a79      	ldr	r2, [pc, #484]	@ (800292c <HAL_DMA_IRQHandler+0xa0c>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d045      	beq.n	80027d8 <HAL_DMA_IRQHandler+0x8b8>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a77      	ldr	r2, [pc, #476]	@ (8002930 <HAL_DMA_IRQHandler+0xa10>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d040      	beq.n	80027d8 <HAL_DMA_IRQHandler+0x8b8>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a76      	ldr	r2, [pc, #472]	@ (8002934 <HAL_DMA_IRQHandler+0xa14>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d03b      	beq.n	80027d8 <HAL_DMA_IRQHandler+0x8b8>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a74      	ldr	r2, [pc, #464]	@ (8002938 <HAL_DMA_IRQHandler+0xa18>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d036      	beq.n	80027d8 <HAL_DMA_IRQHandler+0x8b8>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a73      	ldr	r2, [pc, #460]	@ (800293c <HAL_DMA_IRQHandler+0xa1c>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d031      	beq.n	80027d8 <HAL_DMA_IRQHandler+0x8b8>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a71      	ldr	r2, [pc, #452]	@ (8002940 <HAL_DMA_IRQHandler+0xa20>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d02c      	beq.n	80027d8 <HAL_DMA_IRQHandler+0x8b8>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a70      	ldr	r2, [pc, #448]	@ (8002944 <HAL_DMA_IRQHandler+0xa24>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d027      	beq.n	80027d8 <HAL_DMA_IRQHandler+0x8b8>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a6e      	ldr	r2, [pc, #440]	@ (8002948 <HAL_DMA_IRQHandler+0xa28>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d022      	beq.n	80027d8 <HAL_DMA_IRQHandler+0x8b8>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a6d      	ldr	r2, [pc, #436]	@ (800294c <HAL_DMA_IRQHandler+0xa2c>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d01d      	beq.n	80027d8 <HAL_DMA_IRQHandler+0x8b8>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a6b      	ldr	r2, [pc, #428]	@ (8002950 <HAL_DMA_IRQHandler+0xa30>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d018      	beq.n	80027d8 <HAL_DMA_IRQHandler+0x8b8>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a6a      	ldr	r2, [pc, #424]	@ (8002954 <HAL_DMA_IRQHandler+0xa34>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d013      	beq.n	80027d8 <HAL_DMA_IRQHandler+0x8b8>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a68      	ldr	r2, [pc, #416]	@ (8002958 <HAL_DMA_IRQHandler+0xa38>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d00e      	beq.n	80027d8 <HAL_DMA_IRQHandler+0x8b8>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a67      	ldr	r2, [pc, #412]	@ (800295c <HAL_DMA_IRQHandler+0xa3c>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d009      	beq.n	80027d8 <HAL_DMA_IRQHandler+0x8b8>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a65      	ldr	r2, [pc, #404]	@ (8002960 <HAL_DMA_IRQHandler+0xa40>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d004      	beq.n	80027d8 <HAL_DMA_IRQHandler+0x8b8>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a64      	ldr	r2, [pc, #400]	@ (8002964 <HAL_DMA_IRQHandler+0xa44>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d108      	bne.n	80027ea <HAL_DMA_IRQHandler+0x8ca>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0201 	bic.w	r2, r2, #1
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	e007      	b.n	80027fa <HAL_DMA_IRQHandler+0x8da>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 0201 	bic.w	r2, r2, #1
 80027f8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	3301      	adds	r3, #1
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002802:	429a      	cmp	r2, r3
 8002804:	d307      	bcc.n	8002816 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1f2      	bne.n	80027fa <HAL_DMA_IRQHandler+0x8da>
 8002814:	e000      	b.n	8002818 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002816:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d004      	beq.n	8002830 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2203      	movs	r2, #3
 800282a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800282e:	e003      	b.n	8002838 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 8272 	beq.w	8002d2e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	4798      	blx	r3
 8002852:	e26c      	b.n	8002d2e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a43      	ldr	r2, [pc, #268]	@ (8002968 <HAL_DMA_IRQHandler+0xa48>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d022      	beq.n	80028a4 <HAL_DMA_IRQHandler+0x984>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a42      	ldr	r2, [pc, #264]	@ (800296c <HAL_DMA_IRQHandler+0xa4c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d01d      	beq.n	80028a4 <HAL_DMA_IRQHandler+0x984>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a40      	ldr	r2, [pc, #256]	@ (8002970 <HAL_DMA_IRQHandler+0xa50>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d018      	beq.n	80028a4 <HAL_DMA_IRQHandler+0x984>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a3f      	ldr	r2, [pc, #252]	@ (8002974 <HAL_DMA_IRQHandler+0xa54>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d013      	beq.n	80028a4 <HAL_DMA_IRQHandler+0x984>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a3d      	ldr	r2, [pc, #244]	@ (8002978 <HAL_DMA_IRQHandler+0xa58>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d00e      	beq.n	80028a4 <HAL_DMA_IRQHandler+0x984>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a3c      	ldr	r2, [pc, #240]	@ (800297c <HAL_DMA_IRQHandler+0xa5c>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d009      	beq.n	80028a4 <HAL_DMA_IRQHandler+0x984>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a3a      	ldr	r2, [pc, #232]	@ (8002980 <HAL_DMA_IRQHandler+0xa60>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d004      	beq.n	80028a4 <HAL_DMA_IRQHandler+0x984>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a39      	ldr	r2, [pc, #228]	@ (8002984 <HAL_DMA_IRQHandler+0xa64>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d101      	bne.n	80028a8 <HAL_DMA_IRQHandler+0x988>
 80028a4:	2301      	movs	r3, #1
 80028a6:	e000      	b.n	80028aa <HAL_DMA_IRQHandler+0x98a>
 80028a8:	2300      	movs	r3, #0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 823f 	beq.w	8002d2e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028bc:	f003 031f 	and.w	r3, r3, #31
 80028c0:	2204      	movs	r2, #4
 80028c2:	409a      	lsls	r2, r3
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	4013      	ands	r3, r2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 80cd 	beq.w	8002a68 <HAL_DMA_IRQHandler+0xb48>
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 80c7 	beq.w	8002a68 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028de:	f003 031f 	and.w	r3, r3, #31
 80028e2:	2204      	movs	r2, #4
 80028e4:	409a      	lsls	r2, r3
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d049      	beq.n	8002988 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d109      	bne.n	8002912 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002902:	2b00      	cmp	r3, #0
 8002904:	f000 8210 	beq.w	8002d28 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002910:	e20a      	b.n	8002d28 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 8206 	beq.w	8002d28 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002924:	e200      	b.n	8002d28 <HAL_DMA_IRQHandler+0xe08>
 8002926:	bf00      	nop
 8002928:	40020010 	.word	0x40020010
 800292c:	40020028 	.word	0x40020028
 8002930:	40020040 	.word	0x40020040
 8002934:	40020058 	.word	0x40020058
 8002938:	40020070 	.word	0x40020070
 800293c:	40020088 	.word	0x40020088
 8002940:	400200a0 	.word	0x400200a0
 8002944:	400200b8 	.word	0x400200b8
 8002948:	40020410 	.word	0x40020410
 800294c:	40020428 	.word	0x40020428
 8002950:	40020440 	.word	0x40020440
 8002954:	40020458 	.word	0x40020458
 8002958:	40020470 	.word	0x40020470
 800295c:	40020488 	.word	0x40020488
 8002960:	400204a0 	.word	0x400204a0
 8002964:	400204b8 	.word	0x400204b8
 8002968:	58025408 	.word	0x58025408
 800296c:	5802541c 	.word	0x5802541c
 8002970:	58025430 	.word	0x58025430
 8002974:	58025444 	.word	0x58025444
 8002978:	58025458 	.word	0x58025458
 800297c:	5802546c 	.word	0x5802546c
 8002980:	58025480 	.word	0x58025480
 8002984:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	f003 0320 	and.w	r3, r3, #32
 800298e:	2b00      	cmp	r3, #0
 8002990:	d160      	bne.n	8002a54 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a7f      	ldr	r2, [pc, #508]	@ (8002b94 <HAL_DMA_IRQHandler+0xc74>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d04a      	beq.n	8002a32 <HAL_DMA_IRQHandler+0xb12>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a7d      	ldr	r2, [pc, #500]	@ (8002b98 <HAL_DMA_IRQHandler+0xc78>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d045      	beq.n	8002a32 <HAL_DMA_IRQHandler+0xb12>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a7c      	ldr	r2, [pc, #496]	@ (8002b9c <HAL_DMA_IRQHandler+0xc7c>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d040      	beq.n	8002a32 <HAL_DMA_IRQHandler+0xb12>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a7a      	ldr	r2, [pc, #488]	@ (8002ba0 <HAL_DMA_IRQHandler+0xc80>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d03b      	beq.n	8002a32 <HAL_DMA_IRQHandler+0xb12>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a79      	ldr	r2, [pc, #484]	@ (8002ba4 <HAL_DMA_IRQHandler+0xc84>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d036      	beq.n	8002a32 <HAL_DMA_IRQHandler+0xb12>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a77      	ldr	r2, [pc, #476]	@ (8002ba8 <HAL_DMA_IRQHandler+0xc88>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d031      	beq.n	8002a32 <HAL_DMA_IRQHandler+0xb12>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a76      	ldr	r2, [pc, #472]	@ (8002bac <HAL_DMA_IRQHandler+0xc8c>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d02c      	beq.n	8002a32 <HAL_DMA_IRQHandler+0xb12>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a74      	ldr	r2, [pc, #464]	@ (8002bb0 <HAL_DMA_IRQHandler+0xc90>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d027      	beq.n	8002a32 <HAL_DMA_IRQHandler+0xb12>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a73      	ldr	r2, [pc, #460]	@ (8002bb4 <HAL_DMA_IRQHandler+0xc94>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d022      	beq.n	8002a32 <HAL_DMA_IRQHandler+0xb12>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a71      	ldr	r2, [pc, #452]	@ (8002bb8 <HAL_DMA_IRQHandler+0xc98>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d01d      	beq.n	8002a32 <HAL_DMA_IRQHandler+0xb12>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a70      	ldr	r2, [pc, #448]	@ (8002bbc <HAL_DMA_IRQHandler+0xc9c>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d018      	beq.n	8002a32 <HAL_DMA_IRQHandler+0xb12>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a6e      	ldr	r2, [pc, #440]	@ (8002bc0 <HAL_DMA_IRQHandler+0xca0>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d013      	beq.n	8002a32 <HAL_DMA_IRQHandler+0xb12>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a6d      	ldr	r2, [pc, #436]	@ (8002bc4 <HAL_DMA_IRQHandler+0xca4>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d00e      	beq.n	8002a32 <HAL_DMA_IRQHandler+0xb12>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a6b      	ldr	r2, [pc, #428]	@ (8002bc8 <HAL_DMA_IRQHandler+0xca8>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d009      	beq.n	8002a32 <HAL_DMA_IRQHandler+0xb12>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a6a      	ldr	r2, [pc, #424]	@ (8002bcc <HAL_DMA_IRQHandler+0xcac>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d004      	beq.n	8002a32 <HAL_DMA_IRQHandler+0xb12>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a68      	ldr	r2, [pc, #416]	@ (8002bd0 <HAL_DMA_IRQHandler+0xcb0>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d108      	bne.n	8002a44 <HAL_DMA_IRQHandler+0xb24>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 0208 	bic.w	r2, r2, #8
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	e007      	b.n	8002a54 <HAL_DMA_IRQHandler+0xb34>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f022 0204 	bic.w	r2, r2, #4
 8002a52:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 8165 	beq.w	8002d28 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a66:	e15f      	b.n	8002d28 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a6c:	f003 031f 	and.w	r3, r3, #31
 8002a70:	2202      	movs	r2, #2
 8002a72:	409a      	lsls	r2, r3
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	4013      	ands	r3, r2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 80c5 	beq.w	8002c08 <HAL_DMA_IRQHandler+0xce8>
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 80bf 	beq.w	8002c08 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a8e:	f003 031f 	and.w	r3, r3, #31
 8002a92:	2202      	movs	r2, #2
 8002a94:	409a      	lsls	r2, r3
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d018      	beq.n	8002ad6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d109      	bne.n	8002ac2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 813a 	beq.w	8002d2c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ac0:	e134      	b.n	8002d2c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 8130 	beq.w	8002d2c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ad4:	e12a      	b.n	8002d2c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	f003 0320 	and.w	r3, r3, #32
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f040 8089 	bne.w	8002bf4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a2b      	ldr	r2, [pc, #172]	@ (8002b94 <HAL_DMA_IRQHandler+0xc74>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d04a      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xc62>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a29      	ldr	r2, [pc, #164]	@ (8002b98 <HAL_DMA_IRQHandler+0xc78>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d045      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xc62>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a28      	ldr	r2, [pc, #160]	@ (8002b9c <HAL_DMA_IRQHandler+0xc7c>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d040      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xc62>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a26      	ldr	r2, [pc, #152]	@ (8002ba0 <HAL_DMA_IRQHandler+0xc80>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d03b      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xc62>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a25      	ldr	r2, [pc, #148]	@ (8002ba4 <HAL_DMA_IRQHandler+0xc84>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d036      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xc62>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a23      	ldr	r2, [pc, #140]	@ (8002ba8 <HAL_DMA_IRQHandler+0xc88>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d031      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xc62>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a22      	ldr	r2, [pc, #136]	@ (8002bac <HAL_DMA_IRQHandler+0xc8c>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d02c      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xc62>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a20      	ldr	r2, [pc, #128]	@ (8002bb0 <HAL_DMA_IRQHandler+0xc90>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d027      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xc62>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a1f      	ldr	r2, [pc, #124]	@ (8002bb4 <HAL_DMA_IRQHandler+0xc94>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d022      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xc62>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a1d      	ldr	r2, [pc, #116]	@ (8002bb8 <HAL_DMA_IRQHandler+0xc98>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d01d      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xc62>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a1c      	ldr	r2, [pc, #112]	@ (8002bbc <HAL_DMA_IRQHandler+0xc9c>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d018      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xc62>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a1a      	ldr	r2, [pc, #104]	@ (8002bc0 <HAL_DMA_IRQHandler+0xca0>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d013      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xc62>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a19      	ldr	r2, [pc, #100]	@ (8002bc4 <HAL_DMA_IRQHandler+0xca4>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d00e      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xc62>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a17      	ldr	r2, [pc, #92]	@ (8002bc8 <HAL_DMA_IRQHandler+0xca8>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d009      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xc62>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a16      	ldr	r2, [pc, #88]	@ (8002bcc <HAL_DMA_IRQHandler+0xcac>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d004      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xc62>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a14      	ldr	r2, [pc, #80]	@ (8002bd0 <HAL_DMA_IRQHandler+0xcb0>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d128      	bne.n	8002bd4 <HAL_DMA_IRQHandler+0xcb4>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0214 	bic.w	r2, r2, #20
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	e027      	b.n	8002be4 <HAL_DMA_IRQHandler+0xcc4>
 8002b94:	40020010 	.word	0x40020010
 8002b98:	40020028 	.word	0x40020028
 8002b9c:	40020040 	.word	0x40020040
 8002ba0:	40020058 	.word	0x40020058
 8002ba4:	40020070 	.word	0x40020070
 8002ba8:	40020088 	.word	0x40020088
 8002bac:	400200a0 	.word	0x400200a0
 8002bb0:	400200b8 	.word	0x400200b8
 8002bb4:	40020410 	.word	0x40020410
 8002bb8:	40020428 	.word	0x40020428
 8002bbc:	40020440 	.word	0x40020440
 8002bc0:	40020458 	.word	0x40020458
 8002bc4:	40020470 	.word	0x40020470
 8002bc8:	40020488 	.word	0x40020488
 8002bcc:	400204a0 	.word	0x400204a0
 8002bd0:	400204b8 	.word	0x400204b8
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 020a 	bic.w	r2, r2, #10
 8002be2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 8097 	beq.w	8002d2c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c06:	e091      	b.n	8002d2c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	2208      	movs	r2, #8
 8002c12:	409a      	lsls	r2, r3
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	4013      	ands	r3, r2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 8088 	beq.w	8002d2e <HAL_DMA_IRQHandler+0xe0e>
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	f003 0308 	and.w	r3, r3, #8
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 8082 	beq.w	8002d2e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a41      	ldr	r2, [pc, #260]	@ (8002d34 <HAL_DMA_IRQHandler+0xe14>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d04a      	beq.n	8002cca <HAL_DMA_IRQHandler+0xdaa>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a3f      	ldr	r2, [pc, #252]	@ (8002d38 <HAL_DMA_IRQHandler+0xe18>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d045      	beq.n	8002cca <HAL_DMA_IRQHandler+0xdaa>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a3e      	ldr	r2, [pc, #248]	@ (8002d3c <HAL_DMA_IRQHandler+0xe1c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d040      	beq.n	8002cca <HAL_DMA_IRQHandler+0xdaa>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a3c      	ldr	r2, [pc, #240]	@ (8002d40 <HAL_DMA_IRQHandler+0xe20>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d03b      	beq.n	8002cca <HAL_DMA_IRQHandler+0xdaa>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a3b      	ldr	r2, [pc, #236]	@ (8002d44 <HAL_DMA_IRQHandler+0xe24>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d036      	beq.n	8002cca <HAL_DMA_IRQHandler+0xdaa>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a39      	ldr	r2, [pc, #228]	@ (8002d48 <HAL_DMA_IRQHandler+0xe28>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d031      	beq.n	8002cca <HAL_DMA_IRQHandler+0xdaa>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a38      	ldr	r2, [pc, #224]	@ (8002d4c <HAL_DMA_IRQHandler+0xe2c>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d02c      	beq.n	8002cca <HAL_DMA_IRQHandler+0xdaa>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a36      	ldr	r2, [pc, #216]	@ (8002d50 <HAL_DMA_IRQHandler+0xe30>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d027      	beq.n	8002cca <HAL_DMA_IRQHandler+0xdaa>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a35      	ldr	r2, [pc, #212]	@ (8002d54 <HAL_DMA_IRQHandler+0xe34>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d022      	beq.n	8002cca <HAL_DMA_IRQHandler+0xdaa>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a33      	ldr	r2, [pc, #204]	@ (8002d58 <HAL_DMA_IRQHandler+0xe38>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d01d      	beq.n	8002cca <HAL_DMA_IRQHandler+0xdaa>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a32      	ldr	r2, [pc, #200]	@ (8002d5c <HAL_DMA_IRQHandler+0xe3c>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d018      	beq.n	8002cca <HAL_DMA_IRQHandler+0xdaa>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a30      	ldr	r2, [pc, #192]	@ (8002d60 <HAL_DMA_IRQHandler+0xe40>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d013      	beq.n	8002cca <HAL_DMA_IRQHandler+0xdaa>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a2f      	ldr	r2, [pc, #188]	@ (8002d64 <HAL_DMA_IRQHandler+0xe44>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d00e      	beq.n	8002cca <HAL_DMA_IRQHandler+0xdaa>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a2d      	ldr	r2, [pc, #180]	@ (8002d68 <HAL_DMA_IRQHandler+0xe48>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d009      	beq.n	8002cca <HAL_DMA_IRQHandler+0xdaa>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a2c      	ldr	r2, [pc, #176]	@ (8002d6c <HAL_DMA_IRQHandler+0xe4c>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d004      	beq.n	8002cca <HAL_DMA_IRQHandler+0xdaa>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a2a      	ldr	r2, [pc, #168]	@ (8002d70 <HAL_DMA_IRQHandler+0xe50>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d108      	bne.n	8002cdc <HAL_DMA_IRQHandler+0xdbc>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 021c 	bic.w	r2, r2, #28
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	e007      	b.n	8002cec <HAL_DMA_IRQHandler+0xdcc>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 020e 	bic.w	r2, r2, #14
 8002cea:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf0:	f003 031f 	and.w	r3, r3, #31
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	409a      	lsls	r2, r3
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d009      	beq.n	8002d2e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	4798      	blx	r3
 8002d22:	e004      	b.n	8002d2e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002d24:	bf00      	nop
 8002d26:	e002      	b.n	8002d2e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d28:	bf00      	nop
 8002d2a:	e000      	b.n	8002d2e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d2c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002d2e:	3728      	adds	r7, #40	@ 0x28
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40020010 	.word	0x40020010
 8002d38:	40020028 	.word	0x40020028
 8002d3c:	40020040 	.word	0x40020040
 8002d40:	40020058 	.word	0x40020058
 8002d44:	40020070 	.word	0x40020070
 8002d48:	40020088 	.word	0x40020088
 8002d4c:	400200a0 	.word	0x400200a0
 8002d50:	400200b8 	.word	0x400200b8
 8002d54:	40020410 	.word	0x40020410
 8002d58:	40020428 	.word	0x40020428
 8002d5c:	40020440 	.word	0x40020440
 8002d60:	40020458 	.word	0x40020458
 8002d64:	40020470 	.word	0x40020470
 8002d68:	40020488 	.word	0x40020488
 8002d6c:	400204a0 	.word	0x400204a0
 8002d70:	400204b8 	.word	0x400204b8

08002d74 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b087      	sub	sp, #28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
 8002d80:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d86:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d8c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a7f      	ldr	r2, [pc, #508]	@ (8002f90 <DMA_SetConfig+0x21c>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d072      	beq.n	8002e7e <DMA_SetConfig+0x10a>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a7d      	ldr	r2, [pc, #500]	@ (8002f94 <DMA_SetConfig+0x220>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d06d      	beq.n	8002e7e <DMA_SetConfig+0x10a>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a7c      	ldr	r2, [pc, #496]	@ (8002f98 <DMA_SetConfig+0x224>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d068      	beq.n	8002e7e <DMA_SetConfig+0x10a>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a7a      	ldr	r2, [pc, #488]	@ (8002f9c <DMA_SetConfig+0x228>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d063      	beq.n	8002e7e <DMA_SetConfig+0x10a>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a79      	ldr	r2, [pc, #484]	@ (8002fa0 <DMA_SetConfig+0x22c>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d05e      	beq.n	8002e7e <DMA_SetConfig+0x10a>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a77      	ldr	r2, [pc, #476]	@ (8002fa4 <DMA_SetConfig+0x230>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d059      	beq.n	8002e7e <DMA_SetConfig+0x10a>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a76      	ldr	r2, [pc, #472]	@ (8002fa8 <DMA_SetConfig+0x234>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d054      	beq.n	8002e7e <DMA_SetConfig+0x10a>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a74      	ldr	r2, [pc, #464]	@ (8002fac <DMA_SetConfig+0x238>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d04f      	beq.n	8002e7e <DMA_SetConfig+0x10a>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a73      	ldr	r2, [pc, #460]	@ (8002fb0 <DMA_SetConfig+0x23c>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d04a      	beq.n	8002e7e <DMA_SetConfig+0x10a>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a71      	ldr	r2, [pc, #452]	@ (8002fb4 <DMA_SetConfig+0x240>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d045      	beq.n	8002e7e <DMA_SetConfig+0x10a>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a70      	ldr	r2, [pc, #448]	@ (8002fb8 <DMA_SetConfig+0x244>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d040      	beq.n	8002e7e <DMA_SetConfig+0x10a>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a6e      	ldr	r2, [pc, #440]	@ (8002fbc <DMA_SetConfig+0x248>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d03b      	beq.n	8002e7e <DMA_SetConfig+0x10a>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a6d      	ldr	r2, [pc, #436]	@ (8002fc0 <DMA_SetConfig+0x24c>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d036      	beq.n	8002e7e <DMA_SetConfig+0x10a>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a6b      	ldr	r2, [pc, #428]	@ (8002fc4 <DMA_SetConfig+0x250>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d031      	beq.n	8002e7e <DMA_SetConfig+0x10a>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a6a      	ldr	r2, [pc, #424]	@ (8002fc8 <DMA_SetConfig+0x254>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d02c      	beq.n	8002e7e <DMA_SetConfig+0x10a>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a68      	ldr	r2, [pc, #416]	@ (8002fcc <DMA_SetConfig+0x258>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d027      	beq.n	8002e7e <DMA_SetConfig+0x10a>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a67      	ldr	r2, [pc, #412]	@ (8002fd0 <DMA_SetConfig+0x25c>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d022      	beq.n	8002e7e <DMA_SetConfig+0x10a>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a65      	ldr	r2, [pc, #404]	@ (8002fd4 <DMA_SetConfig+0x260>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d01d      	beq.n	8002e7e <DMA_SetConfig+0x10a>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a64      	ldr	r2, [pc, #400]	@ (8002fd8 <DMA_SetConfig+0x264>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d018      	beq.n	8002e7e <DMA_SetConfig+0x10a>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a62      	ldr	r2, [pc, #392]	@ (8002fdc <DMA_SetConfig+0x268>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d013      	beq.n	8002e7e <DMA_SetConfig+0x10a>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a61      	ldr	r2, [pc, #388]	@ (8002fe0 <DMA_SetConfig+0x26c>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d00e      	beq.n	8002e7e <DMA_SetConfig+0x10a>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a5f      	ldr	r2, [pc, #380]	@ (8002fe4 <DMA_SetConfig+0x270>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d009      	beq.n	8002e7e <DMA_SetConfig+0x10a>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a5e      	ldr	r2, [pc, #376]	@ (8002fe8 <DMA_SetConfig+0x274>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d004      	beq.n	8002e7e <DMA_SetConfig+0x10a>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a5c      	ldr	r2, [pc, #368]	@ (8002fec <DMA_SetConfig+0x278>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d101      	bne.n	8002e82 <DMA_SetConfig+0x10e>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e000      	b.n	8002e84 <DMA_SetConfig+0x110>
 8002e82:	2300      	movs	r3, #0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00d      	beq.n	8002ea4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002e90:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d004      	beq.n	8002ea4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002ea2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a39      	ldr	r2, [pc, #228]	@ (8002f90 <DMA_SetConfig+0x21c>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d04a      	beq.n	8002f44 <DMA_SetConfig+0x1d0>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a38      	ldr	r2, [pc, #224]	@ (8002f94 <DMA_SetConfig+0x220>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d045      	beq.n	8002f44 <DMA_SetConfig+0x1d0>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a36      	ldr	r2, [pc, #216]	@ (8002f98 <DMA_SetConfig+0x224>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d040      	beq.n	8002f44 <DMA_SetConfig+0x1d0>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a35      	ldr	r2, [pc, #212]	@ (8002f9c <DMA_SetConfig+0x228>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d03b      	beq.n	8002f44 <DMA_SetConfig+0x1d0>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a33      	ldr	r2, [pc, #204]	@ (8002fa0 <DMA_SetConfig+0x22c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d036      	beq.n	8002f44 <DMA_SetConfig+0x1d0>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a32      	ldr	r2, [pc, #200]	@ (8002fa4 <DMA_SetConfig+0x230>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d031      	beq.n	8002f44 <DMA_SetConfig+0x1d0>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a30      	ldr	r2, [pc, #192]	@ (8002fa8 <DMA_SetConfig+0x234>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d02c      	beq.n	8002f44 <DMA_SetConfig+0x1d0>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a2f      	ldr	r2, [pc, #188]	@ (8002fac <DMA_SetConfig+0x238>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d027      	beq.n	8002f44 <DMA_SetConfig+0x1d0>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a2d      	ldr	r2, [pc, #180]	@ (8002fb0 <DMA_SetConfig+0x23c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d022      	beq.n	8002f44 <DMA_SetConfig+0x1d0>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a2c      	ldr	r2, [pc, #176]	@ (8002fb4 <DMA_SetConfig+0x240>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d01d      	beq.n	8002f44 <DMA_SetConfig+0x1d0>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a2a      	ldr	r2, [pc, #168]	@ (8002fb8 <DMA_SetConfig+0x244>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d018      	beq.n	8002f44 <DMA_SetConfig+0x1d0>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a29      	ldr	r2, [pc, #164]	@ (8002fbc <DMA_SetConfig+0x248>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d013      	beq.n	8002f44 <DMA_SetConfig+0x1d0>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a27      	ldr	r2, [pc, #156]	@ (8002fc0 <DMA_SetConfig+0x24c>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d00e      	beq.n	8002f44 <DMA_SetConfig+0x1d0>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a26      	ldr	r2, [pc, #152]	@ (8002fc4 <DMA_SetConfig+0x250>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d009      	beq.n	8002f44 <DMA_SetConfig+0x1d0>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a24      	ldr	r2, [pc, #144]	@ (8002fc8 <DMA_SetConfig+0x254>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d004      	beq.n	8002f44 <DMA_SetConfig+0x1d0>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a23      	ldr	r2, [pc, #140]	@ (8002fcc <DMA_SetConfig+0x258>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d101      	bne.n	8002f48 <DMA_SetConfig+0x1d4>
 8002f44:	2301      	movs	r3, #1
 8002f46:	e000      	b.n	8002f4a <DMA_SetConfig+0x1d6>
 8002f48:	2300      	movs	r3, #0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d059      	beq.n	8003002 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f52:	f003 031f 	and.w	r3, r3, #31
 8002f56:	223f      	movs	r2, #63	@ 0x3f
 8002f58:	409a      	lsls	r2, r3
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002f6c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	2b40      	cmp	r3, #64	@ 0x40
 8002f7c:	d138      	bne.n	8002ff0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002f8e:	e086      	b.n	800309e <DMA_SetConfig+0x32a>
 8002f90:	40020010 	.word	0x40020010
 8002f94:	40020028 	.word	0x40020028
 8002f98:	40020040 	.word	0x40020040
 8002f9c:	40020058 	.word	0x40020058
 8002fa0:	40020070 	.word	0x40020070
 8002fa4:	40020088 	.word	0x40020088
 8002fa8:	400200a0 	.word	0x400200a0
 8002fac:	400200b8 	.word	0x400200b8
 8002fb0:	40020410 	.word	0x40020410
 8002fb4:	40020428 	.word	0x40020428
 8002fb8:	40020440 	.word	0x40020440
 8002fbc:	40020458 	.word	0x40020458
 8002fc0:	40020470 	.word	0x40020470
 8002fc4:	40020488 	.word	0x40020488
 8002fc8:	400204a0 	.word	0x400204a0
 8002fcc:	400204b8 	.word	0x400204b8
 8002fd0:	58025408 	.word	0x58025408
 8002fd4:	5802541c 	.word	0x5802541c
 8002fd8:	58025430 	.word	0x58025430
 8002fdc:	58025444 	.word	0x58025444
 8002fe0:	58025458 	.word	0x58025458
 8002fe4:	5802546c 	.word	0x5802546c
 8002fe8:	58025480 	.word	0x58025480
 8002fec:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68ba      	ldr	r2, [r7, #8]
 8002ff6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	60da      	str	r2, [r3, #12]
}
 8003000:	e04d      	b.n	800309e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a29      	ldr	r2, [pc, #164]	@ (80030ac <DMA_SetConfig+0x338>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d022      	beq.n	8003052 <DMA_SetConfig+0x2de>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a27      	ldr	r2, [pc, #156]	@ (80030b0 <DMA_SetConfig+0x33c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d01d      	beq.n	8003052 <DMA_SetConfig+0x2de>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a26      	ldr	r2, [pc, #152]	@ (80030b4 <DMA_SetConfig+0x340>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d018      	beq.n	8003052 <DMA_SetConfig+0x2de>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a24      	ldr	r2, [pc, #144]	@ (80030b8 <DMA_SetConfig+0x344>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d013      	beq.n	8003052 <DMA_SetConfig+0x2de>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a23      	ldr	r2, [pc, #140]	@ (80030bc <DMA_SetConfig+0x348>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d00e      	beq.n	8003052 <DMA_SetConfig+0x2de>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a21      	ldr	r2, [pc, #132]	@ (80030c0 <DMA_SetConfig+0x34c>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d009      	beq.n	8003052 <DMA_SetConfig+0x2de>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a20      	ldr	r2, [pc, #128]	@ (80030c4 <DMA_SetConfig+0x350>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d004      	beq.n	8003052 <DMA_SetConfig+0x2de>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a1e      	ldr	r2, [pc, #120]	@ (80030c8 <DMA_SetConfig+0x354>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d101      	bne.n	8003056 <DMA_SetConfig+0x2e2>
 8003052:	2301      	movs	r3, #1
 8003054:	e000      	b.n	8003058 <DMA_SetConfig+0x2e4>
 8003056:	2300      	movs	r3, #0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d020      	beq.n	800309e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003060:	f003 031f 	and.w	r3, r3, #31
 8003064:	2201      	movs	r2, #1
 8003066:	409a      	lsls	r2, r3
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	2b40      	cmp	r3, #64	@ 0x40
 800307a:	d108      	bne.n	800308e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	60da      	str	r2, [r3, #12]
}
 800308c:	e007      	b.n	800309e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	60da      	str	r2, [r3, #12]
}
 800309e:	bf00      	nop
 80030a0:	371c      	adds	r7, #28
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	58025408 	.word	0x58025408
 80030b0:	5802541c 	.word	0x5802541c
 80030b4:	58025430 	.word	0x58025430
 80030b8:	58025444 	.word	0x58025444
 80030bc:	58025458 	.word	0x58025458
 80030c0:	5802546c 	.word	0x5802546c
 80030c4:	58025480 	.word	0x58025480
 80030c8:	58025494 	.word	0x58025494

080030cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a42      	ldr	r2, [pc, #264]	@ (80031e4 <DMA_CalcBaseAndBitshift+0x118>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d04a      	beq.n	8003174 <DMA_CalcBaseAndBitshift+0xa8>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a41      	ldr	r2, [pc, #260]	@ (80031e8 <DMA_CalcBaseAndBitshift+0x11c>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d045      	beq.n	8003174 <DMA_CalcBaseAndBitshift+0xa8>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a3f      	ldr	r2, [pc, #252]	@ (80031ec <DMA_CalcBaseAndBitshift+0x120>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d040      	beq.n	8003174 <DMA_CalcBaseAndBitshift+0xa8>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a3e      	ldr	r2, [pc, #248]	@ (80031f0 <DMA_CalcBaseAndBitshift+0x124>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d03b      	beq.n	8003174 <DMA_CalcBaseAndBitshift+0xa8>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a3c      	ldr	r2, [pc, #240]	@ (80031f4 <DMA_CalcBaseAndBitshift+0x128>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d036      	beq.n	8003174 <DMA_CalcBaseAndBitshift+0xa8>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a3b      	ldr	r2, [pc, #236]	@ (80031f8 <DMA_CalcBaseAndBitshift+0x12c>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d031      	beq.n	8003174 <DMA_CalcBaseAndBitshift+0xa8>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a39      	ldr	r2, [pc, #228]	@ (80031fc <DMA_CalcBaseAndBitshift+0x130>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d02c      	beq.n	8003174 <DMA_CalcBaseAndBitshift+0xa8>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a38      	ldr	r2, [pc, #224]	@ (8003200 <DMA_CalcBaseAndBitshift+0x134>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d027      	beq.n	8003174 <DMA_CalcBaseAndBitshift+0xa8>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a36      	ldr	r2, [pc, #216]	@ (8003204 <DMA_CalcBaseAndBitshift+0x138>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d022      	beq.n	8003174 <DMA_CalcBaseAndBitshift+0xa8>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a35      	ldr	r2, [pc, #212]	@ (8003208 <DMA_CalcBaseAndBitshift+0x13c>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d01d      	beq.n	8003174 <DMA_CalcBaseAndBitshift+0xa8>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a33      	ldr	r2, [pc, #204]	@ (800320c <DMA_CalcBaseAndBitshift+0x140>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d018      	beq.n	8003174 <DMA_CalcBaseAndBitshift+0xa8>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a32      	ldr	r2, [pc, #200]	@ (8003210 <DMA_CalcBaseAndBitshift+0x144>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d013      	beq.n	8003174 <DMA_CalcBaseAndBitshift+0xa8>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a30      	ldr	r2, [pc, #192]	@ (8003214 <DMA_CalcBaseAndBitshift+0x148>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d00e      	beq.n	8003174 <DMA_CalcBaseAndBitshift+0xa8>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a2f      	ldr	r2, [pc, #188]	@ (8003218 <DMA_CalcBaseAndBitshift+0x14c>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d009      	beq.n	8003174 <DMA_CalcBaseAndBitshift+0xa8>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a2d      	ldr	r2, [pc, #180]	@ (800321c <DMA_CalcBaseAndBitshift+0x150>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d004      	beq.n	8003174 <DMA_CalcBaseAndBitshift+0xa8>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a2c      	ldr	r2, [pc, #176]	@ (8003220 <DMA_CalcBaseAndBitshift+0x154>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d101      	bne.n	8003178 <DMA_CalcBaseAndBitshift+0xac>
 8003174:	2301      	movs	r3, #1
 8003176:	e000      	b.n	800317a <DMA_CalcBaseAndBitshift+0xae>
 8003178:	2300      	movs	r3, #0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d024      	beq.n	80031c8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	b2db      	uxtb	r3, r3
 8003184:	3b10      	subs	r3, #16
 8003186:	4a27      	ldr	r2, [pc, #156]	@ (8003224 <DMA_CalcBaseAndBitshift+0x158>)
 8003188:	fba2 2303 	umull	r2, r3, r2, r3
 800318c:	091b      	lsrs	r3, r3, #4
 800318e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	4a24      	ldr	r2, [pc, #144]	@ (8003228 <DMA_CalcBaseAndBitshift+0x15c>)
 8003198:	5cd3      	ldrb	r3, [r2, r3]
 800319a:	461a      	mov	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2b03      	cmp	r3, #3
 80031a4:	d908      	bls.n	80031b8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	461a      	mov	r2, r3
 80031ac:	4b1f      	ldr	r3, [pc, #124]	@ (800322c <DMA_CalcBaseAndBitshift+0x160>)
 80031ae:	4013      	ands	r3, r2
 80031b0:	1d1a      	adds	r2, r3, #4
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	659a      	str	r2, [r3, #88]	@ 0x58
 80031b6:	e00d      	b.n	80031d4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	461a      	mov	r2, r3
 80031be:	4b1b      	ldr	r3, [pc, #108]	@ (800322c <DMA_CalcBaseAndBitshift+0x160>)
 80031c0:	4013      	ands	r3, r2
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80031c6:	e005      	b.n	80031d4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	40020010 	.word	0x40020010
 80031e8:	40020028 	.word	0x40020028
 80031ec:	40020040 	.word	0x40020040
 80031f0:	40020058 	.word	0x40020058
 80031f4:	40020070 	.word	0x40020070
 80031f8:	40020088 	.word	0x40020088
 80031fc:	400200a0 	.word	0x400200a0
 8003200:	400200b8 	.word	0x400200b8
 8003204:	40020410 	.word	0x40020410
 8003208:	40020428 	.word	0x40020428
 800320c:	40020440 	.word	0x40020440
 8003210:	40020458 	.word	0x40020458
 8003214:	40020470 	.word	0x40020470
 8003218:	40020488 	.word	0x40020488
 800321c:	400204a0 	.word	0x400204a0
 8003220:	400204b8 	.word	0x400204b8
 8003224:	aaaaaaab 	.word	0xaaaaaaab
 8003228:	080087f0 	.word	0x080087f0
 800322c:	fffffc00 	.word	0xfffffc00

08003230 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003238:	2300      	movs	r3, #0
 800323a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d120      	bne.n	8003286 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003248:	2b03      	cmp	r3, #3
 800324a:	d858      	bhi.n	80032fe <DMA_CheckFifoParam+0xce>
 800324c:	a201      	add	r2, pc, #4	@ (adr r2, 8003254 <DMA_CheckFifoParam+0x24>)
 800324e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003252:	bf00      	nop
 8003254:	08003265 	.word	0x08003265
 8003258:	08003277 	.word	0x08003277
 800325c:	08003265 	.word	0x08003265
 8003260:	080032ff 	.word	0x080032ff
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003268:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d048      	beq.n	8003302 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003274:	e045      	b.n	8003302 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800327e:	d142      	bne.n	8003306 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003284:	e03f      	b.n	8003306 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800328e:	d123      	bne.n	80032d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003294:	2b03      	cmp	r3, #3
 8003296:	d838      	bhi.n	800330a <DMA_CheckFifoParam+0xda>
 8003298:	a201      	add	r2, pc, #4	@ (adr r2, 80032a0 <DMA_CheckFifoParam+0x70>)
 800329a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329e:	bf00      	nop
 80032a0:	080032b1 	.word	0x080032b1
 80032a4:	080032b7 	.word	0x080032b7
 80032a8:	080032b1 	.word	0x080032b1
 80032ac:	080032c9 	.word	0x080032c9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	73fb      	strb	r3, [r7, #15]
        break;
 80032b4:	e030      	b.n	8003318 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d025      	beq.n	800330e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80032c6:	e022      	b.n	800330e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80032d0:	d11f      	bne.n	8003312 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80032d6:	e01c      	b.n	8003312 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d902      	bls.n	80032e6 <DMA_CheckFifoParam+0xb6>
 80032e0:	2b03      	cmp	r3, #3
 80032e2:	d003      	beq.n	80032ec <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80032e4:	e018      	b.n	8003318 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	73fb      	strb	r3, [r7, #15]
        break;
 80032ea:	e015      	b.n	8003318 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00e      	beq.n	8003316 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	73fb      	strb	r3, [r7, #15]
    break;
 80032fc:	e00b      	b.n	8003316 <DMA_CheckFifoParam+0xe6>
        break;
 80032fe:	bf00      	nop
 8003300:	e00a      	b.n	8003318 <DMA_CheckFifoParam+0xe8>
        break;
 8003302:	bf00      	nop
 8003304:	e008      	b.n	8003318 <DMA_CheckFifoParam+0xe8>
        break;
 8003306:	bf00      	nop
 8003308:	e006      	b.n	8003318 <DMA_CheckFifoParam+0xe8>
        break;
 800330a:	bf00      	nop
 800330c:	e004      	b.n	8003318 <DMA_CheckFifoParam+0xe8>
        break;
 800330e:	bf00      	nop
 8003310:	e002      	b.n	8003318 <DMA_CheckFifoParam+0xe8>
        break;
 8003312:	bf00      	nop
 8003314:	e000      	b.n	8003318 <DMA_CheckFifoParam+0xe8>
    break;
 8003316:	bf00      	nop
    }
  }

  return status;
 8003318:	7bfb      	ldrb	r3, [r7, #15]
}
 800331a:	4618      	mov	r0, r3
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop

08003328 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a38      	ldr	r2, [pc, #224]	@ (800341c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d022      	beq.n	8003386 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a36      	ldr	r2, [pc, #216]	@ (8003420 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d01d      	beq.n	8003386 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a35      	ldr	r2, [pc, #212]	@ (8003424 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d018      	beq.n	8003386 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a33      	ldr	r2, [pc, #204]	@ (8003428 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d013      	beq.n	8003386 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a32      	ldr	r2, [pc, #200]	@ (800342c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d00e      	beq.n	8003386 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a30      	ldr	r2, [pc, #192]	@ (8003430 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d009      	beq.n	8003386 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a2f      	ldr	r2, [pc, #188]	@ (8003434 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d004      	beq.n	8003386 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a2d      	ldr	r2, [pc, #180]	@ (8003438 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d101      	bne.n	800338a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003386:	2301      	movs	r3, #1
 8003388:	e000      	b.n	800338c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800338a:	2300      	movs	r3, #0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d01a      	beq.n	80033c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	b2db      	uxtb	r3, r3
 8003396:	3b08      	subs	r3, #8
 8003398:	4a28      	ldr	r2, [pc, #160]	@ (800343c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800339a:	fba2 2303 	umull	r2, r3, r2, r3
 800339e:	091b      	lsrs	r3, r3, #4
 80033a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	4b26      	ldr	r3, [pc, #152]	@ (8003440 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80033a6:	4413      	add	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	461a      	mov	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a24      	ldr	r2, [pc, #144]	@ (8003444 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80033b4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f003 031f 	and.w	r3, r3, #31
 80033bc:	2201      	movs	r2, #1
 80033be:	409a      	lsls	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80033c4:	e024      	b.n	8003410 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	3b10      	subs	r3, #16
 80033ce:	4a1e      	ldr	r2, [pc, #120]	@ (8003448 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80033d0:	fba2 2303 	umull	r2, r3, r2, r3
 80033d4:	091b      	lsrs	r3, r3, #4
 80033d6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	4a1c      	ldr	r2, [pc, #112]	@ (800344c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d806      	bhi.n	80033ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	4a1b      	ldr	r2, [pc, #108]	@ (8003450 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d902      	bls.n	80033ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	3308      	adds	r3, #8
 80033ec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	4b18      	ldr	r3, [pc, #96]	@ (8003454 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80033f2:	4413      	add	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	461a      	mov	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a16      	ldr	r2, [pc, #88]	@ (8003458 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003400:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f003 031f 	and.w	r3, r3, #31
 8003408:	2201      	movs	r2, #1
 800340a:	409a      	lsls	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003410:	bf00      	nop
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	58025408 	.word	0x58025408
 8003420:	5802541c 	.word	0x5802541c
 8003424:	58025430 	.word	0x58025430
 8003428:	58025444 	.word	0x58025444
 800342c:	58025458 	.word	0x58025458
 8003430:	5802546c 	.word	0x5802546c
 8003434:	58025480 	.word	0x58025480
 8003438:	58025494 	.word	0x58025494
 800343c:	cccccccd 	.word	0xcccccccd
 8003440:	16009600 	.word	0x16009600
 8003444:	58025880 	.word	0x58025880
 8003448:	aaaaaaab 	.word	0xaaaaaaab
 800344c:	400204b8 	.word	0x400204b8
 8003450:	4002040f 	.word	0x4002040f
 8003454:	10008200 	.word	0x10008200
 8003458:	40020880 	.word	0x40020880

0800345c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	b2db      	uxtb	r3, r3
 800346a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d04a      	beq.n	8003508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2b08      	cmp	r3, #8
 8003476:	d847      	bhi.n	8003508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a25      	ldr	r2, [pc, #148]	@ (8003514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d022      	beq.n	80034c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a24      	ldr	r2, [pc, #144]	@ (8003518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d01d      	beq.n	80034c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a22      	ldr	r2, [pc, #136]	@ (800351c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d018      	beq.n	80034c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a21      	ldr	r2, [pc, #132]	@ (8003520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d013      	beq.n	80034c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a1f      	ldr	r2, [pc, #124]	@ (8003524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d00e      	beq.n	80034c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a1e      	ldr	r2, [pc, #120]	@ (8003528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d009      	beq.n	80034c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a1c      	ldr	r2, [pc, #112]	@ (800352c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d004      	beq.n	80034c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a1b      	ldr	r2, [pc, #108]	@ (8003530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d101      	bne.n	80034cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80034c8:	2301      	movs	r3, #1
 80034ca:	e000      	b.n	80034ce <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80034cc:	2300      	movs	r3, #0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00a      	beq.n	80034e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	4b17      	ldr	r3, [pc, #92]	@ (8003534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80034d6:	4413      	add	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	461a      	mov	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a15      	ldr	r2, [pc, #84]	@ (8003538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80034e4:	671a      	str	r2, [r3, #112]	@ 0x70
 80034e6:	e009      	b.n	80034fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	4b14      	ldr	r3, [pc, #80]	@ (800353c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80034ec:	4413      	add	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	461a      	mov	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a11      	ldr	r2, [pc, #68]	@ (8003540 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80034fa:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	3b01      	subs	r3, #1
 8003500:	2201      	movs	r2, #1
 8003502:	409a      	lsls	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8003508:	bf00      	nop
 800350a:	3714      	adds	r7, #20
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	58025408 	.word	0x58025408
 8003518:	5802541c 	.word	0x5802541c
 800351c:	58025430 	.word	0x58025430
 8003520:	58025444 	.word	0x58025444
 8003524:	58025458 	.word	0x58025458
 8003528:	5802546c 	.word	0x5802546c
 800352c:	58025480 	.word	0x58025480
 8003530:	58025494 	.word	0x58025494
 8003534:	1600963f 	.word	0x1600963f
 8003538:	58025940 	.word	0x58025940
 800353c:	1000823f 	.word	0x1000823f
 8003540:	40020940 	.word	0x40020940

08003544 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003544:	b480      	push	{r7}
 8003546:	b089      	sub	sp, #36	@ 0x24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800354e:	2300      	movs	r3, #0
 8003550:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003552:	4b86      	ldr	r3, [pc, #536]	@ (800376c <HAL_GPIO_Init+0x228>)
 8003554:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003556:	e18c      	b.n	8003872 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	2101      	movs	r1, #1
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	fa01 f303 	lsl.w	r3, r1, r3
 8003564:	4013      	ands	r3, r2
 8003566:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 817e 	beq.w	800386c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f003 0303 	and.w	r3, r3, #3
 8003578:	2b01      	cmp	r3, #1
 800357a:	d005      	beq.n	8003588 <HAL_GPIO_Init+0x44>
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f003 0303 	and.w	r3, r3, #3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d130      	bne.n	80035ea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	2203      	movs	r2, #3
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	43db      	mvns	r3, r3
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4013      	ands	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	68da      	ldr	r2, [r3, #12]
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035be:	2201      	movs	r2, #1
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	43db      	mvns	r3, r3
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	4013      	ands	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	091b      	lsrs	r3, r3, #4
 80035d4:	f003 0201 	and.w	r2, r3, #1
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	2b03      	cmp	r3, #3
 80035f4:	d017      	beq.n	8003626 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	2203      	movs	r2, #3
 8003602:	fa02 f303 	lsl.w	r3, r2, r3
 8003606:	43db      	mvns	r3, r3
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	4013      	ands	r3, r2
 800360c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	689a      	ldr	r2, [r3, #8]
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	4313      	orrs	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d123      	bne.n	800367a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	08da      	lsrs	r2, r3, #3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3208      	adds	r2, #8
 800363a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800363e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	220f      	movs	r2, #15
 800364a:	fa02 f303 	lsl.w	r3, r2, r3
 800364e:	43db      	mvns	r3, r3
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	4013      	ands	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	691a      	ldr	r2, [r3, #16]
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	4313      	orrs	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	08da      	lsrs	r2, r3, #3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3208      	adds	r2, #8
 8003674:	69b9      	ldr	r1, [r7, #24]
 8003676:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	2203      	movs	r2, #3
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	43db      	mvns	r3, r3
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	4013      	ands	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f003 0203 	and.w	r2, r3, #3
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 80d8 	beq.w	800386c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036bc:	4b2c      	ldr	r3, [pc, #176]	@ (8003770 <HAL_GPIO_Init+0x22c>)
 80036be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80036c2:	4a2b      	ldr	r2, [pc, #172]	@ (8003770 <HAL_GPIO_Init+0x22c>)
 80036c4:	f043 0302 	orr.w	r3, r3, #2
 80036c8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80036cc:	4b28      	ldr	r3, [pc, #160]	@ (8003770 <HAL_GPIO_Init+0x22c>)
 80036ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036da:	4a26      	ldr	r2, [pc, #152]	@ (8003774 <HAL_GPIO_Init+0x230>)
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	089b      	lsrs	r3, r3, #2
 80036e0:	3302      	adds	r3, #2
 80036e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	220f      	movs	r2, #15
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	43db      	mvns	r3, r3
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	4013      	ands	r3, r2
 80036fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a1d      	ldr	r2, [pc, #116]	@ (8003778 <HAL_GPIO_Init+0x234>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d04a      	beq.n	800379c <HAL_GPIO_Init+0x258>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a1c      	ldr	r2, [pc, #112]	@ (800377c <HAL_GPIO_Init+0x238>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d02b      	beq.n	8003766 <HAL_GPIO_Init+0x222>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a1b      	ldr	r2, [pc, #108]	@ (8003780 <HAL_GPIO_Init+0x23c>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d025      	beq.n	8003762 <HAL_GPIO_Init+0x21e>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a1a      	ldr	r2, [pc, #104]	@ (8003784 <HAL_GPIO_Init+0x240>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d01f      	beq.n	800375e <HAL_GPIO_Init+0x21a>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a19      	ldr	r2, [pc, #100]	@ (8003788 <HAL_GPIO_Init+0x244>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d019      	beq.n	800375a <HAL_GPIO_Init+0x216>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a18      	ldr	r2, [pc, #96]	@ (800378c <HAL_GPIO_Init+0x248>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d013      	beq.n	8003756 <HAL_GPIO_Init+0x212>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a17      	ldr	r2, [pc, #92]	@ (8003790 <HAL_GPIO_Init+0x24c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d00d      	beq.n	8003752 <HAL_GPIO_Init+0x20e>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a16      	ldr	r2, [pc, #88]	@ (8003794 <HAL_GPIO_Init+0x250>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d007      	beq.n	800374e <HAL_GPIO_Init+0x20a>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a15      	ldr	r2, [pc, #84]	@ (8003798 <HAL_GPIO_Init+0x254>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d101      	bne.n	800374a <HAL_GPIO_Init+0x206>
 8003746:	2309      	movs	r3, #9
 8003748:	e029      	b.n	800379e <HAL_GPIO_Init+0x25a>
 800374a:	230a      	movs	r3, #10
 800374c:	e027      	b.n	800379e <HAL_GPIO_Init+0x25a>
 800374e:	2307      	movs	r3, #7
 8003750:	e025      	b.n	800379e <HAL_GPIO_Init+0x25a>
 8003752:	2306      	movs	r3, #6
 8003754:	e023      	b.n	800379e <HAL_GPIO_Init+0x25a>
 8003756:	2305      	movs	r3, #5
 8003758:	e021      	b.n	800379e <HAL_GPIO_Init+0x25a>
 800375a:	2304      	movs	r3, #4
 800375c:	e01f      	b.n	800379e <HAL_GPIO_Init+0x25a>
 800375e:	2303      	movs	r3, #3
 8003760:	e01d      	b.n	800379e <HAL_GPIO_Init+0x25a>
 8003762:	2302      	movs	r3, #2
 8003764:	e01b      	b.n	800379e <HAL_GPIO_Init+0x25a>
 8003766:	2301      	movs	r3, #1
 8003768:	e019      	b.n	800379e <HAL_GPIO_Init+0x25a>
 800376a:	bf00      	nop
 800376c:	58000080 	.word	0x58000080
 8003770:	58024400 	.word	0x58024400
 8003774:	58000400 	.word	0x58000400
 8003778:	58020000 	.word	0x58020000
 800377c:	58020400 	.word	0x58020400
 8003780:	58020800 	.word	0x58020800
 8003784:	58020c00 	.word	0x58020c00
 8003788:	58021000 	.word	0x58021000
 800378c:	58021400 	.word	0x58021400
 8003790:	58021800 	.word	0x58021800
 8003794:	58021c00 	.word	0x58021c00
 8003798:	58022400 	.word	0x58022400
 800379c:	2300      	movs	r3, #0
 800379e:	69fa      	ldr	r2, [r7, #28]
 80037a0:	f002 0203 	and.w	r2, r2, #3
 80037a4:	0092      	lsls	r2, r2, #2
 80037a6:	4093      	lsls	r3, r2
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037ae:	4938      	ldr	r1, [pc, #224]	@ (8003890 <HAL_GPIO_Init+0x34c>)
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	089b      	lsrs	r3, r3, #2
 80037b4:	3302      	adds	r3, #2
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	43db      	mvns	r3, r3
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	4013      	ands	r3, r2
 80037cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	4313      	orrs	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80037e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80037ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	43db      	mvns	r3, r3
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4013      	ands	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	4313      	orrs	r3, r2
 800380e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003810:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	43db      	mvns	r3, r3
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	4013      	ands	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d003      	beq.n	800383c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	4313      	orrs	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	43db      	mvns	r3, r3
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4013      	ands	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	4313      	orrs	r3, r2
 8003864:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	3301      	adds	r3, #1
 8003870:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	fa22 f303 	lsr.w	r3, r2, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	f47f ae6b 	bne.w	8003558 <HAL_GPIO_Init+0x14>
  }
}
 8003882:	bf00      	nop
 8003884:	bf00      	nop
 8003886:	3724      	adds	r7, #36	@ 0x24
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	58000400 	.word	0x58000400

08003894 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	460b      	mov	r3, r1
 800389e:	807b      	strh	r3, [r7, #2]
 80038a0:	4613      	mov	r3, r2
 80038a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038a4:	787b      	ldrb	r3, [r7, #1]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038aa:	887a      	ldrh	r2, [r7, #2]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80038b0:	e003      	b.n	80038ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80038b2:	887b      	ldrh	r3, [r7, #2]
 80038b4:	041a      	lsls	r2, r3, #16
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	619a      	str	r2, [r3, #24]
}
 80038ba:	bf00      	nop
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
	...

080038c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e08b      	b.n	80039f2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d106      	bne.n	80038f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7fc fef8 	bl	80006e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2224      	movs	r2, #36	@ 0x24
 80038f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0201 	bic.w	r2, r2, #1
 800390a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003918:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003928:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d107      	bne.n	8003942 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689a      	ldr	r2, [r3, #8]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800393e:	609a      	str	r2, [r3, #8]
 8003940:	e006      	b.n	8003950 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689a      	ldr	r2, [r3, #8]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800394e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	2b02      	cmp	r3, #2
 8003956:	d108      	bne.n	800396a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003966:	605a      	str	r2, [r3, #4]
 8003968:	e007      	b.n	800397a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003978:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6859      	ldr	r1, [r3, #4]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	4b1d      	ldr	r3, [pc, #116]	@ (80039fc <HAL_I2C_Init+0x134>)
 8003986:	430b      	orrs	r3, r1
 8003988:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68da      	ldr	r2, [r3, #12]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003998:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691a      	ldr	r2, [r3, #16]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	430a      	orrs	r2, r1
 80039b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	69d9      	ldr	r1, [r3, #28]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a1a      	ldr	r2, [r3, #32]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f042 0201 	orr.w	r2, r2, #1
 80039d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2220      	movs	r2, #32
 80039de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	02008000 	.word	0x02008000

08003a00 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b20      	cmp	r3, #32
 8003a14:	d138      	bne.n	8003a88 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d101      	bne.n	8003a24 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a20:	2302      	movs	r3, #2
 8003a22:	e032      	b.n	8003a8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2224      	movs	r2, #36	@ 0x24
 8003a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0201 	bic.w	r2, r2, #1
 8003a42:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003a52:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6819      	ldr	r1, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 0201 	orr.w	r2, r2, #1
 8003a72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2220      	movs	r2, #32
 8003a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a84:	2300      	movs	r3, #0
 8003a86:	e000      	b.n	8003a8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a88:	2302      	movs	r3, #2
  }
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b085      	sub	sp, #20
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b20      	cmp	r3, #32
 8003aaa:	d139      	bne.n	8003b20 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d101      	bne.n	8003aba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	e033      	b.n	8003b22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2224      	movs	r2, #36	@ 0x24
 8003ac6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0201 	bic.w	r2, r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003ae8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	021b      	lsls	r3, r3, #8
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0201 	orr.w	r2, r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	e000      	b.n	8003b22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b20:	2302      	movs	r3, #2
  }
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
	...

08003b30 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b088      	sub	sp, #32
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e11a      	b.n	8003d78 <HAL_I2S_Init+0x248>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d106      	bne.n	8003b5c <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7fc fe5e 	bl	8000818 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2202      	movs	r2, #2
 8003b60:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d107      	bne.n	8003b82 <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0201 	bic.w	r2, r2, #1
 8003b80:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2200      	movs	r2, #0
 8003b88:	651a      	str	r2, [r3, #80]	@ 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d008      	beq.n	8003ba4 <HAL_I2S_Init+0x74>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2b06      	cmp	r3, #6
 8003b98:	d004      	beq.n	8003ba4 <HAL_I2S_Init+0x74>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	2b0a      	cmp	r3, #10
 8003ba0:	f040 8094 	bne.w	8003ccc <HAL_I2S_Init+0x19c>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d067      	beq.n	8003c7c <HAL_I2S_Init+0x14c>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d002      	beq.n	8003bba <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	617b      	str	r3, [r7, #20]
 8003bb8:	e001      	b.n	8003bbe <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	2b30      	cmp	r3, #48	@ 0x30
 8003bc4:	d003      	beq.n	8003bce <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8003bca:	2bb0      	cmp	r3, #176	@ 0xb0
 8003bcc:	d102      	bne.n	8003bd4 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	60bb      	str	r3, [r7, #8]
 8003bd2:	e001      	b.n	8003bd8 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	60bb      	str	r3, [r7, #8]
      }

      /* Get the source clock value: based on System Clock value */
#if defined (SPI_SPI6I2S_SUPPORT)
      if (hi2s->Instance == SPI6)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a68      	ldr	r2, [pc, #416]	@ (8003d80 <HAL_I2S_Init+0x250>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d107      	bne.n	8003bf2 <HAL_I2S_Init+0xc2>
      {
        /* SPI6 source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI6);
 8003be2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003be6:	f04f 0100 	mov.w	r1, #0
 8003bea:	f002 fb07 	bl	80061fc <HAL_RCCEx_GetPeriphCLKFreq>
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	e006      	b.n	8003c00 <HAL_I2S_Init+0xd0>
      }
      else
      {
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8003bf2:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003bf6:	f04f 0100 	mov.w	r1, #0
 8003bfa:	f002 faff 	bl	80061fc <HAL_RCCEx_GetPeriphCLKFreq>
 8003bfe:	60f8      	str	r0, [r7, #12]
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c08:	d113      	bne.n	8003c32 <HAL_I2S_Init+0x102>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8003c0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	fa22 f303 	lsr.w	r3, r2, r3
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4413      	add	r3, r2
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	461a      	mov	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c2c:	3305      	adds	r3, #5
 8003c2e:	613b      	str	r3, [r7, #16]
 8003c30:	e014      	b.n	8003c5c <HAL_I2S_Init+0x12c>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8003c32:	2220      	movs	r2, #32
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	fa22 f303 	lsr.w	r3, r2, r3
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	fb02 f303 	mul.w	r3, r2, r3
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c46:	4613      	mov	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4413      	add	r3, r2
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	461a      	mov	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c58:	3305      	adds	r3, #5
 8003c5a:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	4a49      	ldr	r2, [pc, #292]	@ (8003d84 <HAL_I2S_Init+0x254>)
 8003c60:	fba2 2303 	umull	r2, r3, r2, r3
 8003c64:	08db      	lsrs	r3, r3, #3
 8003c66:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	085b      	lsrs	r3, r3, #1
 8003c78:	61fb      	str	r3, [r7, #28]
 8003c7a:	e003      	b.n	8003c84 <HAL_I2S_Init+0x154>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8003c80:	2300      	movs	r3, #0
 8003c82:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d102      	bne.n	8003c90 <HAL_I2S_Init+0x160>
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d002      	beq.n	8003c96 <HAL_I2S_Init+0x166>
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	2bff      	cmp	r3, #255	@ 0xff
 8003c94:	d907      	bls.n	8003ca6 <HAL_I2S_Init+0x176>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c9a:	f043 0210 	orr.w	r2, r3, #16
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	651a      	str	r2, [r3, #80]	@ 0x50
      return  HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e068      	b.n	8003d78 <HAL_I2S_Init+0x248>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d101      	bne.n	8003cb0 <HAL_I2S_Init+0x180>
    {
      i2sodd = 1UL;
 8003cac:	2301      	movs	r3, #1
 8003cae:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003cb6:	4b34      	ldr	r3, [pc, #208]	@ (8003d88 <HAL_I2S_Init+0x258>)
 8003cb8:	4013      	ands	r3, r2
 8003cba:	69fa      	ldr	r2, [r7, #28]
 8003cbc:	0411      	lsls	r1, r2, #16
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	0612      	lsls	r2, r2, #24
 8003cc2:	4311      	orrs	r1, r2
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6812      	ldr	r2, [r2, #0]
 8003cc8:	430b      	orrs	r3, r1
 8003cca:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003cd2:	4b2e      	ldr	r3, [pc, #184]	@ (8003d8c <HAL_I2S_Init+0x25c>)
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6851      	ldr	r1, [r2, #4]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6892      	ldr	r2, [r2, #8]
 8003cde:	4311      	orrs	r1, r2
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	68d2      	ldr	r2, [r2, #12]
 8003ce4:	4311      	orrs	r1, r2
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6992      	ldr	r2, [r2, #24]
 8003cea:	4311      	orrs	r1, r2
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6a12      	ldr	r2, [r2, #32]
 8003cf0:	4311      	orrs	r1, r2
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003cf6:	4311      	orrs	r1, r2
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	6912      	ldr	r2, [r2, #16]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f042 0201 	orr.w	r2, r2, #1
 8003d08:	651a      	str	r2, [r3, #80]	@ 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f640 72f8 	movw	r2, #4088	@ 0xff8
 8003d12:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003d22:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	f423 0100 	bic.w	r1, r3, #8388608	@ 0x800000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	69da      	ldr	r2, [r3, #28]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d007      	beq.n	8003d52 <HAL_I2S_Init+0x222>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2b06      	cmp	r3, #6
 8003d48:	d003      	beq.n	8003d52 <HAL_I2S_Init+0x222>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	2b0a      	cmp	r3, #10
 8003d50:	d10a      	bne.n	8003d68 <HAL_I2S_Init+0x238>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	430a      	orrs	r2, r1
 8003d66:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3720      	adds	r7, #32
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	58001400 	.word	0x58001400
 8003d84:	cccccccd 	.word	0xcccccccd
 8003d88:	fe00ffff 	.word	0xfe00ffff
 8003d8c:	fdff9040 	.word	0xfdff9040

08003d90 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, const uint16_t *pData, uint16_t Size)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	75fb      	strb	r3, [r7, #23]

  if ((pData == NULL) || (Size == 0UL))
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d002      	beq.n	8003dae <HAL_I2S_Transmit_DMA+0x1e>
 8003da8:	88fb      	ldrh	r3, [r7, #6]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_I2S_Transmit_DMA+0x22>
  {
    return  HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e086      	b.n	8003ec0 <HAL_I2S_Transmit_DMA+0x130>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d001      	beq.n	8003dc2 <HAL_I2S_Transmit_DMA+0x32>
  {
    return HAL_BUSY;
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	e07e      	b.n	8003ec0 <HAL_I2S_Transmit_DMA+0x130>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d101      	bne.n	8003dd2 <HAL_I2S_Transmit_DMA+0x42>
 8003dce:	2302      	movs	r3, #2
 8003dd0:	e076      	b.n	8003ec0 <HAL_I2S_Transmit_DMA+0x130>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Set state and reset error code */
  hi2s->State       = HAL_I2S_STATE_BUSY_TX;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2203      	movs	r2, #3
 8003dde:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->pTxBuffPtr  = (const uint16_t *)pData;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->TxXferSize  = Size;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	88fa      	ldrh	r2, [r7, #6]
 8003df2:	861a      	strh	r2, [r3, #48]	@ 0x30
  hi2s->TxXferCount = Size;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	88fa      	ldrh	r2, [r7, #6]
 8003df8:	865a      	strh	r2, [r3, #50]	@ 0x32

  /* Init field not used in handle to zero */
  hi2s->pRxBuffPtr  = NULL;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2s->RxXferSize  = (uint16_t)0UL;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	871a      	strh	r2, [r3, #56]	@ 0x38
  hi2s->RxXferCount = (uint16_t)0UL;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e10:	4a2d      	ldr	r2, [pc, #180]	@ (8003ec8 <HAL_I2S_Transmit_DMA+0x138>)
 8003e12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e18:	4a2c      	ldr	r2, [pc, #176]	@ (8003ecc <HAL_I2S_Transmit_DMA+0x13c>)
 8003e1a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e20:	4a2b      	ldr	r2, [pc, #172]	@ (8003ed0 <HAL_I2S_Transmit_DMA+0x140>)
 8003e22:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	3320      	adds	r3, #32
 8003e34:	461a      	mov	r2, r3
                                 hi2s->TxXferCount))
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003e3a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 8003e3c:	f7fd fe06 	bl	8001a4c <HAL_DMA_Start_IT>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d011      	beq.n	8003e6a <HAL_I2S_Transmit_DMA+0xda>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e4a:	f043 0208 	orr.w	r2, r3, #8
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	651a      	str	r2, [r3, #80]	@ 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    __HAL_UNLOCK(hi2s);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    errorcode = HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8003e66:	7dfb      	ldrb	r3, [r7, #23]
 8003e68:	e02a      	b.n	8003ec0 <HAL_I2S_Transmit_DMA+0x130>
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d107      	bne.n	8003e88 <HAL_I2S_Transmit_DMA+0xf8>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e86:	609a      	str	r2, [r3, #8]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d107      	bne.n	8003ea6 <HAL_I2S_Transmit_DMA+0x116>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f042 0201 	orr.w	r2, r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eb4:	601a      	str	r2, [r3, #0]

  __HAL_UNLOCK(hi2s);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  return errorcode;
 8003ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3718      	adds	r7, #24
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	08003f3f 	.word	0x08003f3f
 8003ecc:	08003efd 	.word	0x08003efd
 8003ed0:	08003f5b 	.word	0x08003f5b

08003ed4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f08:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10e      	bne.n	8003f30 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f20:	609a      	str	r2, [r3, #8]

    hi2s->TxXferCount = (uint16_t) 0UL;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f7ff ffcf 	bl	8003ed4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003f36:	bf00      	nop
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b084      	sub	sp, #16
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f4a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f7fc fdf9 	bl	8000b44 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003f52:	bf00      	nop
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b084      	sub	sp, #16
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689a      	ldr	r2, [r3, #8]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8003f76:	609a      	str	r2, [r3, #8]
  hi2s->TxXferCount = (uint16_t) 0UL;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	865a      	strh	r2, [r3, #50]	@ 0x32
  hi2s->RxXferCount = (uint16_t) 0UL;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	875a      	strh	r2, [r3, #58]	@ 0x3a

  hi2s->State = HAL_I2S_STATE_READY;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f90:	f043 0208 	orr.w	r2, r3, #8
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f7ff ffa5 	bl	8003ee8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003f9e:	bf00      	nop
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
	...

08003fa8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003fb0:	4b19      	ldr	r3, [pc, #100]	@ (8004018 <HAL_PWREx_ConfigSupply+0x70>)
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b04      	cmp	r3, #4
 8003fba:	d00a      	beq.n	8003fd2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003fbc:	4b16      	ldr	r3, [pc, #88]	@ (8004018 <HAL_PWREx_ConfigSupply+0x70>)
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f003 0307 	and.w	r3, r3, #7
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d001      	beq.n	8003fce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e01f      	b.n	800400e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	e01d      	b.n	800400e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003fd2:	4b11      	ldr	r3, [pc, #68]	@ (8004018 <HAL_PWREx_ConfigSupply+0x70>)
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	f023 0207 	bic.w	r2, r3, #7
 8003fda:	490f      	ldr	r1, [pc, #60]	@ (8004018 <HAL_PWREx_ConfigSupply+0x70>)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003fe2:	f7fd f847 	bl	8001074 <HAL_GetTick>
 8003fe6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003fe8:	e009      	b.n	8003ffe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003fea:	f7fd f843 	bl	8001074 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ff8:	d901      	bls.n	8003ffe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e007      	b.n	800400e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003ffe:	4b06      	ldr	r3, [pc, #24]	@ (8004018 <HAL_PWREx_ConfigSupply+0x70>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004006:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800400a:	d1ee      	bne.n	8003fea <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	58024800 	.word	0x58024800

0800401c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b08c      	sub	sp, #48	@ 0x30
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e3c8      	b.n	80047c0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 8087 	beq.w	800414a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800403c:	4b88      	ldr	r3, [pc, #544]	@ (8004260 <HAL_RCC_OscConfig+0x244>)
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004044:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004046:	4b86      	ldr	r3, [pc, #536]	@ (8004260 <HAL_RCC_OscConfig+0x244>)
 8004048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800404a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800404c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800404e:	2b10      	cmp	r3, #16
 8004050:	d007      	beq.n	8004062 <HAL_RCC_OscConfig+0x46>
 8004052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004054:	2b18      	cmp	r3, #24
 8004056:	d110      	bne.n	800407a <HAL_RCC_OscConfig+0x5e>
 8004058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d10b      	bne.n	800407a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004062:	4b7f      	ldr	r3, [pc, #508]	@ (8004260 <HAL_RCC_OscConfig+0x244>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d06c      	beq.n	8004148 <HAL_RCC_OscConfig+0x12c>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d168      	bne.n	8004148 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e3a2      	b.n	80047c0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004082:	d106      	bne.n	8004092 <HAL_RCC_OscConfig+0x76>
 8004084:	4b76      	ldr	r3, [pc, #472]	@ (8004260 <HAL_RCC_OscConfig+0x244>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a75      	ldr	r2, [pc, #468]	@ (8004260 <HAL_RCC_OscConfig+0x244>)
 800408a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800408e:	6013      	str	r3, [r2, #0]
 8004090:	e02e      	b.n	80040f0 <HAL_RCC_OscConfig+0xd4>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10c      	bne.n	80040b4 <HAL_RCC_OscConfig+0x98>
 800409a:	4b71      	ldr	r3, [pc, #452]	@ (8004260 <HAL_RCC_OscConfig+0x244>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a70      	ldr	r2, [pc, #448]	@ (8004260 <HAL_RCC_OscConfig+0x244>)
 80040a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040a4:	6013      	str	r3, [r2, #0]
 80040a6:	4b6e      	ldr	r3, [pc, #440]	@ (8004260 <HAL_RCC_OscConfig+0x244>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a6d      	ldr	r2, [pc, #436]	@ (8004260 <HAL_RCC_OscConfig+0x244>)
 80040ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040b0:	6013      	str	r3, [r2, #0]
 80040b2:	e01d      	b.n	80040f0 <HAL_RCC_OscConfig+0xd4>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040bc:	d10c      	bne.n	80040d8 <HAL_RCC_OscConfig+0xbc>
 80040be:	4b68      	ldr	r3, [pc, #416]	@ (8004260 <HAL_RCC_OscConfig+0x244>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a67      	ldr	r2, [pc, #412]	@ (8004260 <HAL_RCC_OscConfig+0x244>)
 80040c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040c8:	6013      	str	r3, [r2, #0]
 80040ca:	4b65      	ldr	r3, [pc, #404]	@ (8004260 <HAL_RCC_OscConfig+0x244>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a64      	ldr	r2, [pc, #400]	@ (8004260 <HAL_RCC_OscConfig+0x244>)
 80040d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	e00b      	b.n	80040f0 <HAL_RCC_OscConfig+0xd4>
 80040d8:	4b61      	ldr	r3, [pc, #388]	@ (8004260 <HAL_RCC_OscConfig+0x244>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a60      	ldr	r2, [pc, #384]	@ (8004260 <HAL_RCC_OscConfig+0x244>)
 80040de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040e2:	6013      	str	r3, [r2, #0]
 80040e4:	4b5e      	ldr	r3, [pc, #376]	@ (8004260 <HAL_RCC_OscConfig+0x244>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a5d      	ldr	r2, [pc, #372]	@ (8004260 <HAL_RCC_OscConfig+0x244>)
 80040ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d013      	beq.n	8004120 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f8:	f7fc ffbc 	bl	8001074 <HAL_GetTick>
 80040fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040fe:	e008      	b.n	8004112 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004100:	f7fc ffb8 	bl	8001074 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b64      	cmp	r3, #100	@ 0x64
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e356      	b.n	80047c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004112:	4b53      	ldr	r3, [pc, #332]	@ (8004260 <HAL_RCC_OscConfig+0x244>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d0f0      	beq.n	8004100 <HAL_RCC_OscConfig+0xe4>
 800411e:	e014      	b.n	800414a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004120:	f7fc ffa8 	bl	8001074 <HAL_GetTick>
 8004124:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004128:	f7fc ffa4 	bl	8001074 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b64      	cmp	r3, #100	@ 0x64
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e342      	b.n	80047c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800413a:	4b49      	ldr	r3, [pc, #292]	@ (8004260 <HAL_RCC_OscConfig+0x244>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1f0      	bne.n	8004128 <HAL_RCC_OscConfig+0x10c>
 8004146:	e000      	b.n	800414a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	f000 808c 	beq.w	8004270 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004158:	4b41      	ldr	r3, [pc, #260]	@ (8004260 <HAL_RCC_OscConfig+0x244>)
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004160:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004162:	4b3f      	ldr	r3, [pc, #252]	@ (8004260 <HAL_RCC_OscConfig+0x244>)
 8004164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004166:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004168:	6a3b      	ldr	r3, [r7, #32]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d007      	beq.n	800417e <HAL_RCC_OscConfig+0x162>
 800416e:	6a3b      	ldr	r3, [r7, #32]
 8004170:	2b18      	cmp	r3, #24
 8004172:	d137      	bne.n	80041e4 <HAL_RCC_OscConfig+0x1c8>
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d132      	bne.n	80041e4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800417e:	4b38      	ldr	r3, [pc, #224]	@ (8004260 <HAL_RCC_OscConfig+0x244>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0304 	and.w	r3, r3, #4
 8004186:	2b00      	cmp	r3, #0
 8004188:	d005      	beq.n	8004196 <HAL_RCC_OscConfig+0x17a>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e314      	b.n	80047c0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004196:	4b32      	ldr	r3, [pc, #200]	@ (8004260 <HAL_RCC_OscConfig+0x244>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f023 0219 	bic.w	r2, r3, #25
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	492f      	ldr	r1, [pc, #188]	@ (8004260 <HAL_RCC_OscConfig+0x244>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a8:	f7fc ff64 	bl	8001074 <HAL_GetTick>
 80041ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041b0:	f7fc ff60 	bl	8001074 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e2fe      	b.n	80047c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041c2:	4b27      	ldr	r3, [pc, #156]	@ (8004260 <HAL_RCC_OscConfig+0x244>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0304 	and.w	r3, r3, #4
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d0f0      	beq.n	80041b0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ce:	4b24      	ldr	r3, [pc, #144]	@ (8004260 <HAL_RCC_OscConfig+0x244>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	061b      	lsls	r3, r3, #24
 80041dc:	4920      	ldr	r1, [pc, #128]	@ (8004260 <HAL_RCC_OscConfig+0x244>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041e2:	e045      	b.n	8004270 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d026      	beq.n	800423a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80041ec:	4b1c      	ldr	r3, [pc, #112]	@ (8004260 <HAL_RCC_OscConfig+0x244>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f023 0219 	bic.w	r2, r3, #25
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	4919      	ldr	r1, [pc, #100]	@ (8004260 <HAL_RCC_OscConfig+0x244>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fe:	f7fc ff39 	bl	8001074 <HAL_GetTick>
 8004202:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004204:	e008      	b.n	8004218 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004206:	f7fc ff35 	bl	8001074 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e2d3      	b.n	80047c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004218:	4b11      	ldr	r3, [pc, #68]	@ (8004260 <HAL_RCC_OscConfig+0x244>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0f0      	beq.n	8004206 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004224:	4b0e      	ldr	r3, [pc, #56]	@ (8004260 <HAL_RCC_OscConfig+0x244>)
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	061b      	lsls	r3, r3, #24
 8004232:	490b      	ldr	r1, [pc, #44]	@ (8004260 <HAL_RCC_OscConfig+0x244>)
 8004234:	4313      	orrs	r3, r2
 8004236:	604b      	str	r3, [r1, #4]
 8004238:	e01a      	b.n	8004270 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800423a:	4b09      	ldr	r3, [pc, #36]	@ (8004260 <HAL_RCC_OscConfig+0x244>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a08      	ldr	r2, [pc, #32]	@ (8004260 <HAL_RCC_OscConfig+0x244>)
 8004240:	f023 0301 	bic.w	r3, r3, #1
 8004244:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004246:	f7fc ff15 	bl	8001074 <HAL_GetTick>
 800424a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800424c:	e00a      	b.n	8004264 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800424e:	f7fc ff11 	bl	8001074 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d903      	bls.n	8004264 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e2af      	b.n	80047c0 <HAL_RCC_OscConfig+0x7a4>
 8004260:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004264:	4b96      	ldr	r3, [pc, #600]	@ (80044c0 <HAL_RCC_OscConfig+0x4a4>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0304 	and.w	r3, r3, #4
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1ee      	bne.n	800424e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0310 	and.w	r3, r3, #16
 8004278:	2b00      	cmp	r3, #0
 800427a:	d06a      	beq.n	8004352 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800427c:	4b90      	ldr	r3, [pc, #576]	@ (80044c0 <HAL_RCC_OscConfig+0x4a4>)
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004284:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004286:	4b8e      	ldr	r3, [pc, #568]	@ (80044c0 <HAL_RCC_OscConfig+0x4a4>)
 8004288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	2b08      	cmp	r3, #8
 8004290:	d007      	beq.n	80042a2 <HAL_RCC_OscConfig+0x286>
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	2b18      	cmp	r3, #24
 8004296:	d11b      	bne.n	80042d0 <HAL_RCC_OscConfig+0x2b4>
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d116      	bne.n	80042d0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80042a2:	4b87      	ldr	r3, [pc, #540]	@ (80044c0 <HAL_RCC_OscConfig+0x4a4>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d005      	beq.n	80042ba <HAL_RCC_OscConfig+0x29e>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	2b80      	cmp	r3, #128	@ 0x80
 80042b4:	d001      	beq.n	80042ba <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e282      	b.n	80047c0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80042ba:	4b81      	ldr	r3, [pc, #516]	@ (80044c0 <HAL_RCC_OscConfig+0x4a4>)
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	061b      	lsls	r3, r3, #24
 80042c8:	497d      	ldr	r1, [pc, #500]	@ (80044c0 <HAL_RCC_OscConfig+0x4a4>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80042ce:	e040      	b.n	8004352 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	69db      	ldr	r3, [r3, #28]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d023      	beq.n	8004320 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80042d8:	4b79      	ldr	r3, [pc, #484]	@ (80044c0 <HAL_RCC_OscConfig+0x4a4>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a78      	ldr	r2, [pc, #480]	@ (80044c0 <HAL_RCC_OscConfig+0x4a4>)
 80042de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e4:	f7fc fec6 	bl	8001074 <HAL_GetTick>
 80042e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80042ec:	f7fc fec2 	bl	8001074 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e260      	b.n	80047c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80042fe:	4b70      	ldr	r3, [pc, #448]	@ (80044c0 <HAL_RCC_OscConfig+0x4a4>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004306:	2b00      	cmp	r3, #0
 8004308:	d0f0      	beq.n	80042ec <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800430a:	4b6d      	ldr	r3, [pc, #436]	@ (80044c0 <HAL_RCC_OscConfig+0x4a4>)
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	061b      	lsls	r3, r3, #24
 8004318:	4969      	ldr	r1, [pc, #420]	@ (80044c0 <HAL_RCC_OscConfig+0x4a4>)
 800431a:	4313      	orrs	r3, r2
 800431c:	60cb      	str	r3, [r1, #12]
 800431e:	e018      	b.n	8004352 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004320:	4b67      	ldr	r3, [pc, #412]	@ (80044c0 <HAL_RCC_OscConfig+0x4a4>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a66      	ldr	r2, [pc, #408]	@ (80044c0 <HAL_RCC_OscConfig+0x4a4>)
 8004326:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800432a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800432c:	f7fc fea2 	bl	8001074 <HAL_GetTick>
 8004330:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004332:	e008      	b.n	8004346 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004334:	f7fc fe9e 	bl	8001074 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b02      	cmp	r3, #2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e23c      	b.n	80047c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004346:	4b5e      	ldr	r3, [pc, #376]	@ (80044c0 <HAL_RCC_OscConfig+0x4a4>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1f0      	bne.n	8004334 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0308 	and.w	r3, r3, #8
 800435a:	2b00      	cmp	r3, #0
 800435c:	d036      	beq.n	80043cc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d019      	beq.n	800439a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004366:	4b56      	ldr	r3, [pc, #344]	@ (80044c0 <HAL_RCC_OscConfig+0x4a4>)
 8004368:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800436a:	4a55      	ldr	r2, [pc, #340]	@ (80044c0 <HAL_RCC_OscConfig+0x4a4>)
 800436c:	f043 0301 	orr.w	r3, r3, #1
 8004370:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004372:	f7fc fe7f 	bl	8001074 <HAL_GetTick>
 8004376:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004378:	e008      	b.n	800438c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800437a:	f7fc fe7b 	bl	8001074 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d901      	bls.n	800438c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e219      	b.n	80047c0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800438c:	4b4c      	ldr	r3, [pc, #304]	@ (80044c0 <HAL_RCC_OscConfig+0x4a4>)
 800438e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d0f0      	beq.n	800437a <HAL_RCC_OscConfig+0x35e>
 8004398:	e018      	b.n	80043cc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800439a:	4b49      	ldr	r3, [pc, #292]	@ (80044c0 <HAL_RCC_OscConfig+0x4a4>)
 800439c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800439e:	4a48      	ldr	r2, [pc, #288]	@ (80044c0 <HAL_RCC_OscConfig+0x4a4>)
 80043a0:	f023 0301 	bic.w	r3, r3, #1
 80043a4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a6:	f7fc fe65 	bl	8001074 <HAL_GetTick>
 80043aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80043ac:	e008      	b.n	80043c0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043ae:	f7fc fe61 	bl	8001074 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d901      	bls.n	80043c0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e1ff      	b.n	80047c0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80043c0:	4b3f      	ldr	r3, [pc, #252]	@ (80044c0 <HAL_RCC_OscConfig+0x4a4>)
 80043c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1f0      	bne.n	80043ae <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0320 	and.w	r3, r3, #32
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d036      	beq.n	8004446 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d019      	beq.n	8004414 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80043e0:	4b37      	ldr	r3, [pc, #220]	@ (80044c0 <HAL_RCC_OscConfig+0x4a4>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a36      	ldr	r2, [pc, #216]	@ (80044c0 <HAL_RCC_OscConfig+0x4a4>)
 80043e6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80043ea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80043ec:	f7fc fe42 	bl	8001074 <HAL_GetTick>
 80043f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043f4:	f7fc fe3e 	bl	8001074 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e1dc      	b.n	80047c0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004406:	4b2e      	ldr	r3, [pc, #184]	@ (80044c0 <HAL_RCC_OscConfig+0x4a4>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0f0      	beq.n	80043f4 <HAL_RCC_OscConfig+0x3d8>
 8004412:	e018      	b.n	8004446 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004414:	4b2a      	ldr	r3, [pc, #168]	@ (80044c0 <HAL_RCC_OscConfig+0x4a4>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a29      	ldr	r2, [pc, #164]	@ (80044c0 <HAL_RCC_OscConfig+0x4a4>)
 800441a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800441e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004420:	f7fc fe28 	bl	8001074 <HAL_GetTick>
 8004424:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004428:	f7fc fe24 	bl	8001074 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e1c2      	b.n	80047c0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800443a:	4b21      	ldr	r3, [pc, #132]	@ (80044c0 <HAL_RCC_OscConfig+0x4a4>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1f0      	bne.n	8004428 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0304 	and.w	r3, r3, #4
 800444e:	2b00      	cmp	r3, #0
 8004450:	f000 8086 	beq.w	8004560 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004454:	4b1b      	ldr	r3, [pc, #108]	@ (80044c4 <HAL_RCC_OscConfig+0x4a8>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a1a      	ldr	r2, [pc, #104]	@ (80044c4 <HAL_RCC_OscConfig+0x4a8>)
 800445a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800445e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004460:	f7fc fe08 	bl	8001074 <HAL_GetTick>
 8004464:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004468:	f7fc fe04 	bl	8001074 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b64      	cmp	r3, #100	@ 0x64
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e1a2      	b.n	80047c0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800447a:	4b12      	ldr	r3, [pc, #72]	@ (80044c4 <HAL_RCC_OscConfig+0x4a8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0f0      	beq.n	8004468 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d106      	bne.n	800449c <HAL_RCC_OscConfig+0x480>
 800448e:	4b0c      	ldr	r3, [pc, #48]	@ (80044c0 <HAL_RCC_OscConfig+0x4a4>)
 8004490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004492:	4a0b      	ldr	r2, [pc, #44]	@ (80044c0 <HAL_RCC_OscConfig+0x4a4>)
 8004494:	f043 0301 	orr.w	r3, r3, #1
 8004498:	6713      	str	r3, [r2, #112]	@ 0x70
 800449a:	e032      	b.n	8004502 <HAL_RCC_OscConfig+0x4e6>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d111      	bne.n	80044c8 <HAL_RCC_OscConfig+0x4ac>
 80044a4:	4b06      	ldr	r3, [pc, #24]	@ (80044c0 <HAL_RCC_OscConfig+0x4a4>)
 80044a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044a8:	4a05      	ldr	r2, [pc, #20]	@ (80044c0 <HAL_RCC_OscConfig+0x4a4>)
 80044aa:	f023 0301 	bic.w	r3, r3, #1
 80044ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80044b0:	4b03      	ldr	r3, [pc, #12]	@ (80044c0 <HAL_RCC_OscConfig+0x4a4>)
 80044b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044b4:	4a02      	ldr	r2, [pc, #8]	@ (80044c0 <HAL_RCC_OscConfig+0x4a4>)
 80044b6:	f023 0304 	bic.w	r3, r3, #4
 80044ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80044bc:	e021      	b.n	8004502 <HAL_RCC_OscConfig+0x4e6>
 80044be:	bf00      	nop
 80044c0:	58024400 	.word	0x58024400
 80044c4:	58024800 	.word	0x58024800
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	2b05      	cmp	r3, #5
 80044ce:	d10c      	bne.n	80044ea <HAL_RCC_OscConfig+0x4ce>
 80044d0:	4b83      	ldr	r3, [pc, #524]	@ (80046e0 <HAL_RCC_OscConfig+0x6c4>)
 80044d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044d4:	4a82      	ldr	r2, [pc, #520]	@ (80046e0 <HAL_RCC_OscConfig+0x6c4>)
 80044d6:	f043 0304 	orr.w	r3, r3, #4
 80044da:	6713      	str	r3, [r2, #112]	@ 0x70
 80044dc:	4b80      	ldr	r3, [pc, #512]	@ (80046e0 <HAL_RCC_OscConfig+0x6c4>)
 80044de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044e0:	4a7f      	ldr	r2, [pc, #508]	@ (80046e0 <HAL_RCC_OscConfig+0x6c4>)
 80044e2:	f043 0301 	orr.w	r3, r3, #1
 80044e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80044e8:	e00b      	b.n	8004502 <HAL_RCC_OscConfig+0x4e6>
 80044ea:	4b7d      	ldr	r3, [pc, #500]	@ (80046e0 <HAL_RCC_OscConfig+0x6c4>)
 80044ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ee:	4a7c      	ldr	r2, [pc, #496]	@ (80046e0 <HAL_RCC_OscConfig+0x6c4>)
 80044f0:	f023 0301 	bic.w	r3, r3, #1
 80044f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80044f6:	4b7a      	ldr	r3, [pc, #488]	@ (80046e0 <HAL_RCC_OscConfig+0x6c4>)
 80044f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044fa:	4a79      	ldr	r2, [pc, #484]	@ (80046e0 <HAL_RCC_OscConfig+0x6c4>)
 80044fc:	f023 0304 	bic.w	r3, r3, #4
 8004500:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d015      	beq.n	8004536 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450a:	f7fc fdb3 	bl	8001074 <HAL_GetTick>
 800450e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004510:	e00a      	b.n	8004528 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004512:	f7fc fdaf 	bl	8001074 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004520:	4293      	cmp	r3, r2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e14b      	b.n	80047c0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004528:	4b6d      	ldr	r3, [pc, #436]	@ (80046e0 <HAL_RCC_OscConfig+0x6c4>)
 800452a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0ee      	beq.n	8004512 <HAL_RCC_OscConfig+0x4f6>
 8004534:	e014      	b.n	8004560 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004536:	f7fc fd9d 	bl	8001074 <HAL_GetTick>
 800453a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800453c:	e00a      	b.n	8004554 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800453e:	f7fc fd99 	bl	8001074 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	f241 3288 	movw	r2, #5000	@ 0x1388
 800454c:	4293      	cmp	r3, r2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e135      	b.n	80047c0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004554:	4b62      	ldr	r3, [pc, #392]	@ (80046e0 <HAL_RCC_OscConfig+0x6c4>)
 8004556:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1ee      	bne.n	800453e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 812a 	beq.w	80047be <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800456a:	4b5d      	ldr	r3, [pc, #372]	@ (80046e0 <HAL_RCC_OscConfig+0x6c4>)
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004572:	2b18      	cmp	r3, #24
 8004574:	f000 80ba 	beq.w	80046ec <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457c:	2b02      	cmp	r3, #2
 800457e:	f040 8095 	bne.w	80046ac <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004582:	4b57      	ldr	r3, [pc, #348]	@ (80046e0 <HAL_RCC_OscConfig+0x6c4>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a56      	ldr	r2, [pc, #344]	@ (80046e0 <HAL_RCC_OscConfig+0x6c4>)
 8004588:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800458c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800458e:	f7fc fd71 	bl	8001074 <HAL_GetTick>
 8004592:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004594:	e008      	b.n	80045a8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004596:	f7fc fd6d 	bl	8001074 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e10b      	b.n	80047c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045a8:	4b4d      	ldr	r3, [pc, #308]	@ (80046e0 <HAL_RCC_OscConfig+0x6c4>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1f0      	bne.n	8004596 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045b4:	4b4a      	ldr	r3, [pc, #296]	@ (80046e0 <HAL_RCC_OscConfig+0x6c4>)
 80045b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80045b8:	4b4a      	ldr	r3, [pc, #296]	@ (80046e4 <HAL_RCC_OscConfig+0x6c8>)
 80045ba:	4013      	ands	r3, r2
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80045c4:	0112      	lsls	r2, r2, #4
 80045c6:	430a      	orrs	r2, r1
 80045c8:	4945      	ldr	r1, [pc, #276]	@ (80046e0 <HAL_RCC_OscConfig+0x6c4>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	628b      	str	r3, [r1, #40]	@ 0x28
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d2:	3b01      	subs	r3, #1
 80045d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045dc:	3b01      	subs	r3, #1
 80045de:	025b      	lsls	r3, r3, #9
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	431a      	orrs	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e8:	3b01      	subs	r3, #1
 80045ea:	041b      	lsls	r3, r3, #16
 80045ec:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80045f0:	431a      	orrs	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045f6:	3b01      	subs	r3, #1
 80045f8:	061b      	lsls	r3, r3, #24
 80045fa:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80045fe:	4938      	ldr	r1, [pc, #224]	@ (80046e0 <HAL_RCC_OscConfig+0x6c4>)
 8004600:	4313      	orrs	r3, r2
 8004602:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004604:	4b36      	ldr	r3, [pc, #216]	@ (80046e0 <HAL_RCC_OscConfig+0x6c4>)
 8004606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004608:	4a35      	ldr	r2, [pc, #212]	@ (80046e0 <HAL_RCC_OscConfig+0x6c4>)
 800460a:	f023 0301 	bic.w	r3, r3, #1
 800460e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004610:	4b33      	ldr	r3, [pc, #204]	@ (80046e0 <HAL_RCC_OscConfig+0x6c4>)
 8004612:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004614:	4b34      	ldr	r3, [pc, #208]	@ (80046e8 <HAL_RCC_OscConfig+0x6cc>)
 8004616:	4013      	ands	r3, r2
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800461c:	00d2      	lsls	r2, r2, #3
 800461e:	4930      	ldr	r1, [pc, #192]	@ (80046e0 <HAL_RCC_OscConfig+0x6c4>)
 8004620:	4313      	orrs	r3, r2
 8004622:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004624:	4b2e      	ldr	r3, [pc, #184]	@ (80046e0 <HAL_RCC_OscConfig+0x6c4>)
 8004626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004628:	f023 020c 	bic.w	r2, r3, #12
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004630:	492b      	ldr	r1, [pc, #172]	@ (80046e0 <HAL_RCC_OscConfig+0x6c4>)
 8004632:	4313      	orrs	r3, r2
 8004634:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004636:	4b2a      	ldr	r3, [pc, #168]	@ (80046e0 <HAL_RCC_OscConfig+0x6c4>)
 8004638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800463a:	f023 0202 	bic.w	r2, r3, #2
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004642:	4927      	ldr	r1, [pc, #156]	@ (80046e0 <HAL_RCC_OscConfig+0x6c4>)
 8004644:	4313      	orrs	r3, r2
 8004646:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004648:	4b25      	ldr	r3, [pc, #148]	@ (80046e0 <HAL_RCC_OscConfig+0x6c4>)
 800464a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800464c:	4a24      	ldr	r2, [pc, #144]	@ (80046e0 <HAL_RCC_OscConfig+0x6c4>)
 800464e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004652:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004654:	4b22      	ldr	r3, [pc, #136]	@ (80046e0 <HAL_RCC_OscConfig+0x6c4>)
 8004656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004658:	4a21      	ldr	r2, [pc, #132]	@ (80046e0 <HAL_RCC_OscConfig+0x6c4>)
 800465a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800465e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004660:	4b1f      	ldr	r3, [pc, #124]	@ (80046e0 <HAL_RCC_OscConfig+0x6c4>)
 8004662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004664:	4a1e      	ldr	r2, [pc, #120]	@ (80046e0 <HAL_RCC_OscConfig+0x6c4>)
 8004666:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800466a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800466c:	4b1c      	ldr	r3, [pc, #112]	@ (80046e0 <HAL_RCC_OscConfig+0x6c4>)
 800466e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004670:	4a1b      	ldr	r2, [pc, #108]	@ (80046e0 <HAL_RCC_OscConfig+0x6c4>)
 8004672:	f043 0301 	orr.w	r3, r3, #1
 8004676:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004678:	4b19      	ldr	r3, [pc, #100]	@ (80046e0 <HAL_RCC_OscConfig+0x6c4>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a18      	ldr	r2, [pc, #96]	@ (80046e0 <HAL_RCC_OscConfig+0x6c4>)
 800467e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004684:	f7fc fcf6 	bl	8001074 <HAL_GetTick>
 8004688:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800468c:	f7fc fcf2 	bl	8001074 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e090      	b.n	80047c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800469e:	4b10      	ldr	r3, [pc, #64]	@ (80046e0 <HAL_RCC_OscConfig+0x6c4>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0f0      	beq.n	800468c <HAL_RCC_OscConfig+0x670>
 80046aa:	e088      	b.n	80047be <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ac:	4b0c      	ldr	r3, [pc, #48]	@ (80046e0 <HAL_RCC_OscConfig+0x6c4>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a0b      	ldr	r2, [pc, #44]	@ (80046e0 <HAL_RCC_OscConfig+0x6c4>)
 80046b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b8:	f7fc fcdc 	bl	8001074 <HAL_GetTick>
 80046bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c0:	f7fc fcd8 	bl	8001074 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e076      	b.n	80047c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046d2:	4b03      	ldr	r3, [pc, #12]	@ (80046e0 <HAL_RCC_OscConfig+0x6c4>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1f0      	bne.n	80046c0 <HAL_RCC_OscConfig+0x6a4>
 80046de:	e06e      	b.n	80047be <HAL_RCC_OscConfig+0x7a2>
 80046e0:	58024400 	.word	0x58024400
 80046e4:	fffffc0c 	.word	0xfffffc0c
 80046e8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80046ec:	4b36      	ldr	r3, [pc, #216]	@ (80047c8 <HAL_RCC_OscConfig+0x7ac>)
 80046ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80046f2:	4b35      	ldr	r3, [pc, #212]	@ (80047c8 <HAL_RCC_OscConfig+0x7ac>)
 80046f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d031      	beq.n	8004764 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	f003 0203 	and.w	r2, r3, #3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800470a:	429a      	cmp	r2, r3
 800470c:	d12a      	bne.n	8004764 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	091b      	lsrs	r3, r3, #4
 8004712:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800471a:	429a      	cmp	r2, r3
 800471c:	d122      	bne.n	8004764 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004728:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800472a:	429a      	cmp	r2, r3
 800472c:	d11a      	bne.n	8004764 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	0a5b      	lsrs	r3, r3, #9
 8004732:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800473a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800473c:	429a      	cmp	r2, r3
 800473e:	d111      	bne.n	8004764 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	0c1b      	lsrs	r3, r3, #16
 8004744:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800474c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800474e:	429a      	cmp	r2, r3
 8004750:	d108      	bne.n	8004764 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	0e1b      	lsrs	r3, r3, #24
 8004756:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800475e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004760:	429a      	cmp	r2, r3
 8004762:	d001      	beq.n	8004768 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e02b      	b.n	80047c0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004768:	4b17      	ldr	r3, [pc, #92]	@ (80047c8 <HAL_RCC_OscConfig+0x7ac>)
 800476a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800476c:	08db      	lsrs	r3, r3, #3
 800476e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004772:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	429a      	cmp	r2, r3
 800477c:	d01f      	beq.n	80047be <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800477e:	4b12      	ldr	r3, [pc, #72]	@ (80047c8 <HAL_RCC_OscConfig+0x7ac>)
 8004780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004782:	4a11      	ldr	r2, [pc, #68]	@ (80047c8 <HAL_RCC_OscConfig+0x7ac>)
 8004784:	f023 0301 	bic.w	r3, r3, #1
 8004788:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800478a:	f7fc fc73 	bl	8001074 <HAL_GetTick>
 800478e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004790:	bf00      	nop
 8004792:	f7fc fc6f 	bl	8001074 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479a:	4293      	cmp	r3, r2
 800479c:	d0f9      	beq.n	8004792 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800479e:	4b0a      	ldr	r3, [pc, #40]	@ (80047c8 <HAL_RCC_OscConfig+0x7ac>)
 80047a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047a2:	4b0a      	ldr	r3, [pc, #40]	@ (80047cc <HAL_RCC_OscConfig+0x7b0>)
 80047a4:	4013      	ands	r3, r2
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80047aa:	00d2      	lsls	r2, r2, #3
 80047ac:	4906      	ldr	r1, [pc, #24]	@ (80047c8 <HAL_RCC_OscConfig+0x7ac>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80047b2:	4b05      	ldr	r3, [pc, #20]	@ (80047c8 <HAL_RCC_OscConfig+0x7ac>)
 80047b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b6:	4a04      	ldr	r2, [pc, #16]	@ (80047c8 <HAL_RCC_OscConfig+0x7ac>)
 80047b8:	f043 0301 	orr.w	r3, r3, #1
 80047bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3730      	adds	r7, #48	@ 0x30
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	58024400 	.word	0x58024400
 80047cc:	ffff0007 	.word	0xffff0007

080047d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d101      	bne.n	80047e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e19c      	b.n	8004b1e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047e4:	4b8a      	ldr	r3, [pc, #552]	@ (8004a10 <HAL_RCC_ClockConfig+0x240>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 030f 	and.w	r3, r3, #15
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d910      	bls.n	8004814 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047f2:	4b87      	ldr	r3, [pc, #540]	@ (8004a10 <HAL_RCC_ClockConfig+0x240>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f023 020f 	bic.w	r2, r3, #15
 80047fa:	4985      	ldr	r1, [pc, #532]	@ (8004a10 <HAL_RCC_ClockConfig+0x240>)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	4313      	orrs	r3, r2
 8004800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004802:	4b83      	ldr	r3, [pc, #524]	@ (8004a10 <HAL_RCC_ClockConfig+0x240>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 030f 	and.w	r3, r3, #15
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	429a      	cmp	r2, r3
 800480e:	d001      	beq.n	8004814 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e184      	b.n	8004b1e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0304 	and.w	r3, r3, #4
 800481c:	2b00      	cmp	r3, #0
 800481e:	d010      	beq.n	8004842 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	691a      	ldr	r2, [r3, #16]
 8004824:	4b7b      	ldr	r3, [pc, #492]	@ (8004a14 <HAL_RCC_ClockConfig+0x244>)
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800482c:	429a      	cmp	r2, r3
 800482e:	d908      	bls.n	8004842 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004830:	4b78      	ldr	r3, [pc, #480]	@ (8004a14 <HAL_RCC_ClockConfig+0x244>)
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	4975      	ldr	r1, [pc, #468]	@ (8004a14 <HAL_RCC_ClockConfig+0x244>)
 800483e:	4313      	orrs	r3, r2
 8004840:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0308 	and.w	r3, r3, #8
 800484a:	2b00      	cmp	r3, #0
 800484c:	d010      	beq.n	8004870 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	695a      	ldr	r2, [r3, #20]
 8004852:	4b70      	ldr	r3, [pc, #448]	@ (8004a14 <HAL_RCC_ClockConfig+0x244>)
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800485a:	429a      	cmp	r2, r3
 800485c:	d908      	bls.n	8004870 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800485e:	4b6d      	ldr	r3, [pc, #436]	@ (8004a14 <HAL_RCC_ClockConfig+0x244>)
 8004860:	69db      	ldr	r3, [r3, #28]
 8004862:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	496a      	ldr	r1, [pc, #424]	@ (8004a14 <HAL_RCC_ClockConfig+0x244>)
 800486c:	4313      	orrs	r3, r2
 800486e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0310 	and.w	r3, r3, #16
 8004878:	2b00      	cmp	r3, #0
 800487a:	d010      	beq.n	800489e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	699a      	ldr	r2, [r3, #24]
 8004880:	4b64      	ldr	r3, [pc, #400]	@ (8004a14 <HAL_RCC_ClockConfig+0x244>)
 8004882:	69db      	ldr	r3, [r3, #28]
 8004884:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004888:	429a      	cmp	r2, r3
 800488a:	d908      	bls.n	800489e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800488c:	4b61      	ldr	r3, [pc, #388]	@ (8004a14 <HAL_RCC_ClockConfig+0x244>)
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	495e      	ldr	r1, [pc, #376]	@ (8004a14 <HAL_RCC_ClockConfig+0x244>)
 800489a:	4313      	orrs	r3, r2
 800489c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0320 	and.w	r3, r3, #32
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d010      	beq.n	80048cc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69da      	ldr	r2, [r3, #28]
 80048ae:	4b59      	ldr	r3, [pc, #356]	@ (8004a14 <HAL_RCC_ClockConfig+0x244>)
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d908      	bls.n	80048cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80048ba:	4b56      	ldr	r3, [pc, #344]	@ (8004a14 <HAL_RCC_ClockConfig+0x244>)
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	4953      	ldr	r1, [pc, #332]	@ (8004a14 <HAL_RCC_ClockConfig+0x244>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d010      	beq.n	80048fa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68da      	ldr	r2, [r3, #12]
 80048dc:	4b4d      	ldr	r3, [pc, #308]	@ (8004a14 <HAL_RCC_ClockConfig+0x244>)
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	f003 030f 	and.w	r3, r3, #15
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d908      	bls.n	80048fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048e8:	4b4a      	ldr	r3, [pc, #296]	@ (8004a14 <HAL_RCC_ClockConfig+0x244>)
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	f023 020f 	bic.w	r2, r3, #15
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	4947      	ldr	r1, [pc, #284]	@ (8004a14 <HAL_RCC_ClockConfig+0x244>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b00      	cmp	r3, #0
 8004904:	d055      	beq.n	80049b2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004906:	4b43      	ldr	r3, [pc, #268]	@ (8004a14 <HAL_RCC_ClockConfig+0x244>)
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	4940      	ldr	r1, [pc, #256]	@ (8004a14 <HAL_RCC_ClockConfig+0x244>)
 8004914:	4313      	orrs	r3, r2
 8004916:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	2b02      	cmp	r3, #2
 800491e:	d107      	bne.n	8004930 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004920:	4b3c      	ldr	r3, [pc, #240]	@ (8004a14 <HAL_RCC_ClockConfig+0x244>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d121      	bne.n	8004970 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e0f6      	b.n	8004b1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	2b03      	cmp	r3, #3
 8004936:	d107      	bne.n	8004948 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004938:	4b36      	ldr	r3, [pc, #216]	@ (8004a14 <HAL_RCC_ClockConfig+0x244>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d115      	bne.n	8004970 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e0ea      	b.n	8004b1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d107      	bne.n	8004960 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004950:	4b30      	ldr	r3, [pc, #192]	@ (8004a14 <HAL_RCC_ClockConfig+0x244>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004958:	2b00      	cmp	r3, #0
 800495a:	d109      	bne.n	8004970 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e0de      	b.n	8004b1e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004960:	4b2c      	ldr	r3, [pc, #176]	@ (8004a14 <HAL_RCC_ClockConfig+0x244>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0304 	and.w	r3, r3, #4
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e0d6      	b.n	8004b1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004970:	4b28      	ldr	r3, [pc, #160]	@ (8004a14 <HAL_RCC_ClockConfig+0x244>)
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	f023 0207 	bic.w	r2, r3, #7
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	4925      	ldr	r1, [pc, #148]	@ (8004a14 <HAL_RCC_ClockConfig+0x244>)
 800497e:	4313      	orrs	r3, r2
 8004980:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004982:	f7fc fb77 	bl	8001074 <HAL_GetTick>
 8004986:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004988:	e00a      	b.n	80049a0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800498a:	f7fc fb73 	bl	8001074 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004998:	4293      	cmp	r3, r2
 800499a:	d901      	bls.n	80049a0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e0be      	b.n	8004b1e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049a0:	4b1c      	ldr	r3, [pc, #112]	@ (8004a14 <HAL_RCC_ClockConfig+0x244>)
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	00db      	lsls	r3, r3, #3
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d1eb      	bne.n	800498a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d010      	beq.n	80049e0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68da      	ldr	r2, [r3, #12]
 80049c2:	4b14      	ldr	r3, [pc, #80]	@ (8004a14 <HAL_RCC_ClockConfig+0x244>)
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	f003 030f 	and.w	r3, r3, #15
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d208      	bcs.n	80049e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049ce:	4b11      	ldr	r3, [pc, #68]	@ (8004a14 <HAL_RCC_ClockConfig+0x244>)
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	f023 020f 	bic.w	r2, r3, #15
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	490e      	ldr	r1, [pc, #56]	@ (8004a14 <HAL_RCC_ClockConfig+0x244>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004a10 <HAL_RCC_ClockConfig+0x240>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 030f 	and.w	r3, r3, #15
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d214      	bcs.n	8004a18 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ee:	4b08      	ldr	r3, [pc, #32]	@ (8004a10 <HAL_RCC_ClockConfig+0x240>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f023 020f 	bic.w	r2, r3, #15
 80049f6:	4906      	ldr	r1, [pc, #24]	@ (8004a10 <HAL_RCC_ClockConfig+0x240>)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049fe:	4b04      	ldr	r3, [pc, #16]	@ (8004a10 <HAL_RCC_ClockConfig+0x240>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 030f 	and.w	r3, r3, #15
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d005      	beq.n	8004a18 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e086      	b.n	8004b1e <HAL_RCC_ClockConfig+0x34e>
 8004a10:	52002000 	.word	0x52002000
 8004a14:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0304 	and.w	r3, r3, #4
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d010      	beq.n	8004a46 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	691a      	ldr	r2, [r3, #16]
 8004a28:	4b3f      	ldr	r3, [pc, #252]	@ (8004b28 <HAL_RCC_ClockConfig+0x358>)
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d208      	bcs.n	8004a46 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004a34:	4b3c      	ldr	r3, [pc, #240]	@ (8004b28 <HAL_RCC_ClockConfig+0x358>)
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	4939      	ldr	r1, [pc, #228]	@ (8004b28 <HAL_RCC_ClockConfig+0x358>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0308 	and.w	r3, r3, #8
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d010      	beq.n	8004a74 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	695a      	ldr	r2, [r3, #20]
 8004a56:	4b34      	ldr	r3, [pc, #208]	@ (8004b28 <HAL_RCC_ClockConfig+0x358>)
 8004a58:	69db      	ldr	r3, [r3, #28]
 8004a5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d208      	bcs.n	8004a74 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004a62:	4b31      	ldr	r3, [pc, #196]	@ (8004b28 <HAL_RCC_ClockConfig+0x358>)
 8004a64:	69db      	ldr	r3, [r3, #28]
 8004a66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	492e      	ldr	r1, [pc, #184]	@ (8004b28 <HAL_RCC_ClockConfig+0x358>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0310 	and.w	r3, r3, #16
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d010      	beq.n	8004aa2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	699a      	ldr	r2, [r3, #24]
 8004a84:	4b28      	ldr	r3, [pc, #160]	@ (8004b28 <HAL_RCC_ClockConfig+0x358>)
 8004a86:	69db      	ldr	r3, [r3, #28]
 8004a88:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d208      	bcs.n	8004aa2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a90:	4b25      	ldr	r3, [pc, #148]	@ (8004b28 <HAL_RCC_ClockConfig+0x358>)
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	4922      	ldr	r1, [pc, #136]	@ (8004b28 <HAL_RCC_ClockConfig+0x358>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0320 	and.w	r3, r3, #32
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d010      	beq.n	8004ad0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	69da      	ldr	r2, [r3, #28]
 8004ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8004b28 <HAL_RCC_ClockConfig+0x358>)
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d208      	bcs.n	8004ad0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004abe:	4b1a      	ldr	r3, [pc, #104]	@ (8004b28 <HAL_RCC_ClockConfig+0x358>)
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	4917      	ldr	r1, [pc, #92]	@ (8004b28 <HAL_RCC_ClockConfig+0x358>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004ad0:	f000 f834 	bl	8004b3c <HAL_RCC_GetSysClockFreq>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	4b14      	ldr	r3, [pc, #80]	@ (8004b28 <HAL_RCC_ClockConfig+0x358>)
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	0a1b      	lsrs	r3, r3, #8
 8004adc:	f003 030f 	and.w	r3, r3, #15
 8004ae0:	4912      	ldr	r1, [pc, #72]	@ (8004b2c <HAL_RCC_ClockConfig+0x35c>)
 8004ae2:	5ccb      	ldrb	r3, [r1, r3]
 8004ae4:	f003 031f 	and.w	r3, r3, #31
 8004ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8004aec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004aee:	4b0e      	ldr	r3, [pc, #56]	@ (8004b28 <HAL_RCC_ClockConfig+0x358>)
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	f003 030f 	and.w	r3, r3, #15
 8004af6:	4a0d      	ldr	r2, [pc, #52]	@ (8004b2c <HAL_RCC_ClockConfig+0x35c>)
 8004af8:	5cd3      	ldrb	r3, [r2, r3]
 8004afa:	f003 031f 	and.w	r3, r3, #31
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	fa22 f303 	lsr.w	r3, r2, r3
 8004b04:	4a0a      	ldr	r2, [pc, #40]	@ (8004b30 <HAL_RCC_ClockConfig+0x360>)
 8004b06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004b08:	4a0a      	ldr	r2, [pc, #40]	@ (8004b34 <HAL_RCC_ClockConfig+0x364>)
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8004b38 <HAL_RCC_ClockConfig+0x368>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7fc fa64 	bl	8000fe0 <HAL_InitTick>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3718      	adds	r7, #24
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	58024400 	.word	0x58024400
 8004b2c:	080087e0 	.word	0x080087e0
 8004b30:	24000004 	.word	0x24000004
 8004b34:	24000000 	.word	0x24000000
 8004b38:	24000008 	.word	0x24000008

08004b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b089      	sub	sp, #36	@ 0x24
 8004b40:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b42:	4bb3      	ldr	r3, [pc, #716]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b4a:	2b18      	cmp	r3, #24
 8004b4c:	f200 8155 	bhi.w	8004dfa <HAL_RCC_GetSysClockFreq+0x2be>
 8004b50:	a201      	add	r2, pc, #4	@ (adr r2, 8004b58 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b56:	bf00      	nop
 8004b58:	08004bbd 	.word	0x08004bbd
 8004b5c:	08004dfb 	.word	0x08004dfb
 8004b60:	08004dfb 	.word	0x08004dfb
 8004b64:	08004dfb 	.word	0x08004dfb
 8004b68:	08004dfb 	.word	0x08004dfb
 8004b6c:	08004dfb 	.word	0x08004dfb
 8004b70:	08004dfb 	.word	0x08004dfb
 8004b74:	08004dfb 	.word	0x08004dfb
 8004b78:	08004be3 	.word	0x08004be3
 8004b7c:	08004dfb 	.word	0x08004dfb
 8004b80:	08004dfb 	.word	0x08004dfb
 8004b84:	08004dfb 	.word	0x08004dfb
 8004b88:	08004dfb 	.word	0x08004dfb
 8004b8c:	08004dfb 	.word	0x08004dfb
 8004b90:	08004dfb 	.word	0x08004dfb
 8004b94:	08004dfb 	.word	0x08004dfb
 8004b98:	08004be9 	.word	0x08004be9
 8004b9c:	08004dfb 	.word	0x08004dfb
 8004ba0:	08004dfb 	.word	0x08004dfb
 8004ba4:	08004dfb 	.word	0x08004dfb
 8004ba8:	08004dfb 	.word	0x08004dfb
 8004bac:	08004dfb 	.word	0x08004dfb
 8004bb0:	08004dfb 	.word	0x08004dfb
 8004bb4:	08004dfb 	.word	0x08004dfb
 8004bb8:	08004bef 	.word	0x08004bef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bbc:	4b94      	ldr	r3, [pc, #592]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0320 	and.w	r3, r3, #32
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d009      	beq.n	8004bdc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004bc8:	4b91      	ldr	r3, [pc, #580]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	08db      	lsrs	r3, r3, #3
 8004bce:	f003 0303 	and.w	r3, r3, #3
 8004bd2:	4a90      	ldr	r2, [pc, #576]	@ (8004e14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8004bd8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004bda:	e111      	b.n	8004e00 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004bdc:	4b8d      	ldr	r3, [pc, #564]	@ (8004e14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004bde:	61bb      	str	r3, [r7, #24]
      break;
 8004be0:	e10e      	b.n	8004e00 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004be2:	4b8d      	ldr	r3, [pc, #564]	@ (8004e18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004be4:	61bb      	str	r3, [r7, #24]
      break;
 8004be6:	e10b      	b.n	8004e00 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004be8:	4b8c      	ldr	r3, [pc, #560]	@ (8004e1c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004bea:	61bb      	str	r3, [r7, #24]
      break;
 8004bec:	e108      	b.n	8004e00 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004bee:	4b88      	ldr	r3, [pc, #544]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf2:	f003 0303 	and.w	r3, r3, #3
 8004bf6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004bf8:	4b85      	ldr	r3, [pc, #532]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bfc:	091b      	lsrs	r3, r3, #4
 8004bfe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c02:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004c04:	4b82      	ldr	r3, [pc, #520]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004c0e:	4b80      	ldr	r3, [pc, #512]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c12:	08db      	lsrs	r3, r3, #3
 8004c14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	fb02 f303 	mul.w	r3, r2, r3
 8004c1e:	ee07 3a90 	vmov	s15, r3
 8004c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c26:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f000 80e1 	beq.w	8004df4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	f000 8083 	beq.w	8004d40 <HAL_RCC_GetSysClockFreq+0x204>
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	f200 80a1 	bhi.w	8004d84 <HAL_RCC_GetSysClockFreq+0x248>
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d003      	beq.n	8004c50 <HAL_RCC_GetSysClockFreq+0x114>
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d056      	beq.n	8004cfc <HAL_RCC_GetSysClockFreq+0x1c0>
 8004c4e:	e099      	b.n	8004d84 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c50:	4b6f      	ldr	r3, [pc, #444]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0320 	and.w	r3, r3, #32
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d02d      	beq.n	8004cb8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c5c:	4b6c      	ldr	r3, [pc, #432]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	08db      	lsrs	r3, r3, #3
 8004c62:	f003 0303 	and.w	r3, r3, #3
 8004c66:	4a6b      	ldr	r2, [pc, #428]	@ (8004e14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004c68:	fa22 f303 	lsr.w	r3, r2, r3
 8004c6c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	ee07 3a90 	vmov	s15, r3
 8004c74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	ee07 3a90 	vmov	s15, r3
 8004c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c86:	4b62      	ldr	r3, [pc, #392]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c8e:	ee07 3a90 	vmov	s15, r3
 8004c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c96:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c9a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004e20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ca6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cb2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004cb6:	e087      	b.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	ee07 3a90 	vmov	s15, r3
 8004cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cc2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004e24 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cca:	4b51      	ldr	r3, [pc, #324]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cd2:	ee07 3a90 	vmov	s15, r3
 8004cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cda:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cde:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004e20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cf6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004cfa:	e065      	b.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	ee07 3a90 	vmov	s15, r3
 8004d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d06:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004e28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d0e:	4b40      	ldr	r3, [pc, #256]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d16:	ee07 3a90 	vmov	s15, r3
 8004d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d22:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004e20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004d3e:	e043      	b.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	ee07 3a90 	vmov	s15, r3
 8004d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d4a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004e2c <HAL_RCC_GetSysClockFreq+0x2f0>
 8004d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d52:	4b2f      	ldr	r3, [pc, #188]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d5a:	ee07 3a90 	vmov	s15, r3
 8004d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d62:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d66:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004e20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004d82:	e021      	b.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	ee07 3a90 	vmov	s15, r3
 8004d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d8e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004e28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d96:	4b1e      	ldr	r3, [pc, #120]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d9e:	ee07 3a90 	vmov	s15, r3
 8004da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004da6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004daa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004e20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004db6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dc2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004dc6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004dc8:	4b11      	ldr	r3, [pc, #68]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dcc:	0a5b      	lsrs	r3, r3, #9
 8004dce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	ee07 3a90 	vmov	s15, r3
 8004ddc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004de0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004de4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004de8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dec:	ee17 3a90 	vmov	r3, s15
 8004df0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004df2:	e005      	b.n	8004e00 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004df4:	2300      	movs	r3, #0
 8004df6:	61bb      	str	r3, [r7, #24]
      break;
 8004df8:	e002      	b.n	8004e00 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004dfa:	4b07      	ldr	r3, [pc, #28]	@ (8004e18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004dfc:	61bb      	str	r3, [r7, #24]
      break;
 8004dfe:	bf00      	nop
  }

  return sysclockfreq;
 8004e00:	69bb      	ldr	r3, [r7, #24]
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3724      	adds	r7, #36	@ 0x24
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	58024400 	.word	0x58024400
 8004e14:	03d09000 	.word	0x03d09000
 8004e18:	003d0900 	.word	0x003d0900
 8004e1c:	017d7840 	.word	0x017d7840
 8004e20:	46000000 	.word	0x46000000
 8004e24:	4c742400 	.word	0x4c742400
 8004e28:	4a742400 	.word	0x4a742400
 8004e2c:	4bbebc20 	.word	0x4bbebc20

08004e30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004e36:	f7ff fe81 	bl	8004b3c <HAL_RCC_GetSysClockFreq>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	4b10      	ldr	r3, [pc, #64]	@ (8004e80 <HAL_RCC_GetHCLKFreq+0x50>)
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	0a1b      	lsrs	r3, r3, #8
 8004e42:	f003 030f 	and.w	r3, r3, #15
 8004e46:	490f      	ldr	r1, [pc, #60]	@ (8004e84 <HAL_RCC_GetHCLKFreq+0x54>)
 8004e48:	5ccb      	ldrb	r3, [r1, r3]
 8004e4a:	f003 031f 	and.w	r3, r3, #31
 8004e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e52:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e54:	4b0a      	ldr	r3, [pc, #40]	@ (8004e80 <HAL_RCC_GetHCLKFreq+0x50>)
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	f003 030f 	and.w	r3, r3, #15
 8004e5c:	4a09      	ldr	r2, [pc, #36]	@ (8004e84 <HAL_RCC_GetHCLKFreq+0x54>)
 8004e5e:	5cd3      	ldrb	r3, [r2, r3]
 8004e60:	f003 031f 	and.w	r3, r3, #31
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	fa22 f303 	lsr.w	r3, r2, r3
 8004e6a:	4a07      	ldr	r2, [pc, #28]	@ (8004e88 <HAL_RCC_GetHCLKFreq+0x58>)
 8004e6c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004e6e:	4a07      	ldr	r2, [pc, #28]	@ (8004e8c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004e74:	4b04      	ldr	r3, [pc, #16]	@ (8004e88 <HAL_RCC_GetHCLKFreq+0x58>)
 8004e76:	681b      	ldr	r3, [r3, #0]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3708      	adds	r7, #8
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	58024400 	.word	0x58024400
 8004e84:	080087e0 	.word	0x080087e0
 8004e88:	24000004 	.word	0x24000004
 8004e8c:	24000000 	.word	0x24000000

08004e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004e94:	f7ff ffcc 	bl	8004e30 <HAL_RCC_GetHCLKFreq>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	4b06      	ldr	r3, [pc, #24]	@ (8004eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	091b      	lsrs	r3, r3, #4
 8004ea0:	f003 0307 	and.w	r3, r3, #7
 8004ea4:	4904      	ldr	r1, [pc, #16]	@ (8004eb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ea6:	5ccb      	ldrb	r3, [r1, r3]
 8004ea8:	f003 031f 	and.w	r3, r3, #31
 8004eac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	58024400 	.word	0x58024400
 8004eb8:	080087e0 	.word	0x080087e0

08004ebc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ebc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ec0:	b0c6      	sub	sp, #280	@ 0x118
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ec8:	2300      	movs	r3, #0
 8004eca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ece:	2300      	movs	r3, #0
 8004ed0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004edc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004ee0:	2500      	movs	r5, #0
 8004ee2:	ea54 0305 	orrs.w	r3, r4, r5
 8004ee6:	d049      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004eee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004ef2:	d02f      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004ef4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004ef8:	d828      	bhi.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004efa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004efe:	d01a      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004f00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f04:	d822      	bhi.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d003      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004f0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f0e:	d007      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004f10:	e01c      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f12:	4bab      	ldr	r3, [pc, #684]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f16:	4aaa      	ldr	r2, [pc, #680]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004f1e:	e01a      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f24:	3308      	adds	r3, #8
 8004f26:	2102      	movs	r1, #2
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f002 fa49 	bl	80073c0 <RCCEx_PLL2_Config>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004f34:	e00f      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f3a:	3328      	adds	r3, #40	@ 0x28
 8004f3c:	2102      	movs	r1, #2
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f002 faf0 	bl	8007524 <RCCEx_PLL3_Config>
 8004f44:	4603      	mov	r3, r0
 8004f46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004f4a:	e004      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004f52:	e000      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004f54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10a      	bne.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004f5e:	4b98      	ldr	r3, [pc, #608]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f62:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f6c:	4a94      	ldr	r2, [pc, #592]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f6e:	430b      	orrs	r3, r1
 8004f70:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f72:	e003      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f84:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004f88:	f04f 0900 	mov.w	r9, #0
 8004f8c:	ea58 0309 	orrs.w	r3, r8, r9
 8004f90:	d047      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f98:	2b04      	cmp	r3, #4
 8004f9a:	d82a      	bhi.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004f9c:	a201      	add	r2, pc, #4	@ (adr r2, 8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa2:	bf00      	nop
 8004fa4:	08004fb9 	.word	0x08004fb9
 8004fa8:	08004fc7 	.word	0x08004fc7
 8004fac:	08004fdd 	.word	0x08004fdd
 8004fb0:	08004ffb 	.word	0x08004ffb
 8004fb4:	08004ffb 	.word	0x08004ffb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fb8:	4b81      	ldr	r3, [pc, #516]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fbc:	4a80      	ldr	r2, [pc, #512]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004fbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004fc4:	e01a      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fca:	3308      	adds	r3, #8
 8004fcc:	2100      	movs	r1, #0
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f002 f9f6 	bl	80073c0 <RCCEx_PLL2_Config>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004fda:	e00f      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fe0:	3328      	adds	r3, #40	@ 0x28
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f002 fa9d 	bl	8007524 <RCCEx_PLL3_Config>
 8004fea:	4603      	mov	r3, r0
 8004fec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ff0:	e004      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004ff8:	e000      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004ffa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ffc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005000:	2b00      	cmp	r3, #0
 8005002:	d10a      	bne.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005004:	4b6e      	ldr	r3, [pc, #440]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005006:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005008:	f023 0107 	bic.w	r1, r3, #7
 800500c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005012:	4a6b      	ldr	r2, [pc, #428]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005014:	430b      	orrs	r3, r1
 8005016:	6513      	str	r3, [r2, #80]	@ 0x50
 8005018:	e003      	b.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800501a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800501e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005022:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800502e:	f04f 0b00 	mov.w	fp, #0
 8005032:	ea5a 030b 	orrs.w	r3, sl, fp
 8005036:	d05b      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800503c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005040:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005044:	d03b      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005046:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800504a:	d834      	bhi.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800504c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005050:	d037      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005052:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005056:	d82e      	bhi.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005058:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800505c:	d033      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800505e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005062:	d828      	bhi.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005064:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005068:	d01a      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800506a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800506e:	d822      	bhi.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005070:	2b00      	cmp	r3, #0
 8005072:	d003      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005074:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005078:	d007      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800507a:	e01c      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800507c:	4b50      	ldr	r3, [pc, #320]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800507e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005080:	4a4f      	ldr	r2, [pc, #316]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005082:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005086:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005088:	e01e      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800508a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800508e:	3308      	adds	r3, #8
 8005090:	2100      	movs	r1, #0
 8005092:	4618      	mov	r0, r3
 8005094:	f002 f994 	bl	80073c0 <RCCEx_PLL2_Config>
 8005098:	4603      	mov	r3, r0
 800509a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800509e:	e013      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050a4:	3328      	adds	r3, #40	@ 0x28
 80050a6:	2100      	movs	r1, #0
 80050a8:	4618      	mov	r0, r3
 80050aa:	f002 fa3b 	bl	8007524 <RCCEx_PLL3_Config>
 80050ae:	4603      	mov	r3, r0
 80050b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050b4:	e008      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80050bc:	e004      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80050be:	bf00      	nop
 80050c0:	e002      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80050c2:	bf00      	nop
 80050c4:	e000      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80050c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d10b      	bne.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80050d0:	4b3b      	ldr	r3, [pc, #236]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80050d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050d4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80050d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80050e0:	4a37      	ldr	r2, [pc, #220]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80050e2:	430b      	orrs	r3, r1
 80050e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80050e6:	e003      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80050f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80050fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005100:	2300      	movs	r3, #0
 8005102:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005106:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800510a:	460b      	mov	r3, r1
 800510c:	4313      	orrs	r3, r2
 800510e:	d05d      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005114:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005118:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800511c:	d03b      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800511e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005122:	d834      	bhi.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005124:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005128:	d037      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800512a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800512e:	d82e      	bhi.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005130:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005134:	d033      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005136:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800513a:	d828      	bhi.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800513c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005140:	d01a      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005142:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005146:	d822      	bhi.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005148:	2b00      	cmp	r3, #0
 800514a:	d003      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800514c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005150:	d007      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005152:	e01c      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005154:	4b1a      	ldr	r3, [pc, #104]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005158:	4a19      	ldr	r2, [pc, #100]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800515a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800515e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005160:	e01e      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005162:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005166:	3308      	adds	r3, #8
 8005168:	2100      	movs	r1, #0
 800516a:	4618      	mov	r0, r3
 800516c:	f002 f928 	bl	80073c0 <RCCEx_PLL2_Config>
 8005170:	4603      	mov	r3, r0
 8005172:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005176:	e013      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800517c:	3328      	adds	r3, #40	@ 0x28
 800517e:	2100      	movs	r1, #0
 8005180:	4618      	mov	r0, r3
 8005182:	f002 f9cf 	bl	8007524 <RCCEx_PLL3_Config>
 8005186:	4603      	mov	r3, r0
 8005188:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800518c:	e008      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005194:	e004      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005196:	bf00      	nop
 8005198:	e002      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800519a:	bf00      	nop
 800519c:	e000      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800519e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10d      	bne.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80051a8:	4b05      	ldr	r3, [pc, #20]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80051aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ac:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80051b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80051b8:	4a01      	ldr	r2, [pc, #4]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80051ba:	430b      	orrs	r3, r1
 80051bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80051be:	e005      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80051c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80051cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80051d8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80051dc:	2300      	movs	r3, #0
 80051de:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80051e2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80051e6:	460b      	mov	r3, r1
 80051e8:	4313      	orrs	r3, r2
 80051ea:	d03a      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80051ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051f2:	2b30      	cmp	r3, #48	@ 0x30
 80051f4:	d01f      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80051f6:	2b30      	cmp	r3, #48	@ 0x30
 80051f8:	d819      	bhi.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x372>
 80051fa:	2b20      	cmp	r3, #32
 80051fc:	d00c      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80051fe:	2b20      	cmp	r3, #32
 8005200:	d815      	bhi.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005202:	2b00      	cmp	r3, #0
 8005204:	d019      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005206:	2b10      	cmp	r3, #16
 8005208:	d111      	bne.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800520a:	4baa      	ldr	r3, [pc, #680]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800520c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800520e:	4aa9      	ldr	r2, [pc, #676]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005210:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005214:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005216:	e011      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005218:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800521c:	3308      	adds	r3, #8
 800521e:	2102      	movs	r1, #2
 8005220:	4618      	mov	r0, r3
 8005222:	f002 f8cd 	bl	80073c0 <RCCEx_PLL2_Config>
 8005226:	4603      	mov	r3, r0
 8005228:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800522c:	e006      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005234:	e002      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005236:	bf00      	nop
 8005238:	e000      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800523a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800523c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10a      	bne.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005244:	4b9b      	ldr	r3, [pc, #620]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005248:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800524c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005252:	4a98      	ldr	r2, [pc, #608]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005254:	430b      	orrs	r3, r1
 8005256:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005258:	e003      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800525a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800525e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005262:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800526e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005272:	2300      	movs	r3, #0
 8005274:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005278:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800527c:	460b      	mov	r3, r1
 800527e:	4313      	orrs	r3, r2
 8005280:	d051      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005288:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800528c:	d035      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800528e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005292:	d82e      	bhi.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005294:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005298:	d031      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x442>
 800529a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800529e:	d828      	bhi.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80052a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052a4:	d01a      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x420>
 80052a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052aa:	d822      	bhi.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d003      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80052b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052b4:	d007      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80052b6:	e01c      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052b8:	4b7e      	ldr	r3, [pc, #504]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80052ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052bc:	4a7d      	ldr	r2, [pc, #500]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80052be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80052c4:	e01c      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052ca:	3308      	adds	r3, #8
 80052cc:	2100      	movs	r1, #0
 80052ce:	4618      	mov	r0, r3
 80052d0:	f002 f876 	bl	80073c0 <RCCEx_PLL2_Config>
 80052d4:	4603      	mov	r3, r0
 80052d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80052da:	e011      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80052dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052e0:	3328      	adds	r3, #40	@ 0x28
 80052e2:	2100      	movs	r1, #0
 80052e4:	4618      	mov	r0, r3
 80052e6:	f002 f91d 	bl	8007524 <RCCEx_PLL3_Config>
 80052ea:	4603      	mov	r3, r0
 80052ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80052f0:	e006      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80052f8:	e002      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80052fa:	bf00      	nop
 80052fc:	e000      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80052fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005300:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10a      	bne.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005308:	4b6a      	ldr	r3, [pc, #424]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800530a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800530c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005316:	4a67      	ldr	r2, [pc, #412]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005318:	430b      	orrs	r3, r1
 800531a:	6513      	str	r3, [r2, #80]	@ 0x50
 800531c:	e003      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800531e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005322:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005326:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800532a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005332:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005336:	2300      	movs	r3, #0
 8005338:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800533c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005340:	460b      	mov	r3, r1
 8005342:	4313      	orrs	r3, r2
 8005344:	d053      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005346:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800534a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800534c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005350:	d033      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005352:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005356:	d82c      	bhi.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005358:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800535c:	d02f      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x502>
 800535e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005362:	d826      	bhi.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005364:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005368:	d02b      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800536a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800536e:	d820      	bhi.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005370:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005374:	d012      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005376:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800537a:	d81a      	bhi.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800537c:	2b00      	cmp	r3, #0
 800537e:	d022      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005384:	d115      	bne.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005386:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800538a:	3308      	adds	r3, #8
 800538c:	2101      	movs	r1, #1
 800538e:	4618      	mov	r0, r3
 8005390:	f002 f816 	bl	80073c0 <RCCEx_PLL2_Config>
 8005394:	4603      	mov	r3, r0
 8005396:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800539a:	e015      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800539c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053a0:	3328      	adds	r3, #40	@ 0x28
 80053a2:	2101      	movs	r1, #1
 80053a4:	4618      	mov	r0, r3
 80053a6:	f002 f8bd 	bl	8007524 <RCCEx_PLL3_Config>
 80053aa:	4603      	mov	r3, r0
 80053ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80053b0:	e00a      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80053b8:	e006      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80053ba:	bf00      	nop
 80053bc:	e004      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80053be:	bf00      	nop
 80053c0:	e002      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80053c2:	bf00      	nop
 80053c4:	e000      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80053c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d10a      	bne.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80053d0:	4b38      	ldr	r3, [pc, #224]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80053d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053d4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80053d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053de:	4a35      	ldr	r2, [pc, #212]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80053e0:	430b      	orrs	r3, r1
 80053e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80053e4:	e003      	b.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80053ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80053ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80053fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80053fe:	2300      	movs	r3, #0
 8005400:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005404:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005408:	460b      	mov	r3, r1
 800540a:	4313      	orrs	r3, r2
 800540c:	d058      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800540e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005412:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005416:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800541a:	d033      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800541c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005420:	d82c      	bhi.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005426:	d02f      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005428:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800542c:	d826      	bhi.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800542e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005432:	d02b      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005434:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005438:	d820      	bhi.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800543a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800543e:	d012      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8005440:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005444:	d81a      	bhi.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005446:	2b00      	cmp	r3, #0
 8005448:	d022      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800544a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800544e:	d115      	bne.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005454:	3308      	adds	r3, #8
 8005456:	2101      	movs	r1, #1
 8005458:	4618      	mov	r0, r3
 800545a:	f001 ffb1 	bl	80073c0 <RCCEx_PLL2_Config>
 800545e:	4603      	mov	r3, r0
 8005460:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005464:	e015      	b.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005466:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800546a:	3328      	adds	r3, #40	@ 0x28
 800546c:	2101      	movs	r1, #1
 800546e:	4618      	mov	r0, r3
 8005470:	f002 f858 	bl	8007524 <RCCEx_PLL3_Config>
 8005474:	4603      	mov	r3, r0
 8005476:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800547a:	e00a      	b.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005482:	e006      	b.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005484:	bf00      	nop
 8005486:	e004      	b.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005488:	bf00      	nop
 800548a:	e002      	b.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800548c:	bf00      	nop
 800548e:	e000      	b.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005490:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005492:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005496:	2b00      	cmp	r3, #0
 8005498:	d10e      	bne.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800549a:	4b06      	ldr	r3, [pc, #24]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800549c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800549e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80054a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80054aa:	4a02      	ldr	r2, [pc, #8]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80054ac:	430b      	orrs	r3, r1
 80054ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80054b0:	e006      	b.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80054b2:	bf00      	nop
 80054b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80054c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80054cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054d0:	2300      	movs	r3, #0
 80054d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80054d6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80054da:	460b      	mov	r3, r1
 80054dc:	4313      	orrs	r3, r2
 80054de:	d037      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80054e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054ea:	d00e      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80054ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054f0:	d816      	bhi.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d018      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80054f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054fa:	d111      	bne.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054fc:	4bc4      	ldr	r3, [pc, #784]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005500:	4ac3      	ldr	r2, [pc, #780]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005502:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005506:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005508:	e00f      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800550a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800550e:	3308      	adds	r3, #8
 8005510:	2101      	movs	r1, #1
 8005512:	4618      	mov	r0, r3
 8005514:	f001 ff54 	bl	80073c0 <RCCEx_PLL2_Config>
 8005518:	4603      	mov	r3, r0
 800551a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800551e:	e004      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005526:	e000      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005528:	bf00      	nop
    }

    if (ret == HAL_OK)
 800552a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10a      	bne.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005532:	4bb7      	ldr	r3, [pc, #732]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005534:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005536:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800553a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800553e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005540:	4ab3      	ldr	r2, [pc, #716]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005542:	430b      	orrs	r3, r1
 8005544:	6513      	str	r3, [r2, #80]	@ 0x50
 8005546:	e003      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005548:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800554c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005550:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005558:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800555c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005560:	2300      	movs	r3, #0
 8005562:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005566:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800556a:	460b      	mov	r3, r1
 800556c:	4313      	orrs	r3, r2
 800556e:	d039      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005570:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005576:	2b03      	cmp	r3, #3
 8005578:	d81c      	bhi.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800557a:	a201      	add	r2, pc, #4	@ (adr r2, 8005580 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800557c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005580:	080055bd 	.word	0x080055bd
 8005584:	08005591 	.word	0x08005591
 8005588:	0800559f 	.word	0x0800559f
 800558c:	080055bd 	.word	0x080055bd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005590:	4b9f      	ldr	r3, [pc, #636]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005594:	4a9e      	ldr	r2, [pc, #632]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005596:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800559a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800559c:	e00f      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800559e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055a2:	3308      	adds	r3, #8
 80055a4:	2102      	movs	r1, #2
 80055a6:	4618      	mov	r0, r3
 80055a8:	f001 ff0a 	bl	80073c0 <RCCEx_PLL2_Config>
 80055ac:	4603      	mov	r3, r0
 80055ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80055b2:	e004      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80055ba:	e000      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80055bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d10a      	bne.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80055c6:	4b92      	ldr	r3, [pc, #584]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055ca:	f023 0103 	bic.w	r1, r3, #3
 80055ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055d4:	4a8e      	ldr	r2, [pc, #568]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055d6:	430b      	orrs	r3, r1
 80055d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80055da:	e003      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ec:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80055f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80055f4:	2300      	movs	r3, #0
 80055f6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80055fa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80055fe:	460b      	mov	r3, r1
 8005600:	4313      	orrs	r3, r2
 8005602:	f000 8099 	beq.w	8005738 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005606:	4b83      	ldr	r3, [pc, #524]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a82      	ldr	r2, [pc, #520]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800560c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005610:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005612:	f7fb fd2f 	bl	8001074 <HAL_GetTick>
 8005616:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800561a:	e00b      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800561c:	f7fb fd2a 	bl	8001074 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	2b64      	cmp	r3, #100	@ 0x64
 800562a:	d903      	bls.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005632:	e005      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005634:	4b77      	ldr	r3, [pc, #476]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800563c:	2b00      	cmp	r3, #0
 800563e:	d0ed      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005640:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005644:	2b00      	cmp	r3, #0
 8005646:	d173      	bne.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005648:	4b71      	ldr	r3, [pc, #452]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800564a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800564c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005650:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005654:	4053      	eors	r3, r2
 8005656:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800565a:	2b00      	cmp	r3, #0
 800565c:	d015      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800565e:	4b6c      	ldr	r3, [pc, #432]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005662:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005666:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800566a:	4b69      	ldr	r3, [pc, #420]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800566c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800566e:	4a68      	ldr	r2, [pc, #416]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005670:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005674:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005676:	4b66      	ldr	r3, [pc, #408]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800567a:	4a65      	ldr	r2, [pc, #404]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800567c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005680:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005682:	4a63      	ldr	r2, [pc, #396]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005684:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005688:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800568a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800568e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005692:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005696:	d118      	bne.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005698:	f7fb fcec 	bl	8001074 <HAL_GetTick>
 800569c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056a0:	e00d      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056a2:	f7fb fce7 	bl	8001074 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80056ac:	1ad2      	subs	r2, r2, r3
 80056ae:	f241 3388 	movw	r3, #5000	@ 0x1388
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d903      	bls.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80056bc:	e005      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056be:	4b54      	ldr	r3, [pc, #336]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80056c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056c2:	f003 0302 	and.w	r3, r3, #2
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d0eb      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80056ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d129      	bne.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80056da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056e2:	d10e      	bne.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80056e4:	4b4a      	ldr	r3, [pc, #296]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80056ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80056f4:	091a      	lsrs	r2, r3, #4
 80056f6:	4b48      	ldr	r3, [pc, #288]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80056f8:	4013      	ands	r3, r2
 80056fa:	4a45      	ldr	r2, [pc, #276]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80056fc:	430b      	orrs	r3, r1
 80056fe:	6113      	str	r3, [r2, #16]
 8005700:	e005      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005702:	4b43      	ldr	r3, [pc, #268]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	4a42      	ldr	r2, [pc, #264]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005708:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800570c:	6113      	str	r3, [r2, #16]
 800570e:	4b40      	ldr	r3, [pc, #256]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005710:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005716:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800571a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800571e:	4a3c      	ldr	r2, [pc, #240]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005720:	430b      	orrs	r3, r1
 8005722:	6713      	str	r3, [r2, #112]	@ 0x70
 8005724:	e008      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005726:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800572a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800572e:	e003      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005730:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005734:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800573c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005740:	f002 0301 	and.w	r3, r2, #1
 8005744:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005748:	2300      	movs	r3, #0
 800574a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800574e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005752:	460b      	mov	r3, r1
 8005754:	4313      	orrs	r3, r2
 8005756:	f000 808f 	beq.w	8005878 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800575a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800575e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005760:	2b28      	cmp	r3, #40	@ 0x28
 8005762:	d871      	bhi.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005764:	a201      	add	r2, pc, #4	@ (adr r2, 800576c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576a:	bf00      	nop
 800576c:	08005851 	.word	0x08005851
 8005770:	08005849 	.word	0x08005849
 8005774:	08005849 	.word	0x08005849
 8005778:	08005849 	.word	0x08005849
 800577c:	08005849 	.word	0x08005849
 8005780:	08005849 	.word	0x08005849
 8005784:	08005849 	.word	0x08005849
 8005788:	08005849 	.word	0x08005849
 800578c:	0800581d 	.word	0x0800581d
 8005790:	08005849 	.word	0x08005849
 8005794:	08005849 	.word	0x08005849
 8005798:	08005849 	.word	0x08005849
 800579c:	08005849 	.word	0x08005849
 80057a0:	08005849 	.word	0x08005849
 80057a4:	08005849 	.word	0x08005849
 80057a8:	08005849 	.word	0x08005849
 80057ac:	08005833 	.word	0x08005833
 80057b0:	08005849 	.word	0x08005849
 80057b4:	08005849 	.word	0x08005849
 80057b8:	08005849 	.word	0x08005849
 80057bc:	08005849 	.word	0x08005849
 80057c0:	08005849 	.word	0x08005849
 80057c4:	08005849 	.word	0x08005849
 80057c8:	08005849 	.word	0x08005849
 80057cc:	08005851 	.word	0x08005851
 80057d0:	08005849 	.word	0x08005849
 80057d4:	08005849 	.word	0x08005849
 80057d8:	08005849 	.word	0x08005849
 80057dc:	08005849 	.word	0x08005849
 80057e0:	08005849 	.word	0x08005849
 80057e4:	08005849 	.word	0x08005849
 80057e8:	08005849 	.word	0x08005849
 80057ec:	08005851 	.word	0x08005851
 80057f0:	08005849 	.word	0x08005849
 80057f4:	08005849 	.word	0x08005849
 80057f8:	08005849 	.word	0x08005849
 80057fc:	08005849 	.word	0x08005849
 8005800:	08005849 	.word	0x08005849
 8005804:	08005849 	.word	0x08005849
 8005808:	08005849 	.word	0x08005849
 800580c:	08005851 	.word	0x08005851
 8005810:	58024400 	.word	0x58024400
 8005814:	58024800 	.word	0x58024800
 8005818:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800581c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005820:	3308      	adds	r3, #8
 8005822:	2101      	movs	r1, #1
 8005824:	4618      	mov	r0, r3
 8005826:	f001 fdcb 	bl	80073c0 <RCCEx_PLL2_Config>
 800582a:	4603      	mov	r3, r0
 800582c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005830:	e00f      	b.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005832:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005836:	3328      	adds	r3, #40	@ 0x28
 8005838:	2101      	movs	r1, #1
 800583a:	4618      	mov	r0, r3
 800583c:	f001 fe72 	bl	8007524 <RCCEx_PLL3_Config>
 8005840:	4603      	mov	r3, r0
 8005842:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005846:	e004      	b.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800584e:	e000      	b.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005850:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005852:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005856:	2b00      	cmp	r3, #0
 8005858:	d10a      	bne.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800585a:	4bbf      	ldr	r3, [pc, #764]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800585c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800585e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005862:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005866:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005868:	4abb      	ldr	r2, [pc, #748]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800586a:	430b      	orrs	r3, r1
 800586c:	6553      	str	r3, [r2, #84]	@ 0x54
 800586e:	e003      	b.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005870:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005874:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005878:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800587c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005880:	f002 0302 	and.w	r3, r2, #2
 8005884:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005888:	2300      	movs	r3, #0
 800588a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800588e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005892:	460b      	mov	r3, r1
 8005894:	4313      	orrs	r3, r2
 8005896:	d041      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800589c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800589e:	2b05      	cmp	r3, #5
 80058a0:	d824      	bhi.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80058a2:	a201      	add	r2, pc, #4	@ (adr r2, 80058a8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80058a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a8:	080058f5 	.word	0x080058f5
 80058ac:	080058c1 	.word	0x080058c1
 80058b0:	080058d7 	.word	0x080058d7
 80058b4:	080058f5 	.word	0x080058f5
 80058b8:	080058f5 	.word	0x080058f5
 80058bc:	080058f5 	.word	0x080058f5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80058c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058c4:	3308      	adds	r3, #8
 80058c6:	2101      	movs	r1, #1
 80058c8:	4618      	mov	r0, r3
 80058ca:	f001 fd79 	bl	80073c0 <RCCEx_PLL2_Config>
 80058ce:	4603      	mov	r3, r0
 80058d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80058d4:	e00f      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058da:	3328      	adds	r3, #40	@ 0x28
 80058dc:	2101      	movs	r1, #1
 80058de:	4618      	mov	r0, r3
 80058e0:	f001 fe20 	bl	8007524 <RCCEx_PLL3_Config>
 80058e4:	4603      	mov	r3, r0
 80058e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80058ea:	e004      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80058f2:	e000      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80058f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10a      	bne.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80058fe:	4b96      	ldr	r3, [pc, #600]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005902:	f023 0107 	bic.w	r1, r3, #7
 8005906:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800590a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800590c:	4a92      	ldr	r2, [pc, #584]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800590e:	430b      	orrs	r3, r1
 8005910:	6553      	str	r3, [r2, #84]	@ 0x54
 8005912:	e003      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005914:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005918:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800591c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005924:	f002 0304 	and.w	r3, r2, #4
 8005928:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800592c:	2300      	movs	r3, #0
 800592e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005932:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005936:	460b      	mov	r3, r1
 8005938:	4313      	orrs	r3, r2
 800593a:	d044      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800593c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005940:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005944:	2b05      	cmp	r3, #5
 8005946:	d825      	bhi.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8005948:	a201      	add	r2, pc, #4	@ (adr r2, 8005950 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800594a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800594e:	bf00      	nop
 8005950:	0800599d 	.word	0x0800599d
 8005954:	08005969 	.word	0x08005969
 8005958:	0800597f 	.word	0x0800597f
 800595c:	0800599d 	.word	0x0800599d
 8005960:	0800599d 	.word	0x0800599d
 8005964:	0800599d 	.word	0x0800599d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005968:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800596c:	3308      	adds	r3, #8
 800596e:	2101      	movs	r1, #1
 8005970:	4618      	mov	r0, r3
 8005972:	f001 fd25 	bl	80073c0 <RCCEx_PLL2_Config>
 8005976:	4603      	mov	r3, r0
 8005978:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800597c:	e00f      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800597e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005982:	3328      	adds	r3, #40	@ 0x28
 8005984:	2101      	movs	r1, #1
 8005986:	4618      	mov	r0, r3
 8005988:	f001 fdcc 	bl	8007524 <RCCEx_PLL3_Config>
 800598c:	4603      	mov	r3, r0
 800598e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005992:	e004      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800599a:	e000      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800599c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800599e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10b      	bne.n	80059be <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059a6:	4b6c      	ldr	r3, [pc, #432]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80059a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059aa:	f023 0107 	bic.w	r1, r3, #7
 80059ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059b6:	4a68      	ldr	r2, [pc, #416]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80059b8:	430b      	orrs	r3, r1
 80059ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80059bc:	e003      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80059c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80059c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ce:	f002 0320 	and.w	r3, r2, #32
 80059d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80059d6:	2300      	movs	r3, #0
 80059d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80059dc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80059e0:	460b      	mov	r3, r1
 80059e2:	4313      	orrs	r3, r2
 80059e4:	d055      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80059e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059f2:	d033      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80059f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059f8:	d82c      	bhi.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80059fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059fe:	d02f      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005a00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a04:	d826      	bhi.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005a06:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005a0a:	d02b      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005a0c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005a10:	d820      	bhi.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005a12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a16:	d012      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8005a18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a1c:	d81a      	bhi.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d022      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005a22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a26:	d115      	bne.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a2c:	3308      	adds	r3, #8
 8005a2e:	2100      	movs	r1, #0
 8005a30:	4618      	mov	r0, r3
 8005a32:	f001 fcc5 	bl	80073c0 <RCCEx_PLL2_Config>
 8005a36:	4603      	mov	r3, r0
 8005a38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005a3c:	e015      	b.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a42:	3328      	adds	r3, #40	@ 0x28
 8005a44:	2102      	movs	r1, #2
 8005a46:	4618      	mov	r0, r3
 8005a48:	f001 fd6c 	bl	8007524 <RCCEx_PLL3_Config>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005a52:	e00a      	b.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005a5a:	e006      	b.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005a5c:	bf00      	nop
 8005a5e:	e004      	b.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005a60:	bf00      	nop
 8005a62:	e002      	b.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005a64:	bf00      	nop
 8005a66:	e000      	b.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005a68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10b      	bne.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a72:	4b39      	ldr	r3, [pc, #228]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a76:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a82:	4a35      	ldr	r2, [pc, #212]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005a84:	430b      	orrs	r3, r1
 8005a86:	6553      	str	r3, [r2, #84]	@ 0x54
 8005a88:	e003      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a8e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005a9e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005aa8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005aac:	460b      	mov	r3, r1
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	d058      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ab6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005aba:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005abe:	d033      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8005ac0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005ac4:	d82c      	bhi.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005ac6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aca:	d02f      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005acc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ad0:	d826      	bhi.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005ad2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ad6:	d02b      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005ad8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005adc:	d820      	bhi.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005ade:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ae2:	d012      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8005ae4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ae8:	d81a      	bhi.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d022      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005aee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005af2:	d115      	bne.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005af8:	3308      	adds	r3, #8
 8005afa:	2100      	movs	r1, #0
 8005afc:	4618      	mov	r0, r3
 8005afe:	f001 fc5f 	bl	80073c0 <RCCEx_PLL2_Config>
 8005b02:	4603      	mov	r3, r0
 8005b04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005b08:	e015      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b0e:	3328      	adds	r3, #40	@ 0x28
 8005b10:	2102      	movs	r1, #2
 8005b12:	4618      	mov	r0, r3
 8005b14:	f001 fd06 	bl	8007524 <RCCEx_PLL3_Config>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005b1e:	e00a      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005b26:	e006      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005b28:	bf00      	nop
 8005b2a:	e004      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005b2c:	bf00      	nop
 8005b2e:	e002      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005b30:	bf00      	nop
 8005b32:	e000      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005b34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10e      	bne.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b3e:	4b06      	ldr	r3, [pc, #24]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b42:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b4e:	4a02      	ldr	r2, [pc, #8]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005b50:	430b      	orrs	r3, r1
 8005b52:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b54:	e006      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8005b56:	bf00      	nop
 8005b58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005b70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b74:	2300      	movs	r3, #0
 8005b76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005b7a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005b7e:	460b      	mov	r3, r1
 8005b80:	4313      	orrs	r3, r2
 8005b82:	d055      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b88:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b8c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005b90:	d033      	beq.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8005b92:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005b96:	d82c      	bhi.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005b98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b9c:	d02f      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005b9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ba2:	d826      	bhi.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005ba4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005ba8:	d02b      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005baa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005bae:	d820      	bhi.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005bb0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bb4:	d012      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005bb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bba:	d81a      	bhi.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d022      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005bc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bc4:	d115      	bne.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bca:	3308      	adds	r3, #8
 8005bcc:	2100      	movs	r1, #0
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f001 fbf6 	bl	80073c0 <RCCEx_PLL2_Config>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005bda:	e015      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005be0:	3328      	adds	r3, #40	@ 0x28
 8005be2:	2102      	movs	r1, #2
 8005be4:	4618      	mov	r0, r3
 8005be6:	f001 fc9d 	bl	8007524 <RCCEx_PLL3_Config>
 8005bea:	4603      	mov	r3, r0
 8005bec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005bf0:	e00a      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005bf8:	e006      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005bfa:	bf00      	nop
 8005bfc:	e004      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005bfe:	bf00      	nop
 8005c00:	e002      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005c02:	bf00      	nop
 8005c04:	e000      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005c06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d10b      	bne.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005c10:	4ba0      	ldr	r3, [pc, #640]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c14:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c20:	4a9c      	ldr	r2, [pc, #624]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005c22:	430b      	orrs	r3, r1
 8005c24:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c26:	e003      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c38:	f002 0308 	and.w	r3, r2, #8
 8005c3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c40:	2300      	movs	r3, #0
 8005c42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005c46:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	d01e      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8005c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c5c:	d10c      	bne.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c62:	3328      	adds	r3, #40	@ 0x28
 8005c64:	2102      	movs	r1, #2
 8005c66:	4618      	mov	r0, r3
 8005c68:	f001 fc5c 	bl	8007524 <RCCEx_PLL3_Config>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d002      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005c78:	4b86      	ldr	r3, [pc, #536]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c7c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c88:	4a82      	ldr	r2, [pc, #520]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005c8a:	430b      	orrs	r3, r1
 8005c8c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c96:	f002 0310 	and.w	r3, r2, #16
 8005c9a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ca4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005ca8:	460b      	mov	r3, r1
 8005caa:	4313      	orrs	r3, r2
 8005cac:	d01e      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cba:	d10c      	bne.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cc0:	3328      	adds	r3, #40	@ 0x28
 8005cc2:	2102      	movs	r1, #2
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f001 fc2d 	bl	8007524 <RCCEx_PLL3_Config>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d002      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005cd6:	4b6f      	ldr	r3, [pc, #444]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cda:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ce6:	4a6b      	ldr	r2, [pc, #428]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005ce8:	430b      	orrs	r3, r1
 8005cea:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005cf8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005cfe:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005d02:	460b      	mov	r3, r1
 8005d04:	4313      	orrs	r3, r2
 8005d06:	d03e      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005d10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d14:	d022      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005d16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d1a:	d81b      	bhi.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d003      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8005d20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d24:	d00b      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8005d26:	e015      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d2c:	3308      	adds	r3, #8
 8005d2e:	2100      	movs	r1, #0
 8005d30:	4618      	mov	r0, r3
 8005d32:	f001 fb45 	bl	80073c0 <RCCEx_PLL2_Config>
 8005d36:	4603      	mov	r3, r0
 8005d38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005d3c:	e00f      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d42:	3328      	adds	r3, #40	@ 0x28
 8005d44:	2102      	movs	r1, #2
 8005d46:	4618      	mov	r0, r3
 8005d48:	f001 fbec 	bl	8007524 <RCCEx_PLL3_Config>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005d52:	e004      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005d5a:	e000      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8005d5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10b      	bne.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d66:	4b4b      	ldr	r3, [pc, #300]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d6a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005d76:	4a47      	ldr	r2, [pc, #284]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005d78:	430b      	orrs	r3, r1
 8005d7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d7c:	e003      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d82:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005d92:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d94:	2300      	movs	r3, #0
 8005d96:	677b      	str	r3, [r7, #116]	@ 0x74
 8005d98:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	d03b      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005da6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005daa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005dae:	d01f      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005db0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005db4:	d818      	bhi.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005db6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005dba:	d003      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8005dbc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005dc0:	d007      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8005dc2:	e011      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dc4:	4b33      	ldr	r3, [pc, #204]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dc8:	4a32      	ldr	r2, [pc, #200]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005dca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005dd0:	e00f      	b.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dd6:	3328      	adds	r3, #40	@ 0x28
 8005dd8:	2101      	movs	r1, #1
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f001 fba2 	bl	8007524 <RCCEx_PLL3_Config>
 8005de0:	4603      	mov	r3, r0
 8005de2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8005de6:	e004      	b.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005dee:	e000      	b.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8005df0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005df2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d10b      	bne.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005dfa:	4b26      	ldr	r3, [pc, #152]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dfe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e0a:	4a22      	ldr	r2, [pc, #136]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005e0c:	430b      	orrs	r3, r1
 8005e0e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005e10:	e003      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e16:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e22:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005e26:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e28:	2300      	movs	r3, #0
 8005e2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e2c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005e30:	460b      	mov	r3, r1
 8005e32:	4313      	orrs	r3, r2
 8005e34:	d034      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d003      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8005e40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e44:	d007      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8005e46:	e011      	b.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e48:	4b12      	ldr	r3, [pc, #72]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e4c:	4a11      	ldr	r2, [pc, #68]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005e4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005e54:	e00e      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e5a:	3308      	adds	r3, #8
 8005e5c:	2102      	movs	r1, #2
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f001 faae 	bl	80073c0 <RCCEx_PLL2_Config>
 8005e64:	4603      	mov	r3, r0
 8005e66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005e6a:	e003      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10d      	bne.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005e7c:	4b05      	ldr	r3, [pc, #20]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005e7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e80:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e8a:	4a02      	ldr	r2, [pc, #8]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005e8c:	430b      	orrs	r3, r1
 8005e8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e90:	e006      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8005e92:	bf00      	nop
 8005e94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005eac:	663b      	str	r3, [r7, #96]	@ 0x60
 8005eae:	2300      	movs	r3, #0
 8005eb0:	667b      	str	r3, [r7, #100]	@ 0x64
 8005eb2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	d00c      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ec0:	3328      	adds	r3, #40	@ 0x28
 8005ec2:	2102      	movs	r1, #2
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f001 fb2d 	bl	8007524 <RCCEx_PLL3_Config>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d002      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ede:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005ee2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ee8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005eec:	460b      	mov	r3, r1
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	d036      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ef6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ef8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005efc:	d018      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8005efe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f02:	d811      	bhi.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005f04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f08:	d014      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8005f0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f0e:	d80b      	bhi.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d011      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005f14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f18:	d106      	bne.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f1a:	4bb7      	ldr	r3, [pc, #732]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f1e:	4ab6      	ldr	r2, [pc, #728]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005f26:	e008      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f2e:	e004      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005f30:	bf00      	nop
 8005f32:	e002      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005f34:	bf00      	nop
 8005f36:	e000      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005f38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10a      	bne.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f42:	4bad      	ldr	r3, [pc, #692]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f46:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f50:	4aa9      	ldr	r2, [pc, #676]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f52:	430b      	orrs	r3, r1
 8005f54:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f56:	e003      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f68:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005f6c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f6e:	2300      	movs	r3, #0
 8005f70:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f72:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005f76:	460b      	mov	r3, r1
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	d009      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005f7c:	4b9e      	ldr	r3, [pc, #632]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f80:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f8a:	4a9b      	ldr	r2, [pc, #620]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f8c:	430b      	orrs	r3, r1
 8005f8e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f98:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005f9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fa2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	d009      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005fac:	4b92      	ldr	r3, [pc, #584]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005fae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fb0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fba:	4a8f      	ldr	r2, [pc, #572]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005fbc:	430b      	orrs	r3, r1
 8005fbe:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005fcc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fce:	2300      	movs	r3, #0
 8005fd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fd2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	d00e      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005fdc:	4b86      	ldr	r3, [pc, #536]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	4a85      	ldr	r2, [pc, #532]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005fe2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005fe6:	6113      	str	r3, [r2, #16]
 8005fe8:	4b83      	ldr	r3, [pc, #524]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005fea:	6919      	ldr	r1, [r3, #16]
 8005fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ff0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005ff4:	4a80      	ldr	r2, [pc, #512]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005ff6:	430b      	orrs	r3, r1
 8005ff8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006002:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006006:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006008:	2300      	movs	r3, #0
 800600a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800600c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006010:	460b      	mov	r3, r1
 8006012:	4313      	orrs	r3, r2
 8006014:	d009      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006016:	4b78      	ldr	r3, [pc, #480]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800601a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800601e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006024:	4a74      	ldr	r2, [pc, #464]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006026:	430b      	orrs	r3, r1
 8006028:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800602a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800602e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006032:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006036:	633b      	str	r3, [r7, #48]	@ 0x30
 8006038:	2300      	movs	r3, #0
 800603a:	637b      	str	r3, [r7, #52]	@ 0x34
 800603c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006040:	460b      	mov	r3, r1
 8006042:	4313      	orrs	r3, r2
 8006044:	d00a      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006046:	4b6c      	ldr	r3, [pc, #432]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800604a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800604e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006056:	4a68      	ldr	r2, [pc, #416]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006058:	430b      	orrs	r3, r1
 800605a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800605c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006064:	2100      	movs	r1, #0
 8006066:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006068:	f003 0301 	and.w	r3, r3, #1
 800606c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800606e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006072:	460b      	mov	r3, r1
 8006074:	4313      	orrs	r3, r2
 8006076:	d011      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800607c:	3308      	adds	r3, #8
 800607e:	2100      	movs	r1, #0
 8006080:	4618      	mov	r0, r3
 8006082:	f001 f99d 	bl	80073c0 <RCCEx_PLL2_Config>
 8006086:	4603      	mov	r3, r0
 8006088:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800608c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006090:	2b00      	cmp	r3, #0
 8006092:	d003      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006094:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006098:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800609c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a4:	2100      	movs	r1, #0
 80060a6:	6239      	str	r1, [r7, #32]
 80060a8:	f003 0302 	and.w	r3, r3, #2
 80060ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80060ae:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80060b2:	460b      	mov	r3, r1
 80060b4:	4313      	orrs	r3, r2
 80060b6:	d011      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060bc:	3308      	adds	r3, #8
 80060be:	2101      	movs	r1, #1
 80060c0:	4618      	mov	r0, r3
 80060c2:	f001 f97d 	bl	80073c0 <RCCEx_PLL2_Config>
 80060c6:	4603      	mov	r3, r0
 80060c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80060cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d003      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80060dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e4:	2100      	movs	r1, #0
 80060e6:	61b9      	str	r1, [r7, #24]
 80060e8:	f003 0304 	and.w	r3, r3, #4
 80060ec:	61fb      	str	r3, [r7, #28]
 80060ee:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80060f2:	460b      	mov	r3, r1
 80060f4:	4313      	orrs	r3, r2
 80060f6:	d011      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060fc:	3308      	adds	r3, #8
 80060fe:	2102      	movs	r1, #2
 8006100:	4618      	mov	r0, r3
 8006102:	f001 f95d 	bl	80073c0 <RCCEx_PLL2_Config>
 8006106:	4603      	mov	r3, r0
 8006108:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800610c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006110:	2b00      	cmp	r3, #0
 8006112:	d003      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006114:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006118:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800611c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006124:	2100      	movs	r1, #0
 8006126:	6139      	str	r1, [r7, #16]
 8006128:	f003 0308 	and.w	r3, r3, #8
 800612c:	617b      	str	r3, [r7, #20]
 800612e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006132:	460b      	mov	r3, r1
 8006134:	4313      	orrs	r3, r2
 8006136:	d011      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800613c:	3328      	adds	r3, #40	@ 0x28
 800613e:	2100      	movs	r1, #0
 8006140:	4618      	mov	r0, r3
 8006142:	f001 f9ef 	bl	8007524 <RCCEx_PLL3_Config>
 8006146:	4603      	mov	r3, r0
 8006148:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800614c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006150:	2b00      	cmp	r3, #0
 8006152:	d003      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006154:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006158:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800615c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006164:	2100      	movs	r1, #0
 8006166:	60b9      	str	r1, [r7, #8]
 8006168:	f003 0310 	and.w	r3, r3, #16
 800616c:	60fb      	str	r3, [r7, #12]
 800616e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006172:	460b      	mov	r3, r1
 8006174:	4313      	orrs	r3, r2
 8006176:	d011      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800617c:	3328      	adds	r3, #40	@ 0x28
 800617e:	2101      	movs	r1, #1
 8006180:	4618      	mov	r0, r3
 8006182:	f001 f9cf 	bl	8007524 <RCCEx_PLL3_Config>
 8006186:	4603      	mov	r3, r0
 8006188:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800618c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006190:	2b00      	cmp	r3, #0
 8006192:	d003      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006194:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006198:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800619c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a4:	2100      	movs	r1, #0
 80061a6:	6039      	str	r1, [r7, #0]
 80061a8:	f003 0320 	and.w	r3, r3, #32
 80061ac:	607b      	str	r3, [r7, #4]
 80061ae:	e9d7 1200 	ldrd	r1, r2, [r7]
 80061b2:	460b      	mov	r3, r1
 80061b4:	4313      	orrs	r3, r2
 80061b6:	d011      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061bc:	3328      	adds	r3, #40	@ 0x28
 80061be:	2102      	movs	r1, #2
 80061c0:	4618      	mov	r0, r3
 80061c2:	f001 f9af 	bl	8007524 <RCCEx_PLL3_Config>
 80061c6:	4603      	mov	r3, r0
 80061c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80061cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d003      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80061dc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d101      	bne.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80061e4:	2300      	movs	r3, #0
 80061e6:	e000      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80061f0:	46bd      	mov	sp, r7
 80061f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061f6:	bf00      	nop
 80061f8:	58024400 	.word	0x58024400

080061fc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b090      	sub	sp, #64	@ 0x40
 8006200:	af00      	add	r7, sp, #0
 8006202:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006206:	e9d7 2300 	ldrd	r2, r3, [r7]
 800620a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800620e:	430b      	orrs	r3, r1
 8006210:	f040 8094 	bne.w	800633c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006214:	4b9b      	ldr	r3, [pc, #620]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006216:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006218:	f003 0307 	and.w	r3, r3, #7
 800621c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800621e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006220:	2b04      	cmp	r3, #4
 8006222:	f200 8087 	bhi.w	8006334 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006226:	a201      	add	r2, pc, #4	@ (adr r2, 800622c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622c:	08006241 	.word	0x08006241
 8006230:	08006269 	.word	0x08006269
 8006234:	08006291 	.word	0x08006291
 8006238:	0800632d 	.word	0x0800632d
 800623c:	080062b9 	.word	0x080062b9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006240:	4b90      	ldr	r3, [pc, #576]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006248:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800624c:	d108      	bne.n	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800624e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006252:	4618      	mov	r0, r3
 8006254:	f000 ff62 	bl	800711c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800625a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800625c:	f000 bc93 	b.w	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006260:	2300      	movs	r3, #0
 8006262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006264:	f000 bc8f 	b.w	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006268:	4b86      	ldr	r3, [pc, #536]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006270:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006274:	d108      	bne.n	8006288 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006276:	f107 0318 	add.w	r3, r7, #24
 800627a:	4618      	mov	r0, r3
 800627c:	f000 fca6 	bl	8006bcc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006284:	f000 bc7f 	b.w	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006288:	2300      	movs	r3, #0
 800628a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800628c:	f000 bc7b 	b.w	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006290:	4b7c      	ldr	r3, [pc, #496]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006298:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800629c:	d108      	bne.n	80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800629e:	f107 030c 	add.w	r3, r7, #12
 80062a2:	4618      	mov	r0, r3
 80062a4:	f000 fde6 	bl	8006e74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80062ac:	f000 bc6b 	b.w	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80062b0:	2300      	movs	r3, #0
 80062b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062b4:	f000 bc67 	b.w	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80062b8:	4b72      	ldr	r3, [pc, #456]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80062ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80062c0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80062c2:	4b70      	ldr	r3, [pc, #448]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0304 	and.w	r3, r3, #4
 80062ca:	2b04      	cmp	r3, #4
 80062cc:	d10c      	bne.n	80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80062ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d109      	bne.n	80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062d4:	4b6b      	ldr	r3, [pc, #428]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	08db      	lsrs	r3, r3, #3
 80062da:	f003 0303 	and.w	r3, r3, #3
 80062de:	4a6a      	ldr	r2, [pc, #424]	@ (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80062e0:	fa22 f303 	lsr.w	r3, r2, r3
 80062e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062e6:	e01f      	b.n	8006328 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80062e8:	4b66      	ldr	r3, [pc, #408]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062f4:	d106      	bne.n	8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80062f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062fc:	d102      	bne.n	8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80062fe:	4b63      	ldr	r3, [pc, #396]	@ (800648c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006300:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006302:	e011      	b.n	8006328 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006304:	4b5f      	ldr	r3, [pc, #380]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800630c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006310:	d106      	bne.n	8006320 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006314:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006318:	d102      	bne.n	8006320 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800631a:	4b5d      	ldr	r3, [pc, #372]	@ (8006490 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800631c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800631e:	e003      	b.n	8006328 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006320:	2300      	movs	r3, #0
 8006322:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006324:	f000 bc2f 	b.w	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006328:	f000 bc2d 	b.w	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800632c:	4b59      	ldr	r3, [pc, #356]	@ (8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800632e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006330:	f000 bc29 	b.w	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006334:	2300      	movs	r3, #0
 8006336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006338:	f000 bc25 	b.w	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800633c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006340:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006344:	430b      	orrs	r3, r1
 8006346:	f040 80a7 	bne.w	8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800634a:	4b4e      	ldr	r3, [pc, #312]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800634c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800634e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8006352:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006356:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800635a:	d054      	beq.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800635c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800635e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006362:	f200 808b 	bhi.w	800647c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8006366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006368:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800636c:	f000 8083 	beq.w	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8006370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006372:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006376:	f200 8081 	bhi.w	800647c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800637a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006380:	d02f      	beq.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006384:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006388:	d878      	bhi.n	800647c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800638a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800638c:	2b00      	cmp	r3, #0
 800638e:	d004      	beq.n	800639a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8006390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006392:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006396:	d012      	beq.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8006398:	e070      	b.n	800647c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800639a:	4b3a      	ldr	r3, [pc, #232]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063a6:	d107      	bne.n	80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80063a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80063ac:	4618      	mov	r0, r3
 80063ae:	f000 feb5 	bl	800711c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80063b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063b6:	e3e6      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80063b8:	2300      	movs	r3, #0
 80063ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063bc:	e3e3      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80063be:	4b31      	ldr	r3, [pc, #196]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063ca:	d107      	bne.n	80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063cc:	f107 0318 	add.w	r3, r7, #24
 80063d0:	4618      	mov	r0, r3
 80063d2:	f000 fbfb 	bl	8006bcc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063da:	e3d4      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80063dc:	2300      	movs	r3, #0
 80063de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063e0:	e3d1      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80063e2:	4b28      	ldr	r3, [pc, #160]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80063ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063ee:	d107      	bne.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063f0:	f107 030c 	add.w	r3, r7, #12
 80063f4:	4618      	mov	r0, r3
 80063f6:	f000 fd3d 	bl	8006e74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063fe:	e3c2      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006400:	2300      	movs	r3, #0
 8006402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006404:	e3bf      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006406:	4b1f      	ldr	r3, [pc, #124]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800640a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800640e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006410:	4b1c      	ldr	r3, [pc, #112]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0304 	and.w	r3, r3, #4
 8006418:	2b04      	cmp	r3, #4
 800641a:	d10c      	bne.n	8006436 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800641c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800641e:	2b00      	cmp	r3, #0
 8006420:	d109      	bne.n	8006436 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006422:	4b18      	ldr	r3, [pc, #96]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	08db      	lsrs	r3, r3, #3
 8006428:	f003 0303 	and.w	r3, r3, #3
 800642c:	4a16      	ldr	r2, [pc, #88]	@ (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800642e:	fa22 f303 	lsr.w	r3, r2, r3
 8006432:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006434:	e01e      	b.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006436:	4b13      	ldr	r3, [pc, #76]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800643e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006442:	d106      	bne.n	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8006444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006446:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800644a:	d102      	bne.n	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800644c:	4b0f      	ldr	r3, [pc, #60]	@ (800648c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800644e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006450:	e010      	b.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006452:	4b0c      	ldr	r3, [pc, #48]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800645a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800645e:	d106      	bne.n	800646e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8006460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006462:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006466:	d102      	bne.n	800646e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006468:	4b09      	ldr	r3, [pc, #36]	@ (8006490 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800646a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800646c:	e002      	b.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800646e:	2300      	movs	r3, #0
 8006470:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006472:	e388      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006474:	e387      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006476:	4b07      	ldr	r3, [pc, #28]	@ (8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006478:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800647a:	e384      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800647c:	2300      	movs	r3, #0
 800647e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006480:	e381      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006482:	bf00      	nop
 8006484:	58024400 	.word	0x58024400
 8006488:	03d09000 	.word	0x03d09000
 800648c:	003d0900 	.word	0x003d0900
 8006490:	017d7840 	.word	0x017d7840
 8006494:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006498:	e9d7 2300 	ldrd	r2, r3, [r7]
 800649c:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80064a0:	430b      	orrs	r3, r1
 80064a2:	f040 809c 	bne.w	80065de <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80064a6:	4b9e      	ldr	r3, [pc, #632]	@ (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80064a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064aa:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80064ae:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80064b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80064b6:	d054      	beq.n	8006562 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80064b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80064be:	f200 808b 	bhi.w	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80064c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80064c8:	f000 8083 	beq.w	80065d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80064cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ce:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80064d2:	f200 8081 	bhi.w	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80064d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064dc:	d02f      	beq.n	800653e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80064de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064e4:	d878      	bhi.n	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80064e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d004      	beq.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80064ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80064f2:	d012      	beq.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80064f4:	e070      	b.n	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80064f6:	4b8a      	ldr	r3, [pc, #552]	@ (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006502:	d107      	bne.n	8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006504:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006508:	4618      	mov	r0, r3
 800650a:	f000 fe07 	bl	800711c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800650e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006510:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006512:	e338      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006514:	2300      	movs	r3, #0
 8006516:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006518:	e335      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800651a:	4b81      	ldr	r3, [pc, #516]	@ (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006522:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006526:	d107      	bne.n	8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006528:	f107 0318 	add.w	r3, r7, #24
 800652c:	4618      	mov	r0, r3
 800652e:	f000 fb4d 	bl	8006bcc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006536:	e326      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006538:	2300      	movs	r3, #0
 800653a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800653c:	e323      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800653e:	4b78      	ldr	r3, [pc, #480]	@ (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006546:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800654a:	d107      	bne.n	800655c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800654c:	f107 030c 	add.w	r3, r7, #12
 8006550:	4618      	mov	r0, r3
 8006552:	f000 fc8f 	bl	8006e74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800655a:	e314      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800655c:	2300      	movs	r3, #0
 800655e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006560:	e311      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006562:	4b6f      	ldr	r3, [pc, #444]	@ (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006566:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800656a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800656c:	4b6c      	ldr	r3, [pc, #432]	@ (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0304 	and.w	r3, r3, #4
 8006574:	2b04      	cmp	r3, #4
 8006576:	d10c      	bne.n	8006592 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8006578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800657a:	2b00      	cmp	r3, #0
 800657c:	d109      	bne.n	8006592 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800657e:	4b68      	ldr	r3, [pc, #416]	@ (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	08db      	lsrs	r3, r3, #3
 8006584:	f003 0303 	and.w	r3, r3, #3
 8006588:	4a66      	ldr	r2, [pc, #408]	@ (8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800658a:	fa22 f303 	lsr.w	r3, r2, r3
 800658e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006590:	e01e      	b.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006592:	4b63      	ldr	r3, [pc, #396]	@ (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800659a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800659e:	d106      	bne.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80065a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065a6:	d102      	bne.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80065a8:	4b5f      	ldr	r3, [pc, #380]	@ (8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80065aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065ac:	e010      	b.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80065ae:	4b5c      	ldr	r3, [pc, #368]	@ (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065ba:	d106      	bne.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80065bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065c2:	d102      	bne.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80065c4:	4b59      	ldr	r3, [pc, #356]	@ (800672c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80065c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065c8:	e002      	b.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80065ca:	2300      	movs	r3, #0
 80065cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80065ce:	e2da      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80065d0:	e2d9      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80065d2:	4b57      	ldr	r3, [pc, #348]	@ (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80065d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065d6:	e2d6      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80065d8:	2300      	movs	r3, #0
 80065da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065dc:	e2d3      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80065de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065e2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80065e6:	430b      	orrs	r3, r1
 80065e8:	f040 80a7 	bne.w	800673a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80065ec:	4b4c      	ldr	r3, [pc, #304]	@ (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80065ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065f0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80065f4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80065f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065fc:	d055      	beq.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 80065fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006600:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006604:	f200 8096 	bhi.w	8006734 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8006608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800660a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800660e:	f000 8084 	beq.w	800671a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8006612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006614:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006618:	f200 808c 	bhi.w	8006734 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800661c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800661e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006622:	d030      	beq.n	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006626:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800662a:	f200 8083 	bhi.w	8006734 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800662e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006630:	2b00      	cmp	r3, #0
 8006632:	d004      	beq.n	800663e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8006634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006636:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800663a:	d012      	beq.n	8006662 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800663c:	e07a      	b.n	8006734 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800663e:	4b38      	ldr	r3, [pc, #224]	@ (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006646:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800664a:	d107      	bne.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800664c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006650:	4618      	mov	r0, r3
 8006652:	f000 fd63 	bl	800711c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006658:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800665a:	e294      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800665c:	2300      	movs	r3, #0
 800665e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006660:	e291      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006662:	4b2f      	ldr	r3, [pc, #188]	@ (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800666a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800666e:	d107      	bne.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006670:	f107 0318 	add.w	r3, r7, #24
 8006674:	4618      	mov	r0, r3
 8006676:	f000 faa9 	bl	8006bcc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800667e:	e282      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006680:	2300      	movs	r3, #0
 8006682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006684:	e27f      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006686:	4b26      	ldr	r3, [pc, #152]	@ (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800668e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006692:	d107      	bne.n	80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006694:	f107 030c 	add.w	r3, r7, #12
 8006698:	4618      	mov	r0, r3
 800669a:	f000 fbeb 	bl	8006e74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066a2:	e270      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80066a4:	2300      	movs	r3, #0
 80066a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066a8:	e26d      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80066aa:	4b1d      	ldr	r3, [pc, #116]	@ (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80066ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80066b2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80066b4:	4b1a      	ldr	r3, [pc, #104]	@ (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0304 	and.w	r3, r3, #4
 80066bc:	2b04      	cmp	r3, #4
 80066be:	d10c      	bne.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80066c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d109      	bne.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066c6:	4b16      	ldr	r3, [pc, #88]	@ (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	08db      	lsrs	r3, r3, #3
 80066cc:	f003 0303 	and.w	r3, r3, #3
 80066d0:	4a14      	ldr	r2, [pc, #80]	@ (8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80066d2:	fa22 f303 	lsr.w	r3, r2, r3
 80066d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066d8:	e01e      	b.n	8006718 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80066da:	4b11      	ldr	r3, [pc, #68]	@ (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066e6:	d106      	bne.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80066e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066ee:	d102      	bne.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80066f0:	4b0d      	ldr	r3, [pc, #52]	@ (8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80066f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066f4:	e010      	b.n	8006718 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80066f6:	4b0a      	ldr	r3, [pc, #40]	@ (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006702:	d106      	bne.n	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8006704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006706:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800670a:	d102      	bne.n	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800670c:	4b07      	ldr	r3, [pc, #28]	@ (800672c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800670e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006710:	e002      	b.n	8006718 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006712:	2300      	movs	r3, #0
 8006714:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006716:	e236      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006718:	e235      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800671a:	4b05      	ldr	r3, [pc, #20]	@ (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800671c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800671e:	e232      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006720:	58024400 	.word	0x58024400
 8006724:	03d09000 	.word	0x03d09000
 8006728:	003d0900 	.word	0x003d0900
 800672c:	017d7840 	.word	0x017d7840
 8006730:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8006734:	2300      	movs	r3, #0
 8006736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006738:	e225      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800673a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800673e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006742:	430b      	orrs	r3, r1
 8006744:	f040 8085 	bne.w	8006852 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006748:	4b9c      	ldr	r3, [pc, #624]	@ (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800674a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800674c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006750:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006754:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006758:	d06b      	beq.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800675a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800675c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006760:	d874      	bhi.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006764:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006768:	d056      	beq.n	8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800676a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800676c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006770:	d86c      	bhi.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006774:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006778:	d03b      	beq.n	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800677a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800677c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006780:	d864      	bhi.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006784:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006788:	d021      	beq.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800678a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800678c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006790:	d85c      	bhi.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006794:	2b00      	cmp	r3, #0
 8006796:	d004      	beq.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8006798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800679a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800679e:	d004      	beq.n	80067aa <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 80067a0:	e054      	b.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80067a2:	f7fe fb75 	bl	8004e90 <HAL_RCC_GetPCLK1Freq>
 80067a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80067a8:	e1ed      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067aa:	4b84      	ldr	r3, [pc, #528]	@ (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067b6:	d107      	bne.n	80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067b8:	f107 0318 	add.w	r3, r7, #24
 80067bc:	4618      	mov	r0, r3
 80067be:	f000 fa05 	bl	8006bcc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067c6:	e1de      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80067c8:	2300      	movs	r3, #0
 80067ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067cc:	e1db      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80067ce:	4b7b      	ldr	r3, [pc, #492]	@ (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80067d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067da:	d107      	bne.n	80067ec <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067dc:	f107 030c 	add.w	r3, r7, #12
 80067e0:	4618      	mov	r0, r3
 80067e2:	f000 fb47 	bl	8006e74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067ea:	e1cc      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80067ec:	2300      	movs	r3, #0
 80067ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067f0:	e1c9      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067f2:	4b72      	ldr	r3, [pc, #456]	@ (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 0304 	and.w	r3, r3, #4
 80067fa:	2b04      	cmp	r3, #4
 80067fc:	d109      	bne.n	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067fe:	4b6f      	ldr	r3, [pc, #444]	@ (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	08db      	lsrs	r3, r3, #3
 8006804:	f003 0303 	and.w	r3, r3, #3
 8006808:	4a6d      	ldr	r2, [pc, #436]	@ (80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800680a:	fa22 f303 	lsr.w	r3, r2, r3
 800680e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006810:	e1b9      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006812:	2300      	movs	r3, #0
 8006814:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006816:	e1b6      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006818:	4b68      	ldr	r3, [pc, #416]	@ (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006820:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006824:	d102      	bne.n	800682c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8006826:	4b67      	ldr	r3, [pc, #412]	@ (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8006828:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800682a:	e1ac      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800682c:	2300      	movs	r3, #0
 800682e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006830:	e1a9      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006832:	4b62      	ldr	r3, [pc, #392]	@ (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800683a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800683e:	d102      	bne.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8006840:	4b61      	ldr	r3, [pc, #388]	@ (80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006844:	e19f      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006846:	2300      	movs	r3, #0
 8006848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800684a:	e19c      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800684c:	2300      	movs	r3, #0
 800684e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006850:	e199      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006852:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006856:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800685a:	430b      	orrs	r3, r1
 800685c:	d173      	bne.n	8006946 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800685e:	4b57      	ldr	r3, [pc, #348]	@ (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006862:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006866:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800686a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800686e:	d02f      	beq.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8006870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006872:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006876:	d863      	bhi.n	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8006878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800687a:	2b00      	cmp	r3, #0
 800687c:	d004      	beq.n	8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800687e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006880:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006884:	d012      	beq.n	80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8006886:	e05b      	b.n	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006888:	4b4c      	ldr	r3, [pc, #304]	@ (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006890:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006894:	d107      	bne.n	80068a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006896:	f107 0318 	add.w	r3, r7, #24
 800689a:	4618      	mov	r0, r3
 800689c:	f000 f996 	bl	8006bcc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068a4:	e16f      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80068a6:	2300      	movs	r3, #0
 80068a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068aa:	e16c      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80068ac:	4b43      	ldr	r3, [pc, #268]	@ (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068b8:	d107      	bne.n	80068ca <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068ba:	f107 030c 	add.w	r3, r7, #12
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 fad8 	bl	8006e74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068c8:	e15d      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80068ca:	2300      	movs	r3, #0
 80068cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068ce:	e15a      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80068d0:	4b3a      	ldr	r3, [pc, #232]	@ (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80068d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80068d8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80068da:	4b38      	ldr	r3, [pc, #224]	@ (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0304 	and.w	r3, r3, #4
 80068e2:	2b04      	cmp	r3, #4
 80068e4:	d10c      	bne.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80068e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d109      	bne.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068ec:	4b33      	ldr	r3, [pc, #204]	@ (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	08db      	lsrs	r3, r3, #3
 80068f2:	f003 0303 	and.w	r3, r3, #3
 80068f6:	4a32      	ldr	r2, [pc, #200]	@ (80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80068f8:	fa22 f303 	lsr.w	r3, r2, r3
 80068fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068fe:	e01e      	b.n	800693e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006900:	4b2e      	ldr	r3, [pc, #184]	@ (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006908:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800690c:	d106      	bne.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800690e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006910:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006914:	d102      	bne.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006916:	4b2b      	ldr	r3, [pc, #172]	@ (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8006918:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800691a:	e010      	b.n	800693e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800691c:	4b27      	ldr	r3, [pc, #156]	@ (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006924:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006928:	d106      	bne.n	8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800692a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800692c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006930:	d102      	bne.n	8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006932:	4b25      	ldr	r3, [pc, #148]	@ (80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006934:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006936:	e002      	b.n	800693e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006938:	2300      	movs	r3, #0
 800693a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800693c:	e123      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800693e:	e122      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006940:	2300      	movs	r3, #0
 8006942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006944:	e11f      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006946:	e9d7 2300 	ldrd	r2, r3, [r7]
 800694a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800694e:	430b      	orrs	r3, r1
 8006950:	d13c      	bne.n	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006952:	4b1a      	ldr	r3, [pc, #104]	@ (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006956:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800695a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800695c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800695e:	2b00      	cmp	r3, #0
 8006960:	d004      	beq.n	800696c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8006962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006964:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006968:	d012      	beq.n	8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800696a:	e023      	b.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800696c:	4b13      	ldr	r3, [pc, #76]	@ (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006974:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006978:	d107      	bne.n	800698a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800697a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800697e:	4618      	mov	r0, r3
 8006980:	f000 fbcc 	bl	800711c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006988:	e0fd      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800698a:	2300      	movs	r3, #0
 800698c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800698e:	e0fa      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006990:	4b0a      	ldr	r3, [pc, #40]	@ (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006998:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800699c:	d107      	bne.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800699e:	f107 0318 	add.w	r3, r7, #24
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 f912 	bl	8006bcc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80069a8:	6a3b      	ldr	r3, [r7, #32]
 80069aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069ac:	e0eb      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80069ae:	2300      	movs	r3, #0
 80069b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069b2:	e0e8      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80069b4:	2300      	movs	r3, #0
 80069b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069b8:	e0e5      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80069ba:	bf00      	nop
 80069bc:	58024400 	.word	0x58024400
 80069c0:	03d09000 	.word	0x03d09000
 80069c4:	003d0900 	.word	0x003d0900
 80069c8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80069cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069d0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80069d4:	430b      	orrs	r3, r1
 80069d6:	f040 8085 	bne.w	8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80069da:	4b6d      	ldr	r3, [pc, #436]	@ (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80069dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069de:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80069e2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80069e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80069ea:	d06b      	beq.n	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 80069ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80069f2:	d874      	bhi.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80069f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069fa:	d056      	beq.n	8006aaa <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 80069fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a02:	d86c      	bhi.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a06:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006a0a:	d03b      	beq.n	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8006a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a0e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006a12:	d864      	bhi.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a1a:	d021      	beq.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8006a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a22:	d85c      	bhi.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d004      	beq.n	8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8006a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a30:	d004      	beq.n	8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8006a32:	e054      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006a34:	f000 f8b4 	bl	8006ba0 <HAL_RCCEx_GetD3PCLK1Freq>
 8006a38:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006a3a:	e0a4      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a3c:	4b54      	ldr	r3, [pc, #336]	@ (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a48:	d107      	bne.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a4a:	f107 0318 	add.w	r3, r7, #24
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f000 f8bc 	bl	8006bcc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a58:	e095      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a5e:	e092      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a60:	4b4b      	ldr	r3, [pc, #300]	@ (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a6c:	d107      	bne.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a6e:	f107 030c 	add.w	r3, r7, #12
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 f9fe 	bl	8006e74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a7c:	e083      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a82:	e080      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a84:	4b42      	ldr	r3, [pc, #264]	@ (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0304 	and.w	r3, r3, #4
 8006a8c:	2b04      	cmp	r3, #4
 8006a8e:	d109      	bne.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a90:	4b3f      	ldr	r3, [pc, #252]	@ (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	08db      	lsrs	r3, r3, #3
 8006a96:	f003 0303 	and.w	r3, r3, #3
 8006a9a:	4a3e      	ldr	r2, [pc, #248]	@ (8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8006a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8006aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006aa2:	e070      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006aa8:	e06d      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006aaa:	4b39      	ldr	r3, [pc, #228]	@ (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ab2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ab6:	d102      	bne.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8006ab8:	4b37      	ldr	r3, [pc, #220]	@ (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006abc:	e063      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ac2:	e060      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006ac4:	4b32      	ldr	r3, [pc, #200]	@ (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006acc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ad0:	d102      	bne.n	8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8006ad2:	4b32      	ldr	r3, [pc, #200]	@ (8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ad6:	e056      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006adc:	e053      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ae2:	e050      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006ae4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ae8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006aec:	430b      	orrs	r3, r1
 8006aee:	d148      	bne.n	8006b82 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006af0:	4b27      	ldr	r3, [pc, #156]	@ (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006af2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006af4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006af8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006afc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b00:	d02a      	beq.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8006b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b08:	d838      	bhi.n	8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8006b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d004      	beq.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8006b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b16:	d00d      	beq.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8006b18:	e030      	b.n	8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b26:	d102      	bne.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8006b28:	4b1c      	ldr	r3, [pc, #112]	@ (8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b2c:	e02b      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b32:	e028      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b34:	4b16      	ldr	r3, [pc, #88]	@ (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b40:	d107      	bne.n	8006b52 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 fae8 	bl	800711c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b50:	e019      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006b52:	2300      	movs	r3, #0
 8006b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b56:	e016      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b58:	4b0d      	ldr	r3, [pc, #52]	@ (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b64:	d107      	bne.n	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b66:	f107 0318 	add.w	r3, r7, #24
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 f82e 	bl	8006bcc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b74:	e007      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006b76:	2300      	movs	r3, #0
 8006b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b7a:	e004      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b80:	e001      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8006b82:	2300      	movs	r3, #0
 8006b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8006b86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3740      	adds	r7, #64	@ 0x40
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	58024400 	.word	0x58024400
 8006b94:	03d09000 	.word	0x03d09000
 8006b98:	003d0900 	.word	0x003d0900
 8006b9c:	017d7840 	.word	0x017d7840

08006ba0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006ba4:	f7fe f944 	bl	8004e30 <HAL_RCC_GetHCLKFreq>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	4b06      	ldr	r3, [pc, #24]	@ (8006bc4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	091b      	lsrs	r3, r3, #4
 8006bb0:	f003 0307 	and.w	r3, r3, #7
 8006bb4:	4904      	ldr	r1, [pc, #16]	@ (8006bc8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006bb6:	5ccb      	ldrb	r3, [r1, r3]
 8006bb8:	f003 031f 	and.w	r3, r3, #31
 8006bbc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	58024400 	.word	0x58024400
 8006bc8:	080087e0 	.word	0x080087e0

08006bcc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b089      	sub	sp, #36	@ 0x24
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006bd4:	4ba1      	ldr	r3, [pc, #644]	@ (8006e5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bd8:	f003 0303 	and.w	r3, r3, #3
 8006bdc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006bde:	4b9f      	ldr	r3, [pc, #636]	@ (8006e5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006be2:	0b1b      	lsrs	r3, r3, #12
 8006be4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006be8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006bea:	4b9c      	ldr	r3, [pc, #624]	@ (8006e5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bee:	091b      	lsrs	r3, r3, #4
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006bf6:	4b99      	ldr	r3, [pc, #612]	@ (8006e5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bfa:	08db      	lsrs	r3, r3, #3
 8006bfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c00:	693a      	ldr	r2, [r7, #16]
 8006c02:	fb02 f303 	mul.w	r3, r2, r3
 8006c06:	ee07 3a90 	vmov	s15, r3
 8006c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c0e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f000 8111 	beq.w	8006e3c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	f000 8083 	beq.w	8006d28 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	f200 80a1 	bhi.w	8006d6c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d003      	beq.n	8006c38 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d056      	beq.n	8006ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006c36:	e099      	b.n	8006d6c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c38:	4b88      	ldr	r3, [pc, #544]	@ (8006e5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 0320 	and.w	r3, r3, #32
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d02d      	beq.n	8006ca0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c44:	4b85      	ldr	r3, [pc, #532]	@ (8006e5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	08db      	lsrs	r3, r3, #3
 8006c4a:	f003 0303 	and.w	r3, r3, #3
 8006c4e:	4a84      	ldr	r2, [pc, #528]	@ (8006e60 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006c50:	fa22 f303 	lsr.w	r3, r2, r3
 8006c54:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	ee07 3a90 	vmov	s15, r3
 8006c5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	ee07 3a90 	vmov	s15, r3
 8006c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c6e:	4b7b      	ldr	r3, [pc, #492]	@ (8006e5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c76:	ee07 3a90 	vmov	s15, r3
 8006c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c82:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006e64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c9a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006c9e:	e087      	b.n	8006db0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	ee07 3a90 	vmov	s15, r3
 8006ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006caa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006e68 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cb2:	4b6a      	ldr	r3, [pc, #424]	@ (8006e5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cba:	ee07 3a90 	vmov	s15, r3
 8006cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cc6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006e64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ce2:	e065      	b.n	8006db0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	ee07 3a90 	vmov	s15, r3
 8006cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006e6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cf6:	4b59      	ldr	r3, [pc, #356]	@ (8006e5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cfe:	ee07 3a90 	vmov	s15, r3
 8006d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d06:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d0a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006e64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d26:	e043      	b.n	8006db0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	ee07 3a90 	vmov	s15, r3
 8006d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d32:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006e70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d3a:	4b48      	ldr	r3, [pc, #288]	@ (8006e5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d42:	ee07 3a90 	vmov	s15, r3
 8006d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d4e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006e64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d6a:	e021      	b.n	8006db0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	ee07 3a90 	vmov	s15, r3
 8006d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d76:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006e6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d7e:	4b37      	ldr	r3, [pc, #220]	@ (8006e5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d86:	ee07 3a90 	vmov	s15, r3
 8006d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d92:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006e64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006daa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006db0:	4b2a      	ldr	r3, [pc, #168]	@ (8006e5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006db4:	0a5b      	lsrs	r3, r3, #9
 8006db6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dba:	ee07 3a90 	vmov	s15, r3
 8006dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006dc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006dca:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dd6:	ee17 2a90 	vmov	r2, s15
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006dde:	4b1f      	ldr	r3, [pc, #124]	@ (8006e5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006de2:	0c1b      	lsrs	r3, r3, #16
 8006de4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006de8:	ee07 3a90 	vmov	s15, r3
 8006dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006df0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006df4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006df8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e04:	ee17 2a90 	vmov	r2, s15
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006e0c:	4b13      	ldr	r3, [pc, #76]	@ (8006e5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e10:	0e1b      	lsrs	r3, r3, #24
 8006e12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e16:	ee07 3a90 	vmov	s15, r3
 8006e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e26:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e32:	ee17 2a90 	vmov	r2, s15
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006e3a:	e008      	b.n	8006e4e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	609a      	str	r2, [r3, #8]
}
 8006e4e:	bf00      	nop
 8006e50:	3724      	adds	r7, #36	@ 0x24
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	58024400 	.word	0x58024400
 8006e60:	03d09000 	.word	0x03d09000
 8006e64:	46000000 	.word	0x46000000
 8006e68:	4c742400 	.word	0x4c742400
 8006e6c:	4a742400 	.word	0x4a742400
 8006e70:	4bbebc20 	.word	0x4bbebc20

08006e74 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b089      	sub	sp, #36	@ 0x24
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e7c:	4ba1      	ldr	r3, [pc, #644]	@ (8007104 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e80:	f003 0303 	and.w	r3, r3, #3
 8006e84:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006e86:	4b9f      	ldr	r3, [pc, #636]	@ (8007104 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e8a:	0d1b      	lsrs	r3, r3, #20
 8006e8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e90:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006e92:	4b9c      	ldr	r3, [pc, #624]	@ (8007104 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e96:	0a1b      	lsrs	r3, r3, #8
 8006e98:	f003 0301 	and.w	r3, r3, #1
 8006e9c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006e9e:	4b99      	ldr	r3, [pc, #612]	@ (8007104 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ea2:	08db      	lsrs	r3, r3, #3
 8006ea4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ea8:	693a      	ldr	r2, [r7, #16]
 8006eaa:	fb02 f303 	mul.w	r3, r2, r3
 8006eae:	ee07 3a90 	vmov	s15, r3
 8006eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eb6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	f000 8111 	beq.w	80070e4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	f000 8083 	beq.w	8006fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	f200 80a1 	bhi.w	8007014 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d003      	beq.n	8006ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d056      	beq.n	8006f8c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006ede:	e099      	b.n	8007014 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ee0:	4b88      	ldr	r3, [pc, #544]	@ (8007104 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 0320 	and.w	r3, r3, #32
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d02d      	beq.n	8006f48 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006eec:	4b85      	ldr	r3, [pc, #532]	@ (8007104 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	08db      	lsrs	r3, r3, #3
 8006ef2:	f003 0303 	and.w	r3, r3, #3
 8006ef6:	4a84      	ldr	r2, [pc, #528]	@ (8007108 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8006efc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	ee07 3a90 	vmov	s15, r3
 8006f04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	ee07 3a90 	vmov	s15, r3
 8006f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f16:	4b7b      	ldr	r3, [pc, #492]	@ (8007104 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f1e:	ee07 3a90 	vmov	s15, r3
 8006f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f26:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f2a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800710c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f42:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006f46:	e087      	b.n	8007058 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	ee07 3a90 	vmov	s15, r3
 8006f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f52:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007110 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f5a:	4b6a      	ldr	r3, [pc, #424]	@ (8007104 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f62:	ee07 3a90 	vmov	s15, r3
 8006f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f6e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800710c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f8a:	e065      	b.n	8007058 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	ee07 3a90 	vmov	s15, r3
 8006f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f96:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007114 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f9e:	4b59      	ldr	r3, [pc, #356]	@ (8007104 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fa6:	ee07 3a90 	vmov	s15, r3
 8006faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fae:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fb2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800710c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fce:	e043      	b.n	8007058 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	ee07 3a90 	vmov	s15, r3
 8006fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fda:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007118 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fe2:	4b48      	ldr	r3, [pc, #288]	@ (8007104 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fea:	ee07 3a90 	vmov	s15, r3
 8006fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ff2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ff6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800710c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007002:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800700a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800700e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007012:	e021      	b.n	8007058 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	ee07 3a90 	vmov	s15, r3
 800701a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800701e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007114 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007026:	4b37      	ldr	r3, [pc, #220]	@ (8007104 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800702a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800702e:	ee07 3a90 	vmov	s15, r3
 8007032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007036:	ed97 6a03 	vldr	s12, [r7, #12]
 800703a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800710c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800703e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007046:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800704a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800704e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007052:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007056:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007058:	4b2a      	ldr	r3, [pc, #168]	@ (8007104 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800705a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800705c:	0a5b      	lsrs	r3, r3, #9
 800705e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007062:	ee07 3a90 	vmov	s15, r3
 8007066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800706a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800706e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007072:	edd7 6a07 	vldr	s13, [r7, #28]
 8007076:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800707a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800707e:	ee17 2a90 	vmov	r2, s15
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007086:	4b1f      	ldr	r3, [pc, #124]	@ (8007104 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800708a:	0c1b      	lsrs	r3, r3, #16
 800708c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007090:	ee07 3a90 	vmov	s15, r3
 8007094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007098:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800709c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80070a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070ac:	ee17 2a90 	vmov	r2, s15
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80070b4:	4b13      	ldr	r3, [pc, #76]	@ (8007104 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070b8:	0e1b      	lsrs	r3, r3, #24
 80070ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070be:	ee07 3a90 	vmov	s15, r3
 80070c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80070ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80070d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070da:	ee17 2a90 	vmov	r2, s15
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80070e2:	e008      	b.n	80070f6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	609a      	str	r2, [r3, #8]
}
 80070f6:	bf00      	nop
 80070f8:	3724      	adds	r7, #36	@ 0x24
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	58024400 	.word	0x58024400
 8007108:	03d09000 	.word	0x03d09000
 800710c:	46000000 	.word	0x46000000
 8007110:	4c742400 	.word	0x4c742400
 8007114:	4a742400 	.word	0x4a742400
 8007118:	4bbebc20 	.word	0x4bbebc20

0800711c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800711c:	b480      	push	{r7}
 800711e:	b089      	sub	sp, #36	@ 0x24
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007124:	4ba0      	ldr	r3, [pc, #640]	@ (80073a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007128:	f003 0303 	and.w	r3, r3, #3
 800712c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800712e:	4b9e      	ldr	r3, [pc, #632]	@ (80073a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007132:	091b      	lsrs	r3, r3, #4
 8007134:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007138:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800713a:	4b9b      	ldr	r3, [pc, #620]	@ (80073a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800713c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007144:	4b98      	ldr	r3, [pc, #608]	@ (80073a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007148:	08db      	lsrs	r3, r3, #3
 800714a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800714e:	693a      	ldr	r2, [r7, #16]
 8007150:	fb02 f303 	mul.w	r3, r2, r3
 8007154:	ee07 3a90 	vmov	s15, r3
 8007158:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800715c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	2b00      	cmp	r3, #0
 8007164:	f000 8111 	beq.w	800738a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	2b02      	cmp	r3, #2
 800716c:	f000 8083 	beq.w	8007276 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	2b02      	cmp	r3, #2
 8007174:	f200 80a1 	bhi.w	80072ba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d003      	beq.n	8007186 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d056      	beq.n	8007232 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007184:	e099      	b.n	80072ba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007186:	4b88      	ldr	r3, [pc, #544]	@ (80073a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 0320 	and.w	r3, r3, #32
 800718e:	2b00      	cmp	r3, #0
 8007190:	d02d      	beq.n	80071ee <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007192:	4b85      	ldr	r3, [pc, #532]	@ (80073a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	08db      	lsrs	r3, r3, #3
 8007198:	f003 0303 	and.w	r3, r3, #3
 800719c:	4a83      	ldr	r2, [pc, #524]	@ (80073ac <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800719e:	fa22 f303 	lsr.w	r3, r2, r3
 80071a2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	ee07 3a90 	vmov	s15, r3
 80071aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	ee07 3a90 	vmov	s15, r3
 80071b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071bc:	4b7a      	ldr	r3, [pc, #488]	@ (80073a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071c4:	ee07 3a90 	vmov	s15, r3
 80071c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80071d0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80071d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071e8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80071ec:	e087      	b.n	80072fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	ee07 3a90 	vmov	s15, r3
 80071f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071f8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80073b4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80071fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007200:	4b69      	ldr	r3, [pc, #420]	@ (80073a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007208:	ee07 3a90 	vmov	s15, r3
 800720c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007210:	ed97 6a03 	vldr	s12, [r7, #12]
 8007214:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007218:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800721c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007220:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007224:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007228:	ee67 7a27 	vmul.f32	s15, s14, s15
 800722c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007230:	e065      	b.n	80072fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	ee07 3a90 	vmov	s15, r3
 8007238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800723c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80073b8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007240:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007244:	4b58      	ldr	r3, [pc, #352]	@ (80073a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800724c:	ee07 3a90 	vmov	s15, r3
 8007250:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007254:	ed97 6a03 	vldr	s12, [r7, #12]
 8007258:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800725c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007260:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007264:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007268:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800726c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007270:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007274:	e043      	b.n	80072fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	ee07 3a90 	vmov	s15, r3
 800727c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007280:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80073bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007284:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007288:	4b47      	ldr	r3, [pc, #284]	@ (80073a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800728a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800728c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007290:	ee07 3a90 	vmov	s15, r3
 8007294:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007298:	ed97 6a03 	vldr	s12, [r7, #12]
 800729c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80072a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072b8:	e021      	b.n	80072fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	ee07 3a90 	vmov	s15, r3
 80072c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072c4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80073b4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80072c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072cc:	4b36      	ldr	r3, [pc, #216]	@ (80073a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072d4:	ee07 3a90 	vmov	s15, r3
 80072d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80072e0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80072e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072fc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80072fe:	4b2a      	ldr	r3, [pc, #168]	@ (80073a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007302:	0a5b      	lsrs	r3, r3, #9
 8007304:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007308:	ee07 3a90 	vmov	s15, r3
 800730c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007310:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007314:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007318:	edd7 6a07 	vldr	s13, [r7, #28]
 800731c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007320:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007324:	ee17 2a90 	vmov	r2, s15
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800732c:	4b1e      	ldr	r3, [pc, #120]	@ (80073a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800732e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007330:	0c1b      	lsrs	r3, r3, #16
 8007332:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007336:	ee07 3a90 	vmov	s15, r3
 800733a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800733e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007342:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007346:	edd7 6a07 	vldr	s13, [r7, #28]
 800734a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800734e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007352:	ee17 2a90 	vmov	r2, s15
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800735a:	4b13      	ldr	r3, [pc, #76]	@ (80073a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800735c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800735e:	0e1b      	lsrs	r3, r3, #24
 8007360:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007364:	ee07 3a90 	vmov	s15, r3
 8007368:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800736c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007370:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007374:	edd7 6a07 	vldr	s13, [r7, #28]
 8007378:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800737c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007380:	ee17 2a90 	vmov	r2, s15
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007388:	e008      	b.n	800739c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	609a      	str	r2, [r3, #8]
}
 800739c:	bf00      	nop
 800739e:	3724      	adds	r7, #36	@ 0x24
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr
 80073a8:	58024400 	.word	0x58024400
 80073ac:	03d09000 	.word	0x03d09000
 80073b0:	46000000 	.word	0x46000000
 80073b4:	4c742400 	.word	0x4c742400
 80073b8:	4a742400 	.word	0x4a742400
 80073bc:	4bbebc20 	.word	0x4bbebc20

080073c0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80073ca:	2300      	movs	r3, #0
 80073cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80073ce:	4b53      	ldr	r3, [pc, #332]	@ (800751c <RCCEx_PLL2_Config+0x15c>)
 80073d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073d2:	f003 0303 	and.w	r3, r3, #3
 80073d6:	2b03      	cmp	r3, #3
 80073d8:	d101      	bne.n	80073de <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	e099      	b.n	8007512 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80073de:	4b4f      	ldr	r3, [pc, #316]	@ (800751c <RCCEx_PLL2_Config+0x15c>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a4e      	ldr	r2, [pc, #312]	@ (800751c <RCCEx_PLL2_Config+0x15c>)
 80073e4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80073e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073ea:	f7f9 fe43 	bl	8001074 <HAL_GetTick>
 80073ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073f0:	e008      	b.n	8007404 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80073f2:	f7f9 fe3f 	bl	8001074 <HAL_GetTick>
 80073f6:	4602      	mov	r2, r0
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d901      	bls.n	8007404 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007400:	2303      	movs	r3, #3
 8007402:	e086      	b.n	8007512 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007404:	4b45      	ldr	r3, [pc, #276]	@ (800751c <RCCEx_PLL2_Config+0x15c>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800740c:	2b00      	cmp	r3, #0
 800740e:	d1f0      	bne.n	80073f2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007410:	4b42      	ldr	r3, [pc, #264]	@ (800751c <RCCEx_PLL2_Config+0x15c>)
 8007412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007414:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	031b      	lsls	r3, r3, #12
 800741e:	493f      	ldr	r1, [pc, #252]	@ (800751c <RCCEx_PLL2_Config+0x15c>)
 8007420:	4313      	orrs	r3, r2
 8007422:	628b      	str	r3, [r1, #40]	@ 0x28
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	3b01      	subs	r3, #1
 800742a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	3b01      	subs	r3, #1
 8007434:	025b      	lsls	r3, r3, #9
 8007436:	b29b      	uxth	r3, r3
 8007438:	431a      	orrs	r2, r3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	3b01      	subs	r3, #1
 8007440:	041b      	lsls	r3, r3, #16
 8007442:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007446:	431a      	orrs	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	3b01      	subs	r3, #1
 800744e:	061b      	lsls	r3, r3, #24
 8007450:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007454:	4931      	ldr	r1, [pc, #196]	@ (800751c <RCCEx_PLL2_Config+0x15c>)
 8007456:	4313      	orrs	r3, r2
 8007458:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800745a:	4b30      	ldr	r3, [pc, #192]	@ (800751c <RCCEx_PLL2_Config+0x15c>)
 800745c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800745e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	695b      	ldr	r3, [r3, #20]
 8007466:	492d      	ldr	r1, [pc, #180]	@ (800751c <RCCEx_PLL2_Config+0x15c>)
 8007468:	4313      	orrs	r3, r2
 800746a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800746c:	4b2b      	ldr	r3, [pc, #172]	@ (800751c <RCCEx_PLL2_Config+0x15c>)
 800746e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007470:	f023 0220 	bic.w	r2, r3, #32
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	699b      	ldr	r3, [r3, #24]
 8007478:	4928      	ldr	r1, [pc, #160]	@ (800751c <RCCEx_PLL2_Config+0x15c>)
 800747a:	4313      	orrs	r3, r2
 800747c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800747e:	4b27      	ldr	r3, [pc, #156]	@ (800751c <RCCEx_PLL2_Config+0x15c>)
 8007480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007482:	4a26      	ldr	r2, [pc, #152]	@ (800751c <RCCEx_PLL2_Config+0x15c>)
 8007484:	f023 0310 	bic.w	r3, r3, #16
 8007488:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800748a:	4b24      	ldr	r3, [pc, #144]	@ (800751c <RCCEx_PLL2_Config+0x15c>)
 800748c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800748e:	4b24      	ldr	r3, [pc, #144]	@ (8007520 <RCCEx_PLL2_Config+0x160>)
 8007490:	4013      	ands	r3, r2
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	69d2      	ldr	r2, [r2, #28]
 8007496:	00d2      	lsls	r2, r2, #3
 8007498:	4920      	ldr	r1, [pc, #128]	@ (800751c <RCCEx_PLL2_Config+0x15c>)
 800749a:	4313      	orrs	r3, r2
 800749c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800749e:	4b1f      	ldr	r3, [pc, #124]	@ (800751c <RCCEx_PLL2_Config+0x15c>)
 80074a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a2:	4a1e      	ldr	r2, [pc, #120]	@ (800751c <RCCEx_PLL2_Config+0x15c>)
 80074a4:	f043 0310 	orr.w	r3, r3, #16
 80074a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d106      	bne.n	80074be <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80074b0:	4b1a      	ldr	r3, [pc, #104]	@ (800751c <RCCEx_PLL2_Config+0x15c>)
 80074b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b4:	4a19      	ldr	r2, [pc, #100]	@ (800751c <RCCEx_PLL2_Config+0x15c>)
 80074b6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80074ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80074bc:	e00f      	b.n	80074de <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d106      	bne.n	80074d2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80074c4:	4b15      	ldr	r3, [pc, #84]	@ (800751c <RCCEx_PLL2_Config+0x15c>)
 80074c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c8:	4a14      	ldr	r2, [pc, #80]	@ (800751c <RCCEx_PLL2_Config+0x15c>)
 80074ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80074ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80074d0:	e005      	b.n	80074de <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80074d2:	4b12      	ldr	r3, [pc, #72]	@ (800751c <RCCEx_PLL2_Config+0x15c>)
 80074d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074d6:	4a11      	ldr	r2, [pc, #68]	@ (800751c <RCCEx_PLL2_Config+0x15c>)
 80074d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80074dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80074de:	4b0f      	ldr	r3, [pc, #60]	@ (800751c <RCCEx_PLL2_Config+0x15c>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a0e      	ldr	r2, [pc, #56]	@ (800751c <RCCEx_PLL2_Config+0x15c>)
 80074e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80074e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074ea:	f7f9 fdc3 	bl	8001074 <HAL_GetTick>
 80074ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074f0:	e008      	b.n	8007504 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80074f2:	f7f9 fdbf 	bl	8001074 <HAL_GetTick>
 80074f6:	4602      	mov	r2, r0
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d901      	bls.n	8007504 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007500:	2303      	movs	r3, #3
 8007502:	e006      	b.n	8007512 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007504:	4b05      	ldr	r3, [pc, #20]	@ (800751c <RCCEx_PLL2_Config+0x15c>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800750c:	2b00      	cmp	r3, #0
 800750e:	d0f0      	beq.n	80074f2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007510:	7bfb      	ldrb	r3, [r7, #15]
}
 8007512:	4618      	mov	r0, r3
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	58024400 	.word	0x58024400
 8007520:	ffff0007 	.word	0xffff0007

08007524 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800752e:	2300      	movs	r3, #0
 8007530:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007532:	4b53      	ldr	r3, [pc, #332]	@ (8007680 <RCCEx_PLL3_Config+0x15c>)
 8007534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007536:	f003 0303 	and.w	r3, r3, #3
 800753a:	2b03      	cmp	r3, #3
 800753c:	d101      	bne.n	8007542 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e099      	b.n	8007676 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007542:	4b4f      	ldr	r3, [pc, #316]	@ (8007680 <RCCEx_PLL3_Config+0x15c>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a4e      	ldr	r2, [pc, #312]	@ (8007680 <RCCEx_PLL3_Config+0x15c>)
 8007548:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800754c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800754e:	f7f9 fd91 	bl	8001074 <HAL_GetTick>
 8007552:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007554:	e008      	b.n	8007568 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007556:	f7f9 fd8d 	bl	8001074 <HAL_GetTick>
 800755a:	4602      	mov	r2, r0
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	1ad3      	subs	r3, r2, r3
 8007560:	2b02      	cmp	r3, #2
 8007562:	d901      	bls.n	8007568 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007564:	2303      	movs	r3, #3
 8007566:	e086      	b.n	8007676 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007568:	4b45      	ldr	r3, [pc, #276]	@ (8007680 <RCCEx_PLL3_Config+0x15c>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007570:	2b00      	cmp	r3, #0
 8007572:	d1f0      	bne.n	8007556 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007574:	4b42      	ldr	r3, [pc, #264]	@ (8007680 <RCCEx_PLL3_Config+0x15c>)
 8007576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007578:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	051b      	lsls	r3, r3, #20
 8007582:	493f      	ldr	r1, [pc, #252]	@ (8007680 <RCCEx_PLL3_Config+0x15c>)
 8007584:	4313      	orrs	r3, r2
 8007586:	628b      	str	r3, [r1, #40]	@ 0x28
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	3b01      	subs	r3, #1
 800758e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	3b01      	subs	r3, #1
 8007598:	025b      	lsls	r3, r3, #9
 800759a:	b29b      	uxth	r3, r3
 800759c:	431a      	orrs	r2, r3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	3b01      	subs	r3, #1
 80075a4:	041b      	lsls	r3, r3, #16
 80075a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80075aa:	431a      	orrs	r2, r3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	3b01      	subs	r3, #1
 80075b2:	061b      	lsls	r3, r3, #24
 80075b4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80075b8:	4931      	ldr	r1, [pc, #196]	@ (8007680 <RCCEx_PLL3_Config+0x15c>)
 80075ba:	4313      	orrs	r3, r2
 80075bc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80075be:	4b30      	ldr	r3, [pc, #192]	@ (8007680 <RCCEx_PLL3_Config+0x15c>)
 80075c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	695b      	ldr	r3, [r3, #20]
 80075ca:	492d      	ldr	r1, [pc, #180]	@ (8007680 <RCCEx_PLL3_Config+0x15c>)
 80075cc:	4313      	orrs	r3, r2
 80075ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80075d0:	4b2b      	ldr	r3, [pc, #172]	@ (8007680 <RCCEx_PLL3_Config+0x15c>)
 80075d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	4928      	ldr	r1, [pc, #160]	@ (8007680 <RCCEx_PLL3_Config+0x15c>)
 80075de:	4313      	orrs	r3, r2
 80075e0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80075e2:	4b27      	ldr	r3, [pc, #156]	@ (8007680 <RCCEx_PLL3_Config+0x15c>)
 80075e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e6:	4a26      	ldr	r2, [pc, #152]	@ (8007680 <RCCEx_PLL3_Config+0x15c>)
 80075e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80075ee:	4b24      	ldr	r3, [pc, #144]	@ (8007680 <RCCEx_PLL3_Config+0x15c>)
 80075f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075f2:	4b24      	ldr	r3, [pc, #144]	@ (8007684 <RCCEx_PLL3_Config+0x160>)
 80075f4:	4013      	ands	r3, r2
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	69d2      	ldr	r2, [r2, #28]
 80075fa:	00d2      	lsls	r2, r2, #3
 80075fc:	4920      	ldr	r1, [pc, #128]	@ (8007680 <RCCEx_PLL3_Config+0x15c>)
 80075fe:	4313      	orrs	r3, r2
 8007600:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007602:	4b1f      	ldr	r3, [pc, #124]	@ (8007680 <RCCEx_PLL3_Config+0x15c>)
 8007604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007606:	4a1e      	ldr	r2, [pc, #120]	@ (8007680 <RCCEx_PLL3_Config+0x15c>)
 8007608:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800760c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d106      	bne.n	8007622 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007614:	4b1a      	ldr	r3, [pc, #104]	@ (8007680 <RCCEx_PLL3_Config+0x15c>)
 8007616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007618:	4a19      	ldr	r2, [pc, #100]	@ (8007680 <RCCEx_PLL3_Config+0x15c>)
 800761a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800761e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007620:	e00f      	b.n	8007642 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	2b01      	cmp	r3, #1
 8007626:	d106      	bne.n	8007636 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007628:	4b15      	ldr	r3, [pc, #84]	@ (8007680 <RCCEx_PLL3_Config+0x15c>)
 800762a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800762c:	4a14      	ldr	r2, [pc, #80]	@ (8007680 <RCCEx_PLL3_Config+0x15c>)
 800762e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007632:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007634:	e005      	b.n	8007642 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007636:	4b12      	ldr	r3, [pc, #72]	@ (8007680 <RCCEx_PLL3_Config+0x15c>)
 8007638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800763a:	4a11      	ldr	r2, [pc, #68]	@ (8007680 <RCCEx_PLL3_Config+0x15c>)
 800763c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007640:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007642:	4b0f      	ldr	r3, [pc, #60]	@ (8007680 <RCCEx_PLL3_Config+0x15c>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a0e      	ldr	r2, [pc, #56]	@ (8007680 <RCCEx_PLL3_Config+0x15c>)
 8007648:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800764c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800764e:	f7f9 fd11 	bl	8001074 <HAL_GetTick>
 8007652:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007654:	e008      	b.n	8007668 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007656:	f7f9 fd0d 	bl	8001074 <HAL_GetTick>
 800765a:	4602      	mov	r2, r0
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	2b02      	cmp	r3, #2
 8007662:	d901      	bls.n	8007668 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007664:	2303      	movs	r3, #3
 8007666:	e006      	b.n	8007676 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007668:	4b05      	ldr	r3, [pc, #20]	@ (8007680 <RCCEx_PLL3_Config+0x15c>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007670:	2b00      	cmp	r3, #0
 8007672:	d0f0      	beq.n	8007656 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007674:	7bfb      	ldrb	r3, [r7, #15]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	58024400 	.word	0x58024400
 8007684:	ffff0007 	.word	0xffff0007

08007688 <_ZdlPvj>:
 8007688:	f000 b800 	b.w	800768c <_ZdlPv>

0800768c <_ZdlPv>:
 800768c:	f000 b800 	b.w	8007690 <free>

08007690 <free>:
 8007690:	4b02      	ldr	r3, [pc, #8]	@ (800769c <free+0xc>)
 8007692:	4601      	mov	r1, r0
 8007694:	6818      	ldr	r0, [r3, #0]
 8007696:	f000 b83d 	b.w	8007714 <_free_r>
 800769a:	bf00      	nop
 800769c:	24000010 	.word	0x24000010

080076a0 <__malloc_lock>:
 80076a0:	4801      	ldr	r0, [pc, #4]	@ (80076a8 <__malloc_lock+0x8>)
 80076a2:	f000 b835 	b.w	8007710 <__retarget_lock_acquire_recursive>
 80076a6:	bf00      	nop
 80076a8:	240004f8 	.word	0x240004f8

080076ac <__malloc_unlock>:
 80076ac:	4801      	ldr	r0, [pc, #4]	@ (80076b4 <__malloc_unlock+0x8>)
 80076ae:	f000 b830 	b.w	8007712 <__retarget_lock_release_recursive>
 80076b2:	bf00      	nop
 80076b4:	240004f8 	.word	0x240004f8

080076b8 <memset>:
 80076b8:	4402      	add	r2, r0
 80076ba:	4603      	mov	r3, r0
 80076bc:	4293      	cmp	r3, r2
 80076be:	d100      	bne.n	80076c2 <memset+0xa>
 80076c0:	4770      	bx	lr
 80076c2:	f803 1b01 	strb.w	r1, [r3], #1
 80076c6:	e7f9      	b.n	80076bc <memset+0x4>

080076c8 <__libc_init_array>:
 80076c8:	b570      	push	{r4, r5, r6, lr}
 80076ca:	4d0d      	ldr	r5, [pc, #52]	@ (8007700 <__libc_init_array+0x38>)
 80076cc:	4c0d      	ldr	r4, [pc, #52]	@ (8007704 <__libc_init_array+0x3c>)
 80076ce:	1b64      	subs	r4, r4, r5
 80076d0:	10a4      	asrs	r4, r4, #2
 80076d2:	2600      	movs	r6, #0
 80076d4:	42a6      	cmp	r6, r4
 80076d6:	d109      	bne.n	80076ec <__libc_init_array+0x24>
 80076d8:	4d0b      	ldr	r5, [pc, #44]	@ (8007708 <__libc_init_array+0x40>)
 80076da:	4c0c      	ldr	r4, [pc, #48]	@ (800770c <__libc_init_array+0x44>)
 80076dc:	f000 f864 	bl	80077a8 <_init>
 80076e0:	1b64      	subs	r4, r4, r5
 80076e2:	10a4      	asrs	r4, r4, #2
 80076e4:	2600      	movs	r6, #0
 80076e6:	42a6      	cmp	r6, r4
 80076e8:	d105      	bne.n	80076f6 <__libc_init_array+0x2e>
 80076ea:	bd70      	pop	{r4, r5, r6, pc}
 80076ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80076f0:	4798      	blx	r3
 80076f2:	3601      	adds	r6, #1
 80076f4:	e7ee      	b.n	80076d4 <__libc_init_array+0xc>
 80076f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80076fa:	4798      	blx	r3
 80076fc:	3601      	adds	r6, #1
 80076fe:	e7f2      	b.n	80076e6 <__libc_init_array+0x1e>
 8007700:	080087f8 	.word	0x080087f8
 8007704:	080087f8 	.word	0x080087f8
 8007708:	080087f8 	.word	0x080087f8
 800770c:	08008800 	.word	0x08008800

08007710 <__retarget_lock_acquire_recursive>:
 8007710:	4770      	bx	lr

08007712 <__retarget_lock_release_recursive>:
 8007712:	4770      	bx	lr

08007714 <_free_r>:
 8007714:	b538      	push	{r3, r4, r5, lr}
 8007716:	4605      	mov	r5, r0
 8007718:	2900      	cmp	r1, #0
 800771a:	d041      	beq.n	80077a0 <_free_r+0x8c>
 800771c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007720:	1f0c      	subs	r4, r1, #4
 8007722:	2b00      	cmp	r3, #0
 8007724:	bfb8      	it	lt
 8007726:	18e4      	addlt	r4, r4, r3
 8007728:	f7ff ffba 	bl	80076a0 <__malloc_lock>
 800772c:	4a1d      	ldr	r2, [pc, #116]	@ (80077a4 <_free_r+0x90>)
 800772e:	6813      	ldr	r3, [r2, #0]
 8007730:	b933      	cbnz	r3, 8007740 <_free_r+0x2c>
 8007732:	6063      	str	r3, [r4, #4]
 8007734:	6014      	str	r4, [r2, #0]
 8007736:	4628      	mov	r0, r5
 8007738:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800773c:	f7ff bfb6 	b.w	80076ac <__malloc_unlock>
 8007740:	42a3      	cmp	r3, r4
 8007742:	d908      	bls.n	8007756 <_free_r+0x42>
 8007744:	6820      	ldr	r0, [r4, #0]
 8007746:	1821      	adds	r1, r4, r0
 8007748:	428b      	cmp	r3, r1
 800774a:	bf01      	itttt	eq
 800774c:	6819      	ldreq	r1, [r3, #0]
 800774e:	685b      	ldreq	r3, [r3, #4]
 8007750:	1809      	addeq	r1, r1, r0
 8007752:	6021      	streq	r1, [r4, #0]
 8007754:	e7ed      	b.n	8007732 <_free_r+0x1e>
 8007756:	461a      	mov	r2, r3
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	b10b      	cbz	r3, 8007760 <_free_r+0x4c>
 800775c:	42a3      	cmp	r3, r4
 800775e:	d9fa      	bls.n	8007756 <_free_r+0x42>
 8007760:	6811      	ldr	r1, [r2, #0]
 8007762:	1850      	adds	r0, r2, r1
 8007764:	42a0      	cmp	r0, r4
 8007766:	d10b      	bne.n	8007780 <_free_r+0x6c>
 8007768:	6820      	ldr	r0, [r4, #0]
 800776a:	4401      	add	r1, r0
 800776c:	1850      	adds	r0, r2, r1
 800776e:	4283      	cmp	r3, r0
 8007770:	6011      	str	r1, [r2, #0]
 8007772:	d1e0      	bne.n	8007736 <_free_r+0x22>
 8007774:	6818      	ldr	r0, [r3, #0]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	6053      	str	r3, [r2, #4]
 800777a:	4408      	add	r0, r1
 800777c:	6010      	str	r0, [r2, #0]
 800777e:	e7da      	b.n	8007736 <_free_r+0x22>
 8007780:	d902      	bls.n	8007788 <_free_r+0x74>
 8007782:	230c      	movs	r3, #12
 8007784:	602b      	str	r3, [r5, #0]
 8007786:	e7d6      	b.n	8007736 <_free_r+0x22>
 8007788:	6820      	ldr	r0, [r4, #0]
 800778a:	1821      	adds	r1, r4, r0
 800778c:	428b      	cmp	r3, r1
 800778e:	bf04      	itt	eq
 8007790:	6819      	ldreq	r1, [r3, #0]
 8007792:	685b      	ldreq	r3, [r3, #4]
 8007794:	6063      	str	r3, [r4, #4]
 8007796:	bf04      	itt	eq
 8007798:	1809      	addeq	r1, r1, r0
 800779a:	6021      	streq	r1, [r4, #0]
 800779c:	6054      	str	r4, [r2, #4]
 800779e:	e7ca      	b.n	8007736 <_free_r+0x22>
 80077a0:	bd38      	pop	{r3, r4, r5, pc}
 80077a2:	bf00      	nop
 80077a4:	240003bc 	.word	0x240003bc

080077a8 <_init>:
 80077a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077aa:	bf00      	nop
 80077ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ae:	bc08      	pop	{r3}
 80077b0:	469e      	mov	lr, r3
 80077b2:	4770      	bx	lr

080077b4 <_fini>:
 80077b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077b6:	bf00      	nop
 80077b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ba:	bc08      	pop	{r3}
 80077bc:	469e      	mov	lr, r3
 80077be:	4770      	bx	lr
