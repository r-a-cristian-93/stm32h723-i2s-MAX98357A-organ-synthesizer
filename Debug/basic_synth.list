
basic_synth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008250  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000051b8  0800851c  0800851c  0000951c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  0800d6d4  0800d6d4  0000e6d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000008  0800d6dc  0800d6dc  0000e6dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000060  24000000  0800d6e4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000864  24000060  0800d744  0000f060  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240008c4  0800d744  0000f8c4  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000f060  2**0
                  CONTENTS, READONLY
  9 .debug_info   000153f8  00000000  00000000  0000f08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002fb4  00000000  00000000  00024486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000dc0  00000000  00000000  00027440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000a58  00000000  00000000  00028200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035e7e  00000000  00000000  00028c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000177ee  00000000  00000000  0005ead6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0013ed12  00000000  00000000  000762c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001b4fd6  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003988  00000000  00000000  001b501c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000068  00000000  00000000  001b89a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000060 	.word	0x24000060
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08008504 	.word	0x08008504

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000064 	.word	0x24000064
 8000308:	08008504 	.word	0x08008504

0800030c <_ZN5CodecC1Ev>:

#include "Codec.h"
#include "i2c.h"
#include "gpio.h"

Codec::Codec() {
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	4a04      	ldr	r2, [pc, #16]	@ (8000328 <_ZN5CodecC1Ev+0x1c>)
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4618      	mov	r0, r3
 800031e:	370c      	adds	r7, #12
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr
 8000328:	08008524 	.word	0x08008524

0800032c <_ZN5CodecD1Ev>:

Codec::~Codec() {
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	4a04      	ldr	r2, [pc, #16]	@ (8000348 <_ZN5CodecD1Ev+0x1c>)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4618      	mov	r0, r3
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr
 8000348:	08008524 	.word	0x08008524

0800034c <_ZN5CodecD0Ev>:
Codec::~Codec() {
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
}
 8000354:	6878      	ldr	r0, [r7, #4]
 8000356:	f7ff ffe9 	bl	800032c <_ZN5CodecD1Ev>
 800035a:	2104      	movs	r1, #4
 800035c:	6878      	ldr	r0, [r7, #4]
 800035e:	f007 ff81 	bl	8008264 <_ZdlPvj>
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4618      	mov	r0, r3
 8000366:	3708      	adds	r7, #8
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}

0800036c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000372:	4b0d      	ldr	r3, [pc, #52]	@ (80003a8 <MX_DMA_Init+0x3c>)
 8000374:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000378:	4a0b      	ldr	r2, [pc, #44]	@ (80003a8 <MX_DMA_Init+0x3c>)
 800037a:	f043 0301 	orr.w	r3, r3, #1
 800037e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000382:	4b09      	ldr	r3, [pc, #36]	@ (80003a8 <MX_DMA_Init+0x3c>)
 8000384:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000388:	f003 0301 	and.w	r3, r3, #1
 800038c:	607b      	str	r3, [r7, #4]
 800038e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000390:	2200      	movs	r2, #0
 8000392:	2100      	movs	r1, #0
 8000394:	200b      	movs	r0, #11
 8000396:	f001 fd42 	bl	8001e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800039a:	200b      	movs	r0, #11
 800039c:	f001 fd59 	bl	8001e52 <HAL_NVIC_EnableIRQ>

}
 80003a0:	bf00      	nop
 80003a2:	3708      	adds	r7, #8
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	58024400 	.word	0x58024400

080003ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b08a      	sub	sp, #40	@ 0x28
 80003b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b2:	f107 0314 	add.w	r3, r7, #20
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
 80003be:	60da      	str	r2, [r3, #12]
 80003c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003c2:	4b31      	ldr	r3, [pc, #196]	@ (8000488 <MX_GPIO_Init+0xdc>)
 80003c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003c8:	4a2f      	ldr	r2, [pc, #188]	@ (8000488 <MX_GPIO_Init+0xdc>)
 80003ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80003d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000488 <MX_GPIO_Init+0xdc>)
 80003d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003dc:	613b      	str	r3, [r7, #16]
 80003de:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e0:	4b29      	ldr	r3, [pc, #164]	@ (8000488 <MX_GPIO_Init+0xdc>)
 80003e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003e6:	4a28      	ldr	r2, [pc, #160]	@ (8000488 <MX_GPIO_Init+0xdc>)
 80003e8:	f043 0301 	orr.w	r3, r3, #1
 80003ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80003f0:	4b25      	ldr	r3, [pc, #148]	@ (8000488 <MX_GPIO_Init+0xdc>)
 80003f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003f6:	f003 0301 	and.w	r3, r3, #1
 80003fa:	60fb      	str	r3, [r7, #12]
 80003fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003fe:	4b22      	ldr	r3, [pc, #136]	@ (8000488 <MX_GPIO_Init+0xdc>)
 8000400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000404:	4a20      	ldr	r2, [pc, #128]	@ (8000488 <MX_GPIO_Init+0xdc>)
 8000406:	f043 0302 	orr.w	r3, r3, #2
 800040a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800040e:	4b1e      	ldr	r3, [pc, #120]	@ (8000488 <MX_GPIO_Init+0xdc>)
 8000410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000414:	f003 0302 	and.w	r3, r3, #2
 8000418:	60bb      	str	r3, [r7, #8]
 800041a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800041c:	4b1a      	ldr	r3, [pc, #104]	@ (8000488 <MX_GPIO_Init+0xdc>)
 800041e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000422:	4a19      	ldr	r2, [pc, #100]	@ (8000488 <MX_GPIO_Init+0xdc>)
 8000424:	f043 0304 	orr.w	r3, r3, #4
 8000428:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800042c:	4b16      	ldr	r3, [pc, #88]	@ (8000488 <MX_GPIO_Init+0xdc>)
 800042e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000432:	f003 0304 	and.w	r3, r3, #4
 8000436:	607b      	str	r3, [r7, #4]
 8000438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800043a:	4b13      	ldr	r3, [pc, #76]	@ (8000488 <MX_GPIO_Init+0xdc>)
 800043c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000440:	4a11      	ldr	r2, [pc, #68]	@ (8000488 <MX_GPIO_Init+0xdc>)
 8000442:	f043 0308 	orr.w	r3, r3, #8
 8000446:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800044a:	4b0f      	ldr	r3, [pc, #60]	@ (8000488 <MX_GPIO_Init+0xdc>)
 800044c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000450:	f003 0308 	and.w	r3, r3, #8
 8000454:	603b      	str	r3, [r7, #0]
 8000456:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CODEC_RESET_GPIO_Port, CODEC_RESET_Pin, GPIO_PIN_RESET);
 8000458:	2200      	movs	r2, #0
 800045a:	2110      	movs	r1, #16
 800045c:	480b      	ldr	r0, [pc, #44]	@ (800048c <MX_GPIO_Init+0xe0>)
 800045e:	f004 f807 	bl	8004470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CODEC_RESET_Pin;
 8000462:	2310      	movs	r3, #16
 8000464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000466:	2301      	movs	r3, #1
 8000468:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046a:	2300      	movs	r3, #0
 800046c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046e:	2300      	movs	r3, #0
 8000470:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CODEC_RESET_GPIO_Port, &GPIO_InitStruct);
 8000472:	f107 0314 	add.w	r3, r7, #20
 8000476:	4619      	mov	r1, r3
 8000478:	4804      	ldr	r0, [pc, #16]	@ (800048c <MX_GPIO_Init+0xe0>)
 800047a:	f003 fe51 	bl	8004120 <HAL_GPIO_Init>

}
 800047e:	bf00      	nop
 8000480:	3728      	adds	r7, #40	@ 0x28
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	58024400 	.word	0x58024400
 800048c:	58020c00 	.word	0x58020c00

08000490 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000494:	4b1b      	ldr	r3, [pc, #108]	@ (8000504 <MX_I2C1_Init+0x74>)
 8000496:	4a1c      	ldr	r2, [pc, #112]	@ (8000508 <MX_I2C1_Init+0x78>)
 8000498:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60404E72;
 800049a:	4b1a      	ldr	r3, [pc, #104]	@ (8000504 <MX_I2C1_Init+0x74>)
 800049c:	4a1b      	ldr	r2, [pc, #108]	@ (800050c <MX_I2C1_Init+0x7c>)
 800049e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004a0:	4b18      	ldr	r3, [pc, #96]	@ (8000504 <MX_I2C1_Init+0x74>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004a6:	4b17      	ldr	r3, [pc, #92]	@ (8000504 <MX_I2C1_Init+0x74>)
 80004a8:	2201      	movs	r2, #1
 80004aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004ac:	4b15      	ldr	r3, [pc, #84]	@ (8000504 <MX_I2C1_Init+0x74>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004b2:	4b14      	ldr	r3, [pc, #80]	@ (8000504 <MX_I2C1_Init+0x74>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004b8:	4b12      	ldr	r3, [pc, #72]	@ (8000504 <MX_I2C1_Init+0x74>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004be:	4b11      	ldr	r3, [pc, #68]	@ (8000504 <MX_I2C1_Init+0x74>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000504 <MX_I2C1_Init+0x74>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004ca:	480e      	ldr	r0, [pc, #56]	@ (8000504 <MX_I2C1_Init+0x74>)
 80004cc:	f003 ffea 	bl	80044a4 <HAL_I2C_Init>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004d6:	f000 fbcb 	bl	8000c70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004da:	2100      	movs	r1, #0
 80004dc:	4809      	ldr	r0, [pc, #36]	@ (8000504 <MX_I2C1_Init+0x74>)
 80004de:	f004 f87d 	bl	80045dc <HAL_I2CEx_ConfigAnalogFilter>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004e8:	f000 fbc2 	bl	8000c70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004ec:	2100      	movs	r1, #0
 80004ee:	4805      	ldr	r0, [pc, #20]	@ (8000504 <MX_I2C1_Init+0x74>)
 80004f0:	f004 f8bf 	bl	8004672 <HAL_I2CEx_ConfigDigitalFilter>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004fa:	f000 fbb9 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	2400007c 	.word	0x2400007c
 8000508:	40005400 	.word	0x40005400
 800050c:	60404e72 	.word	0x60404e72

08000510 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b0b8      	sub	sp, #224	@ 0xe0
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000518:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000528:	f107 0310 	add.w	r3, r7, #16
 800052c:	22b8      	movs	r2, #184	@ 0xb8
 800052e:	2100      	movs	r1, #0
 8000530:	4618      	mov	r0, r3
 8000532:	f007 ff59 	bl	80083e8 <memset>
  if(i2cHandle->Instance==I2C1)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4a26      	ldr	r2, [pc, #152]	@ (80005d4 <HAL_I2C_MspInit+0xc4>)
 800053c:	4293      	cmp	r3, r2
 800053e:	d145      	bne.n	80005cc <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000540:	f04f 0208 	mov.w	r2, #8
 8000544:	f04f 0300 	mov.w	r3, #0
 8000548:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 800054c:	2300      	movs	r3, #0
 800054e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000552:	f107 0310 	add.w	r3, r7, #16
 8000556:	4618      	mov	r0, r3
 8000558:	f005 fa9e 	bl	8005a98 <HAL_RCCEx_PeriphCLKConfig>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000562:	f000 fb85 	bl	8000c70 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000566:	4b1c      	ldr	r3, [pc, #112]	@ (80005d8 <HAL_I2C_MspInit+0xc8>)
 8000568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800056c:	4a1a      	ldr	r2, [pc, #104]	@ (80005d8 <HAL_I2C_MspInit+0xc8>)
 800056e:	f043 0302 	orr.w	r3, r3, #2
 8000572:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000576:	4b18      	ldr	r3, [pc, #96]	@ (80005d8 <HAL_I2C_MspInit+0xc8>)
 8000578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800057c:	f003 0302 	and.w	r3, r3, #2
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000584:	23c0      	movs	r3, #192	@ 0xc0
 8000586:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800058a:	2312      	movs	r3, #18
 800058c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	2300      	movs	r3, #0
 8000592:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000596:	2300      	movs	r3, #0
 8000598:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800059c:	2304      	movs	r3, #4
 800059e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80005a6:	4619      	mov	r1, r3
 80005a8:	480c      	ldr	r0, [pc, #48]	@ (80005dc <HAL_I2C_MspInit+0xcc>)
 80005aa:	f003 fdb9 	bl	8004120 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005ae:	4b0a      	ldr	r3, [pc, #40]	@ (80005d8 <HAL_I2C_MspInit+0xc8>)
 80005b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80005b4:	4a08      	ldr	r2, [pc, #32]	@ (80005d8 <HAL_I2C_MspInit+0xc8>)
 80005b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005ba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80005be:	4b06      	ldr	r3, [pc, #24]	@ (80005d8 <HAL_I2C_MspInit+0xc8>)
 80005c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80005c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80005cc:	bf00      	nop
 80005ce:	37e0      	adds	r7, #224	@ 0xe0
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40005400 	.word	0x40005400
 80005d8:	58024400 	.word	0x58024400
 80005dc:	58020400 	.word	0x58020400

080005e0 <MX_I2S3_Init>:
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80005e4:	4b15      	ldr	r3, [pc, #84]	@ (800063c <MX_I2S3_Init+0x5c>)
 80005e6:	4a16      	ldr	r2, [pc, #88]	@ (8000640 <MX_I2S3_Init+0x60>)
 80005e8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80005ea:	4b14      	ldr	r3, [pc, #80]	@ (800063c <MX_I2S3_Init+0x5c>)
 80005ec:	2204      	movs	r2, #4
 80005ee:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80005f0:	4b12      	ldr	r3, [pc, #72]	@ (800063c <MX_I2S3_Init+0x5c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80005f6:	4b11      	ldr	r3, [pc, #68]	@ (800063c <MX_I2S3_Init+0x5c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <MX_I2S3_Init+0x5c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000602:	4b0e      	ldr	r3, [pc, #56]	@ (800063c <MX_I2S3_Init+0x5c>)
 8000604:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000608:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800060a:	4b0c      	ldr	r3, [pc, #48]	@ (800063c <MX_I2S3_Init+0x5c>)
 800060c:	2200      	movs	r2, #0
 800060e:	619a      	str	r2, [r3, #24]
  hi2s3.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000610:	4b0a      	ldr	r3, [pc, #40]	@ (800063c <MX_I2S3_Init+0x5c>)
 8000612:	2200      	movs	r2, #0
 8000614:	61da      	str	r2, [r3, #28]
  hi2s3.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000616:	4b09      	ldr	r3, [pc, #36]	@ (800063c <MX_I2S3_Init+0x5c>)
 8000618:	2200      	movs	r2, #0
 800061a:	621a      	str	r2, [r3, #32]
  hi2s3.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 800061c:	4b07      	ldr	r3, [pc, #28]	@ (800063c <MX_I2S3_Init+0x5c>)
 800061e:	2200      	movs	r2, #0
 8000620:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s3.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000622:	4b06      	ldr	r3, [pc, #24]	@ (800063c <MX_I2S3_Init+0x5c>)
 8000624:	2200      	movs	r2, #0
 8000626:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000628:	4804      	ldr	r0, [pc, #16]	@ (800063c <MX_I2S3_Init+0x5c>)
 800062a:	f004 f86f 	bl	800470c <HAL_I2S_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_I2S3_Init+0x58>
  {
    Error_Handler();
 8000634:	f000 fb1c 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	240000d0 	.word	0x240000d0
 8000640:	40003c00 	.word	0x40003c00

08000644 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b0ba      	sub	sp, #232	@ 0xe8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800065c:	f107 0318 	add.w	r3, r7, #24
 8000660:	22b8      	movs	r2, #184	@ 0xb8
 8000662:	2100      	movs	r1, #0
 8000664:	4618      	mov	r0, r3
 8000666:	f007 febf 	bl	80083e8 <memset>
  if(i2sHandle->Instance==SPI3)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a6c      	ldr	r2, [pc, #432]	@ (8000820 <HAL_I2S_MspInit+0x1dc>)
 8000670:	4293      	cmp	r3, r2
 8000672:	f040 80d0 	bne.w	8000816 <HAL_I2S_MspInit+0x1d2>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8000676:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800067a:	f04f 0300 	mov.w	r3, #0
 800067e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 20;
 8000682:	2314      	movs	r3, #20
 8000684:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 177;
 8000686:	23b1      	movs	r3, #177	@ 0xb1
 8000688:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800068a:	2302      	movs	r3, #2
 800068c:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800068e:	2302      	movs	r3, #2
 8000690:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000692:	2302      	movs	r3, #2
 8000694:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8000696:	2300      	movs	r3, #0
 8000698:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 800069a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800069e:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0.0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 80006a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006a8:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006aa:	f107 0318 	add.w	r3, r7, #24
 80006ae:	4618      	mov	r0, r3
 80006b0:	f005 f9f2 	bl	8005a98 <HAL_RCCEx_PeriphCLKConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <HAL_I2S_MspInit+0x7a>
    {
      Error_Handler();
 80006ba:	f000 fad9 	bl	8000c70 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80006be:	4b59      	ldr	r3, [pc, #356]	@ (8000824 <HAL_I2S_MspInit+0x1e0>)
 80006c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80006c4:	4a57      	ldr	r2, [pc, #348]	@ (8000824 <HAL_I2S_MspInit+0x1e0>)
 80006c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006ca:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80006ce:	4b55      	ldr	r3, [pc, #340]	@ (8000824 <HAL_I2S_MspInit+0x1e0>)
 80006d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80006d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80006d8:	617b      	str	r3, [r7, #20]
 80006da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006dc:	4b51      	ldr	r3, [pc, #324]	@ (8000824 <HAL_I2S_MspInit+0x1e0>)
 80006de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e2:	4a50      	ldr	r2, [pc, #320]	@ (8000824 <HAL_I2S_MspInit+0x1e0>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006ec:	4b4d      	ldr	r3, [pc, #308]	@ (8000824 <HAL_I2S_MspInit+0x1e0>)
 80006ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fa:	4b4a      	ldr	r3, [pc, #296]	@ (8000824 <HAL_I2S_MspInit+0x1e0>)
 80006fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000700:	4a48      	ldr	r2, [pc, #288]	@ (8000824 <HAL_I2S_MspInit+0x1e0>)
 8000702:	f043 0302 	orr.w	r3, r3, #2
 8000706:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800070a:	4b46      	ldr	r3, [pc, #280]	@ (8000824 <HAL_I2S_MspInit+0x1e0>)
 800070c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000710:	f003 0302 	and.w	r3, r3, #2
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000718:	4b42      	ldr	r3, [pc, #264]	@ (8000824 <HAL_I2S_MspInit+0x1e0>)
 800071a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800071e:	4a41      	ldr	r2, [pc, #260]	@ (8000824 <HAL_I2S_MspInit+0x1e0>)
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000728:	4b3e      	ldr	r3, [pc, #248]	@ (8000824 <HAL_I2S_MspInit+0x1e0>)
 800072a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
    /**I2S3 GPIO Configuration
    PA4     ------> I2S3_WS
    PB2     ------> I2S3_SDO
    PC10     ------> I2S3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000736:	2310      	movs	r3, #16
 8000738:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073c:	2302      	movs	r3, #2
 800073e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000748:	2300      	movs	r3, #0
 800074a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800074e:	2306      	movs	r3, #6
 8000750:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000754:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000758:	4619      	mov	r1, r3
 800075a:	4833      	ldr	r0, [pc, #204]	@ (8000828 <HAL_I2S_MspInit+0x1e4>)
 800075c:	f003 fce0 	bl	8004120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000760:	2304      	movs	r3, #4
 8000762:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000766:	2302      	movs	r3, #2
 8000768:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	2300      	movs	r3, #0
 8000774:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000778:	2307      	movs	r3, #7
 800077a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000782:	4619      	mov	r1, r3
 8000784:	4829      	ldr	r0, [pc, #164]	@ (800082c <HAL_I2S_MspInit+0x1e8>)
 8000786:	f003 fccb 	bl	8004120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800078a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800078e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000792:	2302      	movs	r3, #2
 8000794:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007a4:	2306      	movs	r3, #6
 80007a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007aa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80007ae:	4619      	mov	r1, r3
 80007b0:	481f      	ldr	r0, [pc, #124]	@ (8000830 <HAL_I2S_MspInit+0x1ec>)
 80007b2:	f003 fcb5 	bl	8004120 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream0;
 80007b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000834 <HAL_I2S_MspInit+0x1f0>)
 80007b8:	4a1f      	ldr	r2, [pc, #124]	@ (8000838 <HAL_I2S_MspInit+0x1f4>)
 80007ba:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 80007bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000834 <HAL_I2S_MspInit+0x1f0>)
 80007be:	223e      	movs	r2, #62	@ 0x3e
 80007c0:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000834 <HAL_I2S_MspInit+0x1f0>)
 80007c4:	2240      	movs	r2, #64	@ 0x40
 80007c6:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000834 <HAL_I2S_MspInit+0x1f0>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80007ce:	4b19      	ldr	r3, [pc, #100]	@ (8000834 <HAL_I2S_MspInit+0x1f0>)
 80007d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007d4:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007d6:	4b17      	ldr	r3, [pc, #92]	@ (8000834 <HAL_I2S_MspInit+0x1f0>)
 80007d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80007dc:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007de:	4b15      	ldr	r3, [pc, #84]	@ (8000834 <HAL_I2S_MspInit+0x1f0>)
 80007e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007e4:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 80007e6:	4b13      	ldr	r3, [pc, #76]	@ (8000834 <HAL_I2S_MspInit+0x1f0>)
 80007e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007ec:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80007ee:	4b11      	ldr	r3, [pc, #68]	@ (8000834 <HAL_I2S_MspInit+0x1f0>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <HAL_I2S_MspInit+0x1f0>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80007fa:	480e      	ldr	r0, [pc, #56]	@ (8000834 <HAL_I2S_MspInit+0x1f0>)
 80007fc:	f001 fbbc 	bl	8001f78 <HAL_DMA_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <HAL_I2S_MspInit+0x1c6>
    {
      Error_Handler();
 8000806:	f000 fa33 	bl	8000c70 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4a09      	ldr	r2, [pc, #36]	@ (8000834 <HAL_I2S_MspInit+0x1f0>)
 800080e:	645a      	str	r2, [r3, #68]	@ 0x44
 8000810:	4a08      	ldr	r2, [pc, #32]	@ (8000834 <HAL_I2S_MspInit+0x1f0>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000816:	bf00      	nop
 8000818:	37e8      	adds	r7, #232	@ 0xe8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40003c00 	.word	0x40003c00
 8000824:	58024400 	.word	0x58024400
 8000828:	58020000 	.word	0x58020000
 800082c:	58020400 	.word	0x58020400
 8000830:	58020800 	.word	0x58020800
 8000834:	24000124 	.word	0x24000124
 8000838:	40020010 	.word	0x40020010

0800083c <ledInit>:
#define GPIOE_PUPDR          *((volatile uint32_t *)0x5802100C)
#define GPIOE_ODR            *((volatile uint32_t *)0x58021014)
#define GPIOE_RCC_AHB4ENR    *((volatile uint32_t *)0x580244E0)

void inline ledInit()
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
	GPIOE_RCC_AHB4ENR |= 1 << 4;
 8000840:	4b14      	ldr	r3, [pc, #80]	@ (8000894 <ledInit+0x58>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a13      	ldr	r2, [pc, #76]	@ (8000894 <ledInit+0x58>)
 8000846:	f043 0310 	orr.w	r3, r3, #16
 800084a:	6013      	str	r3, [r2, #0]
	GPIOE_MODER &= ~(3 << 6);  // Clear bits 6 and 7
 800084c:	4b12      	ldr	r3, [pc, #72]	@ (8000898 <ledInit+0x5c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a11      	ldr	r2, [pc, #68]	@ (8000898 <ledInit+0x5c>)
 8000852:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000856:	6013      	str	r3, [r2, #0]
	GPIOE_MODER |= (1 << 6);   // Set bit 6
 8000858:	4b0f      	ldr	r3, [pc, #60]	@ (8000898 <ledInit+0x5c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a0e      	ldr	r2, [pc, #56]	@ (8000898 <ledInit+0x5c>)
 800085e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000862:	6013      	str	r3, [r2, #0]
	GPIOE_OTYPER &= ~(1 << 3);
 8000864:	4b0d      	ldr	r3, [pc, #52]	@ (800089c <ledInit+0x60>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a0c      	ldr	r2, [pc, #48]	@ (800089c <ledInit+0x60>)
 800086a:	f023 0308 	bic.w	r3, r3, #8
 800086e:	6013      	str	r3, [r2, #0]
	GPIOE_OSPEEDR |= (3 << 6);
 8000870:	4b0b      	ldr	r3, [pc, #44]	@ (80008a0 <ledInit+0x64>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a0a      	ldr	r2, [pc, #40]	@ (80008a0 <ledInit+0x64>)
 8000876:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800087a:	6013      	str	r3, [r2, #0]
	GPIOE_PUPDR &= ~(3 << 6);
 800087c:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <ledInit+0x68>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a08      	ldr	r2, [pc, #32]	@ (80008a4 <ledInit+0x68>)
 8000882:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000886:	6013      	str	r3, [r2, #0]
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	580244e0 	.word	0x580244e0
 8000898:	58021000 	.word	0x58021000
 800089c:	58021004 	.word	0x58021004
 80008a0:	58021008 	.word	0x58021008
 80008a4:	5802100c 	.word	0x5802100c

080008a8 <ledToggle>:
{
	GPIOE_ODR &= ~(1 << 3);
}

void inline ledToggle()
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
	GPIOE_ODR ^= 1 << 3;
 80008ac:	4b05      	ldr	r3, [pc, #20]	@ (80008c4 <ledToggle+0x1c>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a04      	ldr	r2, [pc, #16]	@ (80008c4 <ledToggle+0x1c>)
 80008b2:	f083 0308 	eor.w	r3, r3, #8
 80008b6:	6013      	str	r3, [r2, #0]
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	58021014 	.word	0x58021014

080008c8 <ledBlink>:

void inline ledBlink(uint32_t millis)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	static uint32_t tickStart = 0;
	uint32_t nowTicks = HAL_GetTick();
 80008d0:	f001 f9be 	bl	8001c50 <HAL_GetTick>
 80008d4:	60f8      	str	r0, [r7, #12]

	if (nowTicks - tickStart > millis)
 80008d6:	4b08      	ldr	r3, [pc, #32]	@ (80008f8 <ledBlink+0x30>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	68fa      	ldr	r2, [r7, #12]
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	687a      	ldr	r2, [r7, #4]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d204      	bcs.n	80008ee <ledBlink+0x26>
	{
		ledToggle();
 80008e4:	f7ff ffe0 	bl	80008a8 <ledToggle>
		tickStart = nowTicks;
 80008e8:	4a03      	ldr	r2, [pc, #12]	@ (80008f8 <ledBlink+0x30>)
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	6013      	str	r3, [r2, #0]
	}
}
 80008ee:	bf00      	nop
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	2400019c 	.word	0x2400019c

080008fc <_Z13add_note_lastP4notehh>:

// Add a note at the end of the list
// ---------------------------------

llist add_note_last(llist list, uint8_t midi_note, uint8_t velocity)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	460b      	mov	r3, r1
 8000906:	70fb      	strb	r3, [r7, #3]
 8000908:	4613      	mov	r3, r2
 800090a:	70bb      	strb	r3, [r7, #2]
    // Add a new element in memory

    note* new_note = (note*)malloc(sizeof(note));
 800090c:	2008      	movs	r0, #8
 800090e:	f007 fcad 	bl	800826c <malloc>
 8000912:	4603      	mov	r3, r0
 8000914:	60bb      	str	r3, [r7, #8]

    // Set the new element values

    new_note->midi_note = midi_note;
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	78fa      	ldrb	r2, [r7, #3]
 800091a:	701a      	strb	r2, [r3, #0]
    new_note->velocity = velocity;
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	78ba      	ldrb	r2, [r7, #2]
 8000920:	705a      	strb	r2, [r3, #1]

    // There is no next element

    new_note->nxt = NULL;
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	2200      	movs	r2, #0
 8000926:	605a      	str	r2, [r3, #4]

    // If list is empty, then simply return the newly created element

    if(list == NULL)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d101      	bne.n	8000932 <_Z13add_note_lastP4notehh+0x36>
    {
        return new_note;
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	e00d      	b.n	800094e <_Z13add_note_lastP4notehh+0x52>

    // Else, walk through the list to find the actual last element

    else
    {
    	note* temp=list;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	60fb      	str	r3, [r7, #12]
        while(temp->nxt != NULL)
 8000936:	e002      	b.n	800093e <_Z13add_note_lastP4notehh+0x42>
        {
            temp = temp->nxt;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	60fb      	str	r3, [r7, #12]
        while(temp->nxt != NULL)
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d1f8      	bne.n	8000938 <_Z13add_note_lastP4notehh+0x3c>
        }
        temp->nxt = new_note;
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	68ba      	ldr	r2, [r7, #8]
 800094a:	605a      	str	r2, [r3, #4]
        return list;
 800094c:	687b      	ldr	r3, [r7, #4]
    }
}
 800094e:	4618      	mov	r0, r3
 8000950:	3710      	adds	r7, #16
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <_Z13get_last_noteP4note>:

// Get pointer to last note in the list
// ------------------------------------

note* get_last_note(llist list)
{
 8000956:	b480      	push	{r7}
 8000958:	b085      	sub	sp, #20
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]

    if(list == NULL)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d101      	bne.n	8000968 <_Z13get_last_noteP4note+0x12>
    {
        return NULL;
 8000964:	2300      	movs	r3, #0
 8000966:	e00a      	b.n	800097e <_Z13get_last_noteP4note+0x28>
    }

    else
        {
        	note* temp=list;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	60fb      	str	r3, [r7, #12]
            while(temp->nxt != NULL)
 800096c:	e002      	b.n	8000974 <_Z13get_last_noteP4note+0x1e>
            {
                temp = temp->nxt;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	60fb      	str	r3, [r7, #12]
            while(temp->nxt != NULL)
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d1f8      	bne.n	800096e <_Z13get_last_noteP4note+0x18>
            }
            return temp;
 800097c:	68fb      	ldr	r3, [r7, #12]
        }
}
 800097e:	4618      	mov	r0, r3
 8000980:	3714      	adds	r7, #20
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <HAL_I2S_TxHalfCpltCallback>:
//		audiobuff[start_index + i + 1] = (uint16_t)signal;
//	}
//}

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b082      	sub	sp, #8
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
	Make_Sound(0);
 8000992:	2000      	movs	r0, #0
 8000994:	f000 f9f8 	bl	8000d88 <_Z10Make_Soundt>
}
 8000998:	bf00      	nop
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int 	i;					// General purpose variable

	note* 		play_note;

	for (i=0; i<BUFF_LEN; i=i+2)
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	e00d      	b.n	80009c8 <main+0x28>
	{
		audiobuff[i] = (uint16_t)((int16_t) 0.0f);			// Left Channel value
 80009ac:	4a4f      	ldr	r2, [pc, #316]	@ (8000aec <main+0x14c>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2100      	movs	r1, #0
 80009b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		audiobuff[i+1] = (uint16_t)((int16_t) 0.0f);		// Right Channel Value
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	3301      	adds	r3, #1
 80009ba:	4a4c      	ldr	r2, [pc, #304]	@ (8000aec <main+0x14c>)
 80009bc:	2100      	movs	r1, #0
 80009be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i=0; i<BUFF_LEN; i=i+2)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	3302      	adds	r3, #2
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80009ce:	dbed      	blt.n	80009ac <main+0xc>
	}

	// Initialize Synth

	params.pitch = 220.0f;
 80009d0:	4b47      	ldr	r3, [pc, #284]	@ (8000af0 <main+0x150>)
 80009d2:	4a48      	ldr	r2, [pc, #288]	@ (8000af4 <main+0x154>)
 80009d4:	601a      	str	r2, [r3, #0]
	params.bend = 0.0f;
 80009d6:	4b46      	ldr	r3, [pc, #280]	@ (8000af0 <main+0x150>)
 80009d8:	f04f 0200 	mov.w	r2, #0
 80009dc:	605a      	str	r2, [r3, #4]

	params.detune = 1.0f;
 80009de:	4b44      	ldr	r3, [pc, #272]	@ (8000af0 <main+0x150>)
 80009e0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80009e4:	609a      	str	r2, [r3, #8]

	params.osc1_waveform = 3;
 80009e6:	4b42      	ldr	r3, [pc, #264]	@ (8000af0 <main+0x150>)
 80009e8:	2203      	movs	r2, #3
 80009ea:	731a      	strb	r2, [r3, #12]
	params.osc2_waveform = 3;
 80009ec:	4b40      	ldr	r3, [pc, #256]	@ (8000af0 <main+0x150>)
 80009ee:	2203      	movs	r2, #3
 80009f0:	735a      	strb	r2, [r3, #13]

	params.osc1_octave = 1.0f;
 80009f2:	4b3f      	ldr	r3, [pc, #252]	@ (8000af0 <main+0x150>)
 80009f4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80009f8:	611a      	str	r2, [r3, #16]
	params.osc2_octave = 1.0f;
 80009fa:	4b3d      	ldr	r3, [pc, #244]	@ (8000af0 <main+0x150>)
 80009fc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000a00:	615a      	str	r2, [r3, #20]

	params.osc1_mix = 0.2f;
 8000a02:	4b3b      	ldr	r3, [pc, #236]	@ (8000af0 <main+0x150>)
 8000a04:	4a3c      	ldr	r2, [pc, #240]	@ (8000af8 <main+0x158>)
 8000a06:	619a      	str	r2, [r3, #24]
	params.osc2_mix = 0.2f;
 8000a08:	4b39      	ldr	r3, [pc, #228]	@ (8000af0 <main+0x150>)
 8000a0a:	4a3b      	ldr	r2, [pc, #236]	@ (8000af8 <main+0x158>)
 8000a0c:	61da      	str	r2, [r3, #28]

	params.cutoff = 24.0f;
 8000a0e:	4b38      	ldr	r3, [pc, #224]	@ (8000af0 <main+0x150>)
 8000a10:	4a3a      	ldr	r2, [pc, #232]	@ (8000afc <main+0x15c>)
 8000a12:	621a      	str	r2, [r3, #32]
	params.reso = 1.0f;
 8000a14:	4b36      	ldr	r3, [pc, #216]	@ (8000af0 <main+0x150>)
 8000a16:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000a1a:	625a      	str	r2, [r3, #36]	@ 0x24

	params.adsr1_attack = 0.1f;
 8000a1c:	4b34      	ldr	r3, [pc, #208]	@ (8000af0 <main+0x150>)
 8000a1e:	4a38      	ldr	r2, [pc, #224]	@ (8000b00 <main+0x160>)
 8000a20:	629a      	str	r2, [r3, #40]	@ 0x28
	params.adsr1_decay = 0.1f;
 8000a22:	4b33      	ldr	r3, [pc, #204]	@ (8000af0 <main+0x150>)
 8000a24:	4a36      	ldr	r2, [pc, #216]	@ (8000b00 <main+0x160>)
 8000a26:	62da      	str	r2, [r3, #44]	@ 0x2c
	params.adsr1_sustain = 0.5f;
 8000a28:	4b31      	ldr	r3, [pc, #196]	@ (8000af0 <main+0x150>)
 8000a2a:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8000a2e:	631a      	str	r2, [r3, #48]	@ 0x30
	params.adsr1_release = 0.1f;
 8000a30:	4b2f      	ldr	r3, [pc, #188]	@ (8000af0 <main+0x150>)
 8000a32:	4a33      	ldr	r2, [pc, #204]	@ (8000b00 <main+0x160>)
 8000a34:	635a      	str	r2, [r3, #52]	@ 0x34

	params.adsr2_attack = 0.1f;
 8000a36:	4b2e      	ldr	r3, [pc, #184]	@ (8000af0 <main+0x150>)
 8000a38:	4a31      	ldr	r2, [pc, #196]	@ (8000b00 <main+0x160>)
 8000a3a:	639a      	str	r2, [r3, #56]	@ 0x38
	params.adsr2_decay = 0.1f;
 8000a3c:	4b2c      	ldr	r3, [pc, #176]	@ (8000af0 <main+0x150>)
 8000a3e:	4a30      	ldr	r2, [pc, #192]	@ (8000b00 <main+0x160>)
 8000a40:	63da      	str	r2, [r3, #60]	@ 0x3c
	params.adsr2_sustain = 0.5f;
 8000a42:	4b2b      	ldr	r3, [pc, #172]	@ (8000af0 <main+0x150>)
 8000a44:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8000a48:	641a      	str	r2, [r3, #64]	@ 0x40
	params.adsr2_release = 0.1f;
 8000a4a:	4b29      	ldr	r3, [pc, #164]	@ (8000af0 <main+0x150>)
 8000a4c:	4a2c      	ldr	r2, [pc, #176]	@ (8000b00 <main+0x160>)
 8000a4e:	645a      	str	r2, [r3, #68]	@ 0x44

	params.lfo1_frequency = 10.0f;
 8000a50:	4b27      	ldr	r3, [pc, #156]	@ (8000af0 <main+0x150>)
 8000a52:	4a2c      	ldr	r2, [pc, #176]	@ (8000b04 <main+0x164>)
 8000a54:	649a      	str	r2, [r3, #72]	@ 0x48
	params.lfo1_depth = 0.8f;
 8000a56:	4b26      	ldr	r3, [pc, #152]	@ (8000af0 <main+0x150>)
 8000a58:	4a2b      	ldr	r2, [pc, #172]	@ (8000b08 <main+0x168>)
 8000a5a:	64da      	str	r2, [r3, #76]	@ 0x4c

	params.lfo2_frequency = 10.0f;
 8000a5c:	4b24      	ldr	r3, [pc, #144]	@ (8000af0 <main+0x150>)
 8000a5e:	4a29      	ldr	r2, [pc, #164]	@ (8000b04 <main+0x164>)
 8000a60:	651a      	str	r2, [r3, #80]	@ 0x50
	params.lfo2_depth = 0.8f;
 8000a62:	4b23      	ldr	r3, [pc, #140]	@ (8000af0 <main+0x150>)
 8000a64:	4a28      	ldr	r2, [pc, #160]	@ (8000b08 <main+0x168>)
 8000a66:	655a      	str	r2, [r3, #84]	@ 0x54

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000a68:	f000 f8d6 	bl	8000c18 <_ZL10MPU_Configv>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a6c:	f001 f86a 	bl	8001b44 <HAL_Init>

  /* USER CODE BEGIN Init */

  ledInit();
 8000a70:	f7ff fee4 	bl	800083c <ledInit>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a74:	f000 f854 	bl	8000b20 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a78:	f7ff fc98 	bl	80003ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000a7c:	f7ff fc76 	bl	800036c <MX_DMA_Init>
  MX_I2S3_Init();
 8000a80:	f7ff fdae 	bl	80005e0 <MX_I2S3_Init>
  MX_I2C1_Init();
 8000a84:	f7ff fd04 	bl	8000490 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

//  synth.pitch = 250.0f;
	note_list = add_note_last(note_list, 64, 124);
 8000a88:	4b20      	ldr	r3, [pc, #128]	@ (8000b0c <main+0x16c>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	227c      	movs	r2, #124	@ 0x7c
 8000a8e:	2140      	movs	r1, #64	@ 0x40
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff33 	bl	80008fc <_Z13add_note_lastP4notehh>
 8000a96:	4603      	mov	r3, r0
 8000a98:	4a1c      	ldr	r2, [pc, #112]	@ (8000b0c <main+0x16c>)
 8000a9a:	6013      	str	r3, [r2, #0]
	new_note_event = 1;
 8000a9c:	4b1c      	ldr	r3, [pc, #112]	@ (8000b10 <main+0x170>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	701a      	strb	r2, [r3, #0]

  HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *) audiobuff, BUFF_LEN);
 8000aa2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000aa6:	4911      	ldr	r1, [pc, #68]	@ (8000aec <main+0x14c>)
 8000aa8:	481a      	ldr	r0, [pc, #104]	@ (8000b14 <main+0x174>)
 8000aaa:	f003 ff5f 	bl	800496c <HAL_I2S_Transmit_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		ledBlink(1000);
 8000aae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ab2:	f7ff ff09 	bl	80008c8 <ledBlink>


		play_note = get_last_note(note_list);
 8000ab6:	4b15      	ldr	r3, [pc, #84]	@ (8000b0c <main+0x16c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff ff4b 	bl	8000956 <_Z13get_last_noteP4note>
 8000ac0:	6038      	str	r0, [r7, #0]

		if (play_note == NULL)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d103      	bne.n	8000ad0 <main+0x130>
		{
			trig = 0;
 8000ac8:	4b13      	ldr	r3, [pc, #76]	@ (8000b18 <main+0x178>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
 8000ace:	e7ee      	b.n	8000aae <main+0x10e>
		}
		else
		{
			params.pitch = pitch_table[(play_note->midi_note)-24];
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	3b18      	subs	r3, #24
 8000ad6:	4a11      	ldr	r2, [pc, #68]	@ (8000b1c <main+0x17c>)
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	4413      	add	r3, r2
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a04      	ldr	r2, [pc, #16]	@ (8000af0 <main+0x150>)
 8000ae0:	6013      	str	r3, [r2, #0]
			trig = 1;
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8000b18 <main+0x178>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	701a      	strb	r2, [r3, #0]
		ledBlink(1000);
 8000ae8:	e7e1      	b.n	8000aae <main+0x10e>
 8000aea:	bf00      	nop
 8000aec:	240001a4 	.word	0x240001a4
 8000af0:	240006a8 	.word	0x240006a8
 8000af4:	435c0000 	.word	0x435c0000
 8000af8:	3e4ccccd 	.word	0x3e4ccccd
 8000afc:	41c00000 	.word	0x41c00000
 8000b00:	3dcccccd 	.word	0x3dcccccd
 8000b04:	41200000 	.word	0x41200000
 8000b08:	3f4ccccd 	.word	0x3f4ccccd
 8000b0c:	240006a4 	.word	0x240006a4
 8000b10:	24000701 	.word	0x24000701
 8000b14:	240000d0 	.word	0x240000d0
 8000b18:	24000700 	.word	0x24000700
 8000b1c:	0800852c 	.word	0x0800852c

08000b20 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b09c      	sub	sp, #112	@ 0x70
 8000b24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b2a:	224c      	movs	r2, #76	@ 0x4c
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f007 fc5a 	bl	80083e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	2220      	movs	r2, #32
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f007 fc54 	bl	80083e8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b40:	2002      	movs	r0, #2
 8000b42:	f004 f81f 	bl	8004b84 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b46:	2300      	movs	r3, #0
 8000b48:	603b      	str	r3, [r7, #0]
 8000b4a:	4b32      	ldr	r3, [pc, #200]	@ (8000c14 <_Z18SystemClock_Configv+0xf4>)
 8000b4c:	699b      	ldr	r3, [r3, #24]
 8000b4e:	4a31      	ldr	r2, [pc, #196]	@ (8000c14 <_Z18SystemClock_Configv+0xf4>)
 8000b50:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b54:	6193      	str	r3, [r2, #24]
 8000b56:	4b2f      	ldr	r3, [pc, #188]	@ (8000c14 <_Z18SystemClock_Configv+0xf4>)
 8000b58:	699b      	ldr	r3, [r3, #24]
 8000b5a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b62:	bf00      	nop
 8000b64:	4b2b      	ldr	r3, [pc, #172]	@ (8000c14 <_Z18SystemClock_Configv+0xf4>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b70:	bf14      	ite	ne
 8000b72:	2301      	movne	r3, #1
 8000b74:	2300      	moveq	r3, #0
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d1f3      	bne.n	8000b64 <_Z18SystemClock_Configv+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b80:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b84:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b86:	2302      	movs	r3, #2
 8000b88:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000b92:	232c      	movs	r3, #44	@ 0x2c
 8000b94:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000b96:	2301      	movs	r3, #1
 8000b98:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ba2:	230c      	movs	r3, #12
 8000ba4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f004 f820 	bl	8004bf8 <HAL_RCC_OscConfig>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	bf14      	ite	ne
 8000bbe:	2301      	movne	r3, #1
 8000bc0:	2300      	moveq	r3, #0
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 8000bc8:	f000 f852 	bl	8000c70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bcc:	233f      	movs	r3, #63	@ 0x3f
 8000bce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000bd8:	2308      	movs	r3, #8
 8000bda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000bdc:	2340      	movs	r3, #64	@ 0x40
 8000bde:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000be0:	2340      	movs	r3, #64	@ 0x40
 8000be2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000be4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000be8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000bea:	2340      	movs	r3, #64	@ 0x40
 8000bec:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2103      	movs	r1, #3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f004 fbda 	bl	80053ac <HAL_RCC_ClockConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	bf14      	ite	ne
 8000bfe:	2301      	movne	r3, #1
 8000c00:	2300      	moveq	r3, #0
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <_Z18SystemClock_Configv+0xec>
  {
    Error_Handler();
 8000c08:	f000 f832 	bl	8000c70 <Error_Handler>
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	3770      	adds	r7, #112	@ 0x70
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	58024800 	.word	0x58024800

08000c18 <_ZL10MPU_Configv>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c1e:	463b      	mov	r3, r7
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000c2a:	f001 f92d 	bl	8001e88 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000c3a:	231f      	movs	r3, #31
 8000c3c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000c3e:	2387      	movs	r3, #135	@ 0x87
 8000c40:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000c46:	2300      	movs	r3, #0
 8000c48:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c52:	2300      	movs	r3, #0
 8000c54:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c56:	2300      	movs	r3, #0
 8000c58:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c5a:	463b      	mov	r3, r7
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f001 f94b 	bl	8001ef8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c62:	2004      	movs	r0, #4
 8000c64:	f001 f928 	bl	8001eb8 <HAL_MPU_Enable>

}
 8000c68:	bf00      	nop
 8000c6a:	3710      	adds	r7, #16
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c74:	b672      	cpsid	i
}
 8000c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <Error_Handler+0x8>

08000c7c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d107      	bne.n	8000c9c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d102      	bne.n	8000c9c <_Z41__static_initialization_and_destruction_0ii+0x20>
Codec codec;
 8000c96:	4809      	ldr	r0, [pc, #36]	@ (8000cbc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000c98:	f7ff fb38 	bl	800030c <_ZN5CodecC1Ev>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d107      	bne.n	8000cb2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d102      	bne.n	8000cb2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000cac:	4803      	ldr	r0, [pc, #12]	@ (8000cbc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000cae:	f7ff fb3d 	bl	800032c <_ZN5CodecD1Ev>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	240001a0 	.word	0x240001a0

08000cc0 <_GLOBAL__sub_I_codec>:
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000cc8:	2001      	movs	r0, #1
 8000cca:	f7ff ffd7 	bl	8000c7c <_Z41__static_initialization_and_destruction_0ii>
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <_GLOBAL__sub_D_codec>:
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000cd8:	2000      	movs	r0, #0
 8000cda:	f7ff ffcf 	bl	8000c7c <_Z41__static_initialization_and_destruction_0ii>
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8000d10 <HAL_MspInit+0x30>)
 8000ce8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cec:	4a08      	ldr	r2, [pc, #32]	@ (8000d10 <HAL_MspInit+0x30>)
 8000cee:	f043 0302 	orr.w	r3, r3, #2
 8000cf2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000cf6:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <HAL_MspInit+0x30>)
 8000cf8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cfc:	f003 0302 	and.w	r3, r3, #2
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	58024400 	.word	0x58024400

08000d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <NMI_Handler+0x4>

08000d1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <HardFault_Handler+0x4>

08000d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <MemManage_Handler+0x4>

08000d2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <BusFault_Handler+0x4>

08000d34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <UsageFault_Handler+0x4>

08000d3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d6a:	f000 ff5d 	bl	8001c28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8000d78:	4802      	ldr	r0, [pc, #8]	@ (8000d84 <DMA1_Stream0_IRQHandler+0x10>)
 8000d7a:	f001 febf 	bl	8002afc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	24000124 	.word	0x24000124

08000d88 <_Z10Make_Soundt>:

float fastsin(uint32_t);


void Make_Sound(uint16_t start_index)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b08f      	sub	sp, #60	@ 0x3c
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	80fb      	strh	r3, [r7, #6]
	static float_t		attack2_incr=0;												// ADSR increment
	static float_t		decay2_incr=0;
	static float_t		release2_incr=0;

	static float_t		lfo1_wtb_pointer=0;
	float_t				lfo1_wtb_incr=0;
 8000d92:	f04f 0300 	mov.w	r3, #0
 8000d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float_t				lfo1_output=0;
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	633b      	str	r3, [r7, #48]	@ 0x30

	static float_t		lfo2_wtb_pointer=0;
	float_t				lfo2_wtb_incr=0;
 8000d9e:	f04f 0300 	mov.w	r3, #0
 8000da2:	62bb      	str	r3, [r7, #40]	@ 0x28
	float_t				lfo2_output=0;
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	627b      	str	r3, [r7, #36]	@ 0x24
//	GPIO_SetBits(GPIOD, GPIO_Pin_13);					// Set LED_13 (for debug)


	// Compute ADSR1 & ADSR2 state & increment

	if (new_note_event)																// If there is a new note to play
 8000daa:	4bc9      	ldr	r3, [pc, #804]	@ (80010d0 <_Z10Make_Soundt+0x348>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d02e      	beq.n	8000e10 <_Z10Make_Soundt+0x88>
	{
		new_note_event = 0;															// Reset flag
 8000db2:	4bc7      	ldr	r3, [pc, #796]	@ (80010d0 <_Z10Make_Soundt+0x348>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]
		adsr1_state = 1;															// Set ADSR to 'Attack' state
 8000db8:	4bc6      	ldr	r3, [pc, #792]	@ (80010d4 <_Z10Make_Soundt+0x34c>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	701a      	strb	r2, [r3, #0]
		adsr2_state = 1;
 8000dbe:	4bc6      	ldr	r3, [pc, #792]	@ (80010d8 <_Z10Make_Soundt+0x350>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	701a      	strb	r2, [r3, #0]

		attack1_incr = (1 - adsr1_output)/(params.adsr1_attack * SAMPLERATE);		// Compute increment
 8000dc4:	4bc5      	ldr	r3, [pc, #788]	@ (80010dc <_Z10Make_Soundt+0x354>)
 8000dc6:	edd3 7a00 	vldr	s15, [r3]
 8000dca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000dce:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000dd2:	4bc3      	ldr	r3, [pc, #780]	@ (80010e0 <_Z10Make_Soundt+0x358>)
 8000dd4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8000dd8:	ed9f 7ac2 	vldr	s14, [pc, #776]	@ 80010e4 <_Z10Make_Soundt+0x35c>
 8000ddc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000de0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000de4:	4bc0      	ldr	r3, [pc, #768]	@ (80010e8 <_Z10Make_Soundt+0x360>)
 8000de6:	edc3 7a00 	vstr	s15, [r3]
		attack2_incr = (1 - adsr2_output)/(params.adsr2_attack * SAMPLERATE);
 8000dea:	4bc0      	ldr	r3, [pc, #768]	@ (80010ec <_Z10Make_Soundt+0x364>)
 8000dec:	edd3 7a00 	vldr	s15, [r3]
 8000df0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000df4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000df8:	4bb9      	ldr	r3, [pc, #740]	@ (80010e0 <_Z10Make_Soundt+0x358>)
 8000dfa:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8000dfe:	ed9f 7ab9 	vldr	s14, [pc, #740]	@ 80010e4 <_Z10Make_Soundt+0x35c>
 8000e02:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e0a:	4bb9      	ldr	r3, [pc, #740]	@ (80010f0 <_Z10Make_Soundt+0x368>)
 8000e0c:	edc3 7a00 	vstr	s15, [r3]
	}

	if (trig == 0)																	// If there is no note to play
 8000e10:	4bb8      	ldr	r3, [pc, #736]	@ (80010f4 <_Z10Make_Soundt+0x36c>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d12b      	bne.n	8000e70 <_Z10Make_Soundt+0xe8>
	{
		if (adsr1_state !=4)
 8000e18:	4bae      	ldr	r3, [pc, #696]	@ (80010d4 <_Z10Make_Soundt+0x34c>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b04      	cmp	r3, #4
 8000e1e:	d011      	beq.n	8000e44 <_Z10Make_Soundt+0xbc>
		{
			adsr1_state = 4;														// If not already done, set ADSR to 'release' state
 8000e20:	4bac      	ldr	r3, [pc, #688]	@ (80010d4 <_Z10Make_Soundt+0x34c>)
 8000e22:	2204      	movs	r2, #4
 8000e24:	701a      	strb	r2, [r3, #0]
			release1_incr = adsr1_output /(params.adsr1_release * SAMPLERATE);		// Compute increment
 8000e26:	4bad      	ldr	r3, [pc, #692]	@ (80010dc <_Z10Make_Soundt+0x354>)
 8000e28:	edd3 6a00 	vldr	s13, [r3]
 8000e2c:	4bac      	ldr	r3, [pc, #688]	@ (80010e0 <_Z10Make_Soundt+0x358>)
 8000e2e:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8000e32:	ed9f 7aac 	vldr	s14, [pc, #688]	@ 80010e4 <_Z10Make_Soundt+0x35c>
 8000e36:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e3e:	4bae      	ldr	r3, [pc, #696]	@ (80010f8 <_Z10Make_Soundt+0x370>)
 8000e40:	edc3 7a00 	vstr	s15, [r3]
		}

		if (adsr2_state !=4)
 8000e44:	4ba4      	ldr	r3, [pc, #656]	@ (80010d8 <_Z10Make_Soundt+0x350>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b04      	cmp	r3, #4
 8000e4a:	d011      	beq.n	8000e70 <_Z10Make_Soundt+0xe8>
		{
			adsr2_state = 4;														// If not already done, set ADSR to 'release' state
 8000e4c:	4ba2      	ldr	r3, [pc, #648]	@ (80010d8 <_Z10Make_Soundt+0x350>)
 8000e4e:	2204      	movs	r2, #4
 8000e50:	701a      	strb	r2, [r3, #0]
			release2_incr = adsr2_output /(params.adsr2_release * SAMPLERATE);		// Compute increment
 8000e52:	4ba6      	ldr	r3, [pc, #664]	@ (80010ec <_Z10Make_Soundt+0x364>)
 8000e54:	edd3 6a00 	vldr	s13, [r3]
 8000e58:	4ba1      	ldr	r3, [pc, #644]	@ (80010e0 <_Z10Make_Soundt+0x358>)
 8000e5a:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8000e5e:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 80010e4 <_Z10Make_Soundt+0x35c>
 8000e62:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e6a:	4ba4      	ldr	r3, [pc, #656]	@ (80010fc <_Z10Make_Soundt+0x374>)
 8000e6c:	edc3 7a00 	vstr	s15, [r3]
		}

	}

	decay1_incr = (1-params.adsr1_sustain) / (params.adsr1_decay * SAMPLERATE);
 8000e70:	4b9b      	ldr	r3, [pc, #620]	@ (80010e0 <_Z10Make_Soundt+0x358>)
 8000e72:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8000e76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000e7a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000e7e:	4b98      	ldr	r3, [pc, #608]	@ (80010e0 <_Z10Make_Soundt+0x358>)
 8000e80:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8000e84:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 80010e4 <_Z10Make_Soundt+0x35c>
 8000e88:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e90:	4b9b      	ldr	r3, [pc, #620]	@ (8001100 <_Z10Make_Soundt+0x378>)
 8000e92:	edc3 7a00 	vstr	s15, [r3]
	decay2_incr = (1-params.adsr2_sustain) / (params.adsr2_decay * SAMPLERATE);
 8000e96:	4b92      	ldr	r3, [pc, #584]	@ (80010e0 <_Z10Make_Soundt+0x358>)
 8000e98:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8000e9c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000ea0:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000ea4:	4b8e      	ldr	r3, [pc, #568]	@ (80010e0 <_Z10Make_Soundt+0x358>)
 8000ea6:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8000eaa:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 80010e4 <_Z10Make_Soundt+0x35c>
 8000eae:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000eb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000eb6:	4b93      	ldr	r3, [pc, #588]	@ (8001104 <_Z10Make_Soundt+0x37c>)
 8000eb8:	edc3 7a00 	vstr	s15, [r3]

	// Step 2 : Fills the buffer with individual samples
	// -------------------------------------------------


	i = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	86fb      	strh	r3, [r7, #54]	@ 0x36

	while(i<BUFF_LEN_DIV2)
 8000ec0:	f000 bd36 	b.w	8001930 <_Z10Make_Soundt+0xba8>
	{

		// Compute LFO1 parameters

		lfo1_wtb_incr = WTB_LEN * params.lfo1_frequency / SAMPLERATE;		// Increment value of the LFO wavetable pointer
 8000ec4:	4b86      	ldr	r3, [pc, #536]	@ (80010e0 <_Z10Make_Soundt+0x358>)
 8000ec6:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8000eca:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 8001108 <_Z10Make_Soundt+0x380>
 8000ece:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ed2:	eddf 6a84 	vldr	s13, [pc, #528]	@ 80010e4 <_Z10Make_Soundt+0x35c>
 8000ed6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eda:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		lfo1_wtb_pointer = lfo1_wtb_pointer + lfo1_wtb_incr;
 8000ede:	4b8b      	ldr	r3, [pc, #556]	@ (800110c <_Z10Make_Soundt+0x384>)
 8000ee0:	ed93 7a00 	vldr	s14, [r3]
 8000ee4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000ee8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eec:	4b87      	ldr	r3, [pc, #540]	@ (800110c <_Z10Make_Soundt+0x384>)
 8000eee:	edc3 7a00 	vstr	s15, [r3]

		if (lfo1_wtb_pointer > WTB_LEN)
 8000ef2:	4b86      	ldr	r3, [pc, #536]	@ (800110c <_Z10Make_Soundt+0x384>)
 8000ef4:	edd3 7a00 	vldr	s15, [r3]
 8000ef8:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8001108 <_Z10Make_Soundt+0x380>
 8000efc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f04:	dd09      	ble.n	8000f1a <_Z10Make_Soundt+0x192>
		{
			lfo1_wtb_pointer = lfo1_wtb_pointer - WTB_LEN;
 8000f06:	4b81      	ldr	r3, [pc, #516]	@ (800110c <_Z10Make_Soundt+0x384>)
 8000f08:	edd3 7a00 	vldr	s15, [r3]
 8000f0c:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 8001108 <_Z10Make_Soundt+0x380>
 8000f10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f14:	4b7d      	ldr	r3, [pc, #500]	@ (800110c <_Z10Make_Soundt+0x384>)
 8000f16:	edc3 7a00 	vstr	s15, [r3]
		}

		lfo1_output = params.lfo1_depth * sinewave[(uint16_t)lfo1_wtb_pointer];
 8000f1a:	4b71      	ldr	r3, [pc, #452]	@ (80010e0 <_Z10Make_Soundt+0x358>)
 8000f1c:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8000f20:	4b7a      	ldr	r3, [pc, #488]	@ (800110c <_Z10Make_Soundt+0x384>)
 8000f22:	edd3 7a00 	vldr	s15, [r3]
 8000f26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f2a:	ee17 3a90 	vmov	r3, s15
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	4a77      	ldr	r2, [pc, #476]	@ (8001110 <_Z10Make_Soundt+0x388>)
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	4413      	add	r3, r2
 8000f36:	edd3 7a00 	vldr	s15, [r3]
 8000f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f3e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

		if (params.lfo1_depth==0) lfo1_output = 0;
 8000f42:	4b67      	ldr	r3, [pc, #412]	@ (80010e0 <_Z10Make_Soundt+0x358>)
 8000f44:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8000f48:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f50:	d102      	bne.n	8000f58 <_Z10Make_Soundt+0x1d0>
 8000f52:	f04f 0300 	mov.w	r3, #0
 8000f56:	633b      	str	r3, [r7, #48]	@ 0x30


		// Compute LFO2 parameters

		lfo2_wtb_incr = WTB_LEN * params.lfo2_frequency / SAMPLERATE;		// Increment value of the LFO wavetable pointer
 8000f58:	4b61      	ldr	r3, [pc, #388]	@ (80010e0 <_Z10Make_Soundt+0x358>)
 8000f5a:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8000f5e:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8001108 <_Z10Make_Soundt+0x380>
 8000f62:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f66:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80010e4 <_Z10Make_Soundt+0x35c>
 8000f6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f6e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

		lfo2_wtb_pointer = lfo2_wtb_pointer + lfo2_wtb_incr;
 8000f72:	4b68      	ldr	r3, [pc, #416]	@ (8001114 <_Z10Make_Soundt+0x38c>)
 8000f74:	ed93 7a00 	vldr	s14, [r3]
 8000f78:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000f7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f80:	4b64      	ldr	r3, [pc, #400]	@ (8001114 <_Z10Make_Soundt+0x38c>)
 8000f82:	edc3 7a00 	vstr	s15, [r3]

		if (lfo2_wtb_pointer > WTB_LEN)
 8000f86:	4b63      	ldr	r3, [pc, #396]	@ (8001114 <_Z10Make_Soundt+0x38c>)
 8000f88:	edd3 7a00 	vldr	s15, [r3]
 8000f8c:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8001108 <_Z10Make_Soundt+0x380>
 8000f90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f98:	dd09      	ble.n	8000fae <_Z10Make_Soundt+0x226>
		{
			lfo2_wtb_pointer = lfo2_wtb_pointer - WTB_LEN;
 8000f9a:	4b5e      	ldr	r3, [pc, #376]	@ (8001114 <_Z10Make_Soundt+0x38c>)
 8000f9c:	edd3 7a00 	vldr	s15, [r3]
 8000fa0:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8001108 <_Z10Make_Soundt+0x380>
 8000fa4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000fa8:	4b5a      	ldr	r3, [pc, #360]	@ (8001114 <_Z10Make_Soundt+0x38c>)
 8000faa:	edc3 7a00 	vstr	s15, [r3]
		}

		lfo2_output = params.lfo2_depth * sinewave[(uint16_t)lfo2_wtb_pointer];
 8000fae:	4b4c      	ldr	r3, [pc, #304]	@ (80010e0 <_Z10Make_Soundt+0x358>)
 8000fb0:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8000fb4:	4b57      	ldr	r3, [pc, #348]	@ (8001114 <_Z10Make_Soundt+0x38c>)
 8000fb6:	edd3 7a00 	vldr	s15, [r3]
 8000fba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fbe:	ee17 3a90 	vmov	r3, s15
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	4a52      	ldr	r2, [pc, #328]	@ (8001110 <_Z10Make_Soundt+0x388>)
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4413      	add	r3, r2
 8000fca:	edd3 7a00 	vldr	s15, [r3]
 8000fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fd2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

		if (params.lfo1_depth==0) lfo1_output = 0;
 8000fd6:	4b42      	ldr	r3, [pc, #264]	@ (80010e0 <_Z10Make_Soundt+0x358>)
 8000fd8:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8000fdc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe4:	d102      	bne.n	8000fec <_Z10Make_Soundt+0x264>
 8000fe6:	f04f 0300 	mov.w	r3, #0
 8000fea:	633b      	str	r3, [r7, #48]	@ 0x30


		// Compute pitch & oscillators increments

		pitch = params.pitch * (1 + lfo2_output) + params.bend;
 8000fec:	4b3c      	ldr	r3, [pc, #240]	@ (80010e0 <_Z10Make_Soundt+0x358>)
 8000fee:	ed93 7a00 	vldr	s14, [r3]
 8000ff2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000ff6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000ffe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001002:	4b37      	ldr	r3, [pc, #220]	@ (80010e0 <_Z10Make_Soundt+0x358>)
 8001004:	edd3 7a01 	vldr	s15, [r3, #4]
 8001008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800100c:	edc7 7a08 	vstr	s15, [r7, #32]

		//osc_1_wtb_incr = WTB_LEN * (pitch * params.osc1_octave * (1.0f+0.5f*osc_2)) / SAMPLERATE;						// Increment value of the OSC1 wavetable pointer
		osc_1_wtb_incr = WTB_LEN * (pitch * params.osc1_octave) / SAMPLERATE;						// Increment value of the OSC1 wavetable pointer
 8001010:	4b33      	ldr	r3, [pc, #204]	@ (80010e0 <_Z10Make_Soundt+0x358>)
 8001012:	ed93 7a04 	vldr	s14, [r3, #16]
 8001016:	edd7 7a08 	vldr	s15, [r7, #32]
 800101a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800101e:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8001108 <_Z10Make_Soundt+0x380>
 8001022:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001026:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 80010e4 <_Z10Make_Soundt+0x35c>
 800102a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800102e:	edc7 7a07 	vstr	s15, [r7, #28]
		osc_2_wtb_incr = WTB_LEN * (pitch * params.osc2_octave * params.detune) / SAMPLERATE;		// Increment value of the OSC2 wavetable pointer
 8001032:	4b2b      	ldr	r3, [pc, #172]	@ (80010e0 <_Z10Make_Soundt+0x358>)
 8001034:	ed93 7a05 	vldr	s14, [r3, #20]
 8001038:	edd7 7a08 	vldr	s15, [r7, #32]
 800103c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001040:	4b27      	ldr	r3, [pc, #156]	@ (80010e0 <_Z10Make_Soundt+0x358>)
 8001042:	edd3 7a02 	vldr	s15, [r3, #8]
 8001046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800104a:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001108 <_Z10Make_Soundt+0x380>
 800104e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001052:	eddf 6a24 	vldr	s13, [pc, #144]	@ 80010e4 <_Z10Make_Soundt+0x35c>
 8001056:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800105a:	edc7 7a06 	vstr	s15, [r7, #24]


		// OSC1 Perform Linear Interpolation between 'a' and 'b' points

		a  = (int) osc_1_wtb_pointer;									// Compute 'a' and 'b' indexes
 800105e:	4b2e      	ldr	r3, [pc, #184]	@ (8001118 <_Z10Make_Soundt+0x390>)
 8001060:	edd3 7a00 	vldr	s15, [r3]
 8001064:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001068:	ee17 3a90 	vmov	r3, s15
 800106c:	82fb      	strh	r3, [r7, #22]
		da = osc_1_wtb_pointer - a;										// and both 'da' and 'db' distances
 800106e:	4b2a      	ldr	r3, [pc, #168]	@ (8001118 <_Z10Make_Soundt+0x390>)
 8001070:	ed93 7a00 	vldr	s14, [r3]
 8001074:	8afb      	ldrh	r3, [r7, #22]
 8001076:	ee07 3a90 	vmov	s15, r3
 800107a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800107e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001082:	edc7 7a04 	vstr	s15, [r7, #16]
		b  = a + 1;
 8001086:	8afb      	ldrh	r3, [r7, #22]
 8001088:	3301      	adds	r3, #1
 800108a:	86bb      	strh	r3, [r7, #52]	@ 0x34
		db = b - osc_1_wtb_pointer;
 800108c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800108e:	ee07 3a90 	vmov	s15, r3
 8001092:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001096:	4b20      	ldr	r3, [pc, #128]	@ (8001118 <_Z10Make_Soundt+0x390>)
 8001098:	edd3 7a00 	vldr	s15, [r3]
 800109c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010a0:	edc7 7a03 	vstr	s15, [r7, #12]

		if (b==WTB_LEN) b=0;											// if 'b' passes the end of the table, use 0
 80010a4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80010a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010aa:	d101      	bne.n	80010b0 <_Z10Make_Soundt+0x328>
 80010ac:	2300      	movs	r3, #0
 80010ae:	86bb      	strh	r3, [r7, #52]	@ 0x34

		switch (params.osc1_waveform)
 80010b0:	4b0b      	ldr	r3, [pc, #44]	@ (80010e0 <_Z10Make_Soundt+0x358>)
 80010b2:	7b1b      	ldrb	r3, [r3, #12]
 80010b4:	2b03      	cmp	r3, #3
 80010b6:	f200 8099 	bhi.w	80011ec <_Z10Make_Soundt+0x464>
 80010ba:	a201      	add	r2, pc, #4	@ (adr r2, 80010c0 <_Z10Make_Soundt+0x338>)
 80010bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c0:	0800111d 	.word	0x0800111d
 80010c4:	08001151 	.word	0x08001151
 80010c8:	08001185 	.word	0x08001185
 80010cc:	080011b9 	.word	0x080011b9
 80010d0:	24000701 	.word	0x24000701
 80010d4:	24000748 	.word	0x24000748
 80010d8:	2400075c 	.word	0x2400075c
 80010dc:	24000744 	.word	0x24000744
 80010e0:	240006a8 	.word	0x240006a8
 80010e4:	473b8000 	.word	0x473b8000
 80010e8:	2400074c 	.word	0x2400074c
 80010ec:	24000758 	.word	0x24000758
 80010f0:	24000760 	.word	0x24000760
 80010f4:	24000700 	.word	0x24000700
 80010f8:	24000754 	.word	0x24000754
 80010fc:	24000768 	.word	0x24000768
 8001100:	24000750 	.word	0x24000750
 8001104:	24000764 	.word	0x24000764
 8001108:	44800000 	.word	0x44800000
 800110c:	2400076c 	.word	0x2400076c
 8001110:	0800c6bc 	.word	0x0800c6bc
 8001114:	24000770 	.word	0x24000770
 8001118:	24000704 	.word	0x24000704
		{
			case 0 :
			{
				osc_1 = db*square[a] + da*square[b];					// Linear interpolation (same as weighted average)
 800111c:	8afb      	ldrh	r3, [r7, #22]
 800111e:	4a91      	ldr	r2, [pc, #580]	@ (8001364 <_Z10Make_Soundt+0x5dc>)
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	ed93 7a00 	vldr	s14, [r3]
 8001128:	edd7 7a03 	vldr	s15, [r7, #12]
 800112c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001130:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001132:	4a8c      	ldr	r2, [pc, #560]	@ (8001364 <_Z10Make_Soundt+0x5dc>)
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	edd3 6a00 	vldr	s13, [r3]
 800113c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001140:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001144:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001148:	4b87      	ldr	r3, [pc, #540]	@ (8001368 <_Z10Make_Soundt+0x5e0>)
 800114a:	edc3 7a00 	vstr	s15, [r3]
				break;
 800114e:	e067      	b.n	8001220 <_Z10Make_Soundt+0x498>
			}

			case 1 :
			{
				osc_1 = db*triangle[a] + da*triangle[b];
 8001150:	8afb      	ldrh	r3, [r7, #22]
 8001152:	4a86      	ldr	r2, [pc, #536]	@ (800136c <_Z10Make_Soundt+0x5e4>)
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	4413      	add	r3, r2
 8001158:	ed93 7a00 	vldr	s14, [r3]
 800115c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001160:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001164:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001166:	4a81      	ldr	r2, [pc, #516]	@ (800136c <_Z10Make_Soundt+0x5e4>)
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	edd3 6a00 	vldr	s13, [r3]
 8001170:	edd7 7a04 	vldr	s15, [r7, #16]
 8001174:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001178:	ee77 7a27 	vadd.f32	s15, s14, s15
 800117c:	4b7a      	ldr	r3, [pc, #488]	@ (8001368 <_Z10Make_Soundt+0x5e0>)
 800117e:	edc3 7a00 	vstr	s15, [r3]
				break;
 8001182:	e04d      	b.n	8001220 <_Z10Make_Soundt+0x498>
			}

			case 2 :
			{
				osc_1 = db*sawtooth[a] + da*sawtooth[b];
 8001184:	8afb      	ldrh	r3, [r7, #22]
 8001186:	4a7a      	ldr	r2, [pc, #488]	@ (8001370 <_Z10Make_Soundt+0x5e8>)
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	ed93 7a00 	vldr	s14, [r3]
 8001190:	edd7 7a03 	vldr	s15, [r7, #12]
 8001194:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001198:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800119a:	4a75      	ldr	r2, [pc, #468]	@ (8001370 <_Z10Make_Soundt+0x5e8>)
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4413      	add	r3, r2
 80011a0:	edd3 6a00 	vldr	s13, [r3]
 80011a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80011a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011b0:	4b6d      	ldr	r3, [pc, #436]	@ (8001368 <_Z10Make_Soundt+0x5e0>)
 80011b2:	edc3 7a00 	vstr	s15, [r3]
				break;
 80011b6:	e033      	b.n	8001220 <_Z10Make_Soundt+0x498>
			}

			case 3 :
			{
				osc_1 = db*distosine[a] + da*distosine[b];
 80011b8:	8afb      	ldrh	r3, [r7, #22]
 80011ba:	4a6e      	ldr	r2, [pc, #440]	@ (8001374 <_Z10Make_Soundt+0x5ec>)
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	ed93 7a00 	vldr	s14, [r3]
 80011c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80011c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011cc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80011ce:	4a69      	ldr	r2, [pc, #420]	@ (8001374 <_Z10Make_Soundt+0x5ec>)
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4413      	add	r3, r2
 80011d4:	edd3 6a00 	vldr	s13, [r3]
 80011d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80011dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011e4:	4b60      	ldr	r3, [pc, #384]	@ (8001368 <_Z10Make_Soundt+0x5e0>)
 80011e6:	edc3 7a00 	vstr	s15, [r3]
				break;
 80011ea:	e019      	b.n	8001220 <_Z10Make_Soundt+0x498>
			}

			default :
			{
				osc_1 = db*sinewave[a] + da*sinewave[b];
 80011ec:	8afb      	ldrh	r3, [r7, #22]
 80011ee:	4a62      	ldr	r2, [pc, #392]	@ (8001378 <_Z10Make_Soundt+0x5f0>)
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4413      	add	r3, r2
 80011f4:	ed93 7a00 	vldr	s14, [r3]
 80011f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80011fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001200:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001202:	4a5d      	ldr	r2, [pc, #372]	@ (8001378 <_Z10Make_Soundt+0x5f0>)
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4413      	add	r3, r2
 8001208:	edd3 6a00 	vldr	s13, [r3]
 800120c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001210:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001218:	4b53      	ldr	r3, [pc, #332]	@ (8001368 <_Z10Make_Soundt+0x5e0>)
 800121a:	edc3 7a00 	vstr	s15, [r3]
				break;
 800121e:	bf00      	nop
		}


		// OSC2 Perform Linear Interpolation between 'a' and 'b' points

		a  = (int) osc_2_wtb_pointer;									// Compute 'a' and 'b' indexes
 8001220:	4b56      	ldr	r3, [pc, #344]	@ (800137c <_Z10Make_Soundt+0x5f4>)
 8001222:	edd3 7a00 	vldr	s15, [r3]
 8001226:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800122a:	ee17 3a90 	vmov	r3, s15
 800122e:	82fb      	strh	r3, [r7, #22]
		da = osc_2_wtb_pointer - a;										// and both 'da' and 'db' distances
 8001230:	4b52      	ldr	r3, [pc, #328]	@ (800137c <_Z10Make_Soundt+0x5f4>)
 8001232:	ed93 7a00 	vldr	s14, [r3]
 8001236:	8afb      	ldrh	r3, [r7, #22]
 8001238:	ee07 3a90 	vmov	s15, r3
 800123c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001240:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001244:	edc7 7a04 	vstr	s15, [r7, #16]
		b  = a + 1;
 8001248:	8afb      	ldrh	r3, [r7, #22]
 800124a:	3301      	adds	r3, #1
 800124c:	86bb      	strh	r3, [r7, #52]	@ 0x34
		db = b - osc_2_wtb_pointer;
 800124e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001250:	ee07 3a90 	vmov	s15, r3
 8001254:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001258:	4b48      	ldr	r3, [pc, #288]	@ (800137c <_Z10Make_Soundt+0x5f4>)
 800125a:	edd3 7a00 	vldr	s15, [r3]
 800125e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001262:	edc7 7a03 	vstr	s15, [r7, #12]

		if (b==WTB_LEN) b=0;											// if 'b' passes the end of the table, use 0
 8001266:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001268:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800126c:	d101      	bne.n	8001272 <_Z10Make_Soundt+0x4ea>
 800126e:	2300      	movs	r3, #0
 8001270:	86bb      	strh	r3, [r7, #52]	@ 0x34

		switch (params.osc2_waveform)
 8001272:	4b43      	ldr	r3, [pc, #268]	@ (8001380 <_Z10Make_Soundt+0x5f8>)
 8001274:	7b5b      	ldrb	r3, [r3, #13]
 8001276:	2b03      	cmp	r3, #3
 8001278:	f200 8086 	bhi.w	8001388 <_Z10Make_Soundt+0x600>
 800127c:	a201      	add	r2, pc, #4	@ (adr r2, 8001284 <_Z10Make_Soundt+0x4fc>)
 800127e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001282:	bf00      	nop
 8001284:	08001295 	.word	0x08001295
 8001288:	080012c9 	.word	0x080012c9
 800128c:	080012fd 	.word	0x080012fd
 8001290:	08001331 	.word	0x08001331
		{
			case 0 :
			{
				osc_2 = db*square[a] + da*square[b];					// Linear interpolation (same as weighted average)
 8001294:	8afb      	ldrh	r3, [r7, #22]
 8001296:	4a33      	ldr	r2, [pc, #204]	@ (8001364 <_Z10Make_Soundt+0x5dc>)
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	4413      	add	r3, r2
 800129c:	ed93 7a00 	vldr	s14, [r3]
 80012a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012a8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80012aa:	4a2e      	ldr	r2, [pc, #184]	@ (8001364 <_Z10Make_Soundt+0x5dc>)
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	4413      	add	r3, r2
 80012b0:	edd3 6a00 	vldr	s13, [r3]
 80012b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80012b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c0:	4b30      	ldr	r3, [pc, #192]	@ (8001384 <_Z10Make_Soundt+0x5fc>)
 80012c2:	edc3 7a00 	vstr	s15, [r3]
				break;
 80012c6:	e079      	b.n	80013bc <_Z10Make_Soundt+0x634>
			}

			case 1 :
			{
				osc_2 = db*triangle[a] + da*triangle[b];
 80012c8:	8afb      	ldrh	r3, [r7, #22]
 80012ca:	4a28      	ldr	r2, [pc, #160]	@ (800136c <_Z10Make_Soundt+0x5e4>)
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	ed93 7a00 	vldr	s14, [r3]
 80012d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80012d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012dc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80012de:	4a23      	ldr	r2, [pc, #140]	@ (800136c <_Z10Make_Soundt+0x5e4>)
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	edd3 6a00 	vldr	s13, [r3]
 80012e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80012ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012f4:	4b23      	ldr	r3, [pc, #140]	@ (8001384 <_Z10Make_Soundt+0x5fc>)
 80012f6:	edc3 7a00 	vstr	s15, [r3]
				break;
 80012fa:	e05f      	b.n	80013bc <_Z10Make_Soundt+0x634>
			}

			case 2 :
			{
				osc_2 = db*sawtooth[a] + da*sawtooth[b];
 80012fc:	8afb      	ldrh	r3, [r7, #22]
 80012fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001370 <_Z10Make_Soundt+0x5e8>)
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4413      	add	r3, r2
 8001304:	ed93 7a00 	vldr	s14, [r3]
 8001308:	edd7 7a03 	vldr	s15, [r7, #12]
 800130c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001310:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001312:	4a17      	ldr	r2, [pc, #92]	@ (8001370 <_Z10Make_Soundt+0x5e8>)
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4413      	add	r3, r2
 8001318:	edd3 6a00 	vldr	s13, [r3]
 800131c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001320:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001324:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001328:	4b16      	ldr	r3, [pc, #88]	@ (8001384 <_Z10Make_Soundt+0x5fc>)
 800132a:	edc3 7a00 	vstr	s15, [r3]
				break;
 800132e:	e045      	b.n	80013bc <_Z10Make_Soundt+0x634>
			}

			case 3 :
			{
				osc_2 = db*distosine[a] + da*distosine[b];
 8001330:	8afb      	ldrh	r3, [r7, #22]
 8001332:	4a10      	ldr	r2, [pc, #64]	@ (8001374 <_Z10Make_Soundt+0x5ec>)
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	4413      	add	r3, r2
 8001338:	ed93 7a00 	vldr	s14, [r3]
 800133c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001340:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001344:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001346:	4a0b      	ldr	r2, [pc, #44]	@ (8001374 <_Z10Make_Soundt+0x5ec>)
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	4413      	add	r3, r2
 800134c:	edd3 6a00 	vldr	s13, [r3]
 8001350:	edd7 7a04 	vldr	s15, [r7, #16]
 8001354:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800135c:	4b09      	ldr	r3, [pc, #36]	@ (8001384 <_Z10Make_Soundt+0x5fc>)
 800135e:	edc3 7a00 	vstr	s15, [r3]
				break;
 8001362:	e02b      	b.n	80013bc <_Z10Make_Soundt+0x634>
 8001364:	080086bc 	.word	0x080086bc
 8001368:	2400070c 	.word	0x2400070c
 800136c:	080096bc 	.word	0x080096bc
 8001370:	0800a6bc 	.word	0x0800a6bc
 8001374:	0800b6bc 	.word	0x0800b6bc
 8001378:	0800c6bc 	.word	0x0800c6bc
 800137c:	24000708 	.word	0x24000708
 8001380:	240006a8 	.word	0x240006a8
 8001384:	24000710 	.word	0x24000710
			}

			default :
			{
				osc_2 = db*sinewave[a] + da*sinewave[b];
 8001388:	8afb      	ldrh	r3, [r7, #22]
 800138a:	4ac3      	ldr	r2, [pc, #780]	@ (8001698 <_Z10Make_Soundt+0x910>)
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	4413      	add	r3, r2
 8001390:	ed93 7a00 	vldr	s14, [r3]
 8001394:	edd7 7a03 	vldr	s15, [r7, #12]
 8001398:	ee27 7a27 	vmul.f32	s14, s14, s15
 800139c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800139e:	4abe      	ldr	r2, [pc, #760]	@ (8001698 <_Z10Make_Soundt+0x910>)
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	edd3 6a00 	vldr	s13, [r3]
 80013a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80013ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b4:	4bb9      	ldr	r3, [pc, #740]	@ (800169c <_Z10Make_Soundt+0x914>)
 80013b6:	edc3 7a00 	vstr	s15, [r3]
				break;
 80013ba:	bf00      	nop
			}
		}

		// Oscillator Mixer section

		signal = (params.osc1_mix * osc_1) + (params.osc2_mix * osc_2);
 80013bc:	4bb8      	ldr	r3, [pc, #736]	@ (80016a0 <_Z10Make_Soundt+0x918>)
 80013be:	ed93 7a06 	vldr	s14, [r3, #24]
 80013c2:	4bb8      	ldr	r3, [pc, #736]	@ (80016a4 <_Z10Make_Soundt+0x91c>)
 80013c4:	edd3 7a00 	vldr	s15, [r3]
 80013c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013cc:	4bb4      	ldr	r3, [pc, #720]	@ (80016a0 <_Z10Make_Soundt+0x918>)
 80013ce:	edd3 6a07 	vldr	s13, [r3, #28]
 80013d2:	4bb2      	ldr	r3, [pc, #712]	@ (800169c <_Z10Make_Soundt+0x914>)
 80013d4:	edd3 7a00 	vldr	s15, [r3]
 80013d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e0:	4bb1      	ldr	r3, [pc, #708]	@ (80016a8 <_Z10Make_Soundt+0x920>)
 80013e2:	edc3 7a00 	vstr	s15, [r3]


		// Pseudo MOOG Filter Section

		f =  (float_t) params.cutoff * (1.0f+ lfo1_output) * (1.0f + adsr2_output) * pitch * 1.16f / (SAMPLERATE/2) ;
 80013e6:	4bae      	ldr	r3, [pc, #696]	@ (80016a0 <_Z10Make_Soundt+0x918>)
 80013e8:	ed93 7a08 	vldr	s14, [r3, #32]
 80013ec:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80013f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80013f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80013f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013fc:	4bab      	ldr	r3, [pc, #684]	@ (80016ac <_Z10Make_Soundt+0x924>)
 80013fe:	edd3 7a00 	vldr	s15, [r3]
 8001402:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800140a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800140e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001416:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 80016b0 <_Z10Make_Soundt+0x928>
 800141a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800141e:	eddf 6aa5 	vldr	s13, [pc, #660]	@ 80016b4 <_Z10Make_Soundt+0x92c>
 8001422:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001426:	4ba4      	ldr	r3, [pc, #656]	@ (80016b8 <_Z10Make_Soundt+0x930>)
 8001428:	edc3 7a00 	vstr	s15, [r3]

		if (f>1.0f) f=1.0f;
 800142c:	4ba2      	ldr	r3, [pc, #648]	@ (80016b8 <_Z10Make_Soundt+0x930>)
 800142e:	edd3 7a00 	vldr	s15, [r3]
 8001432:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001436:	eef4 7ac7 	vcmpe.f32	s15, s14
 800143a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143e:	dd03      	ble.n	8001448 <_Z10Make_Soundt+0x6c0>
 8001440:	4b9d      	ldr	r3, [pc, #628]	@ (80016b8 <_Z10Make_Soundt+0x930>)
 8001442:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001446:	601a      	str	r2, [r3, #0]

		fb = (float_t) params.reso * (1.0f - 0.15f * f*f);
 8001448:	4b95      	ldr	r3, [pc, #596]	@ (80016a0 <_Z10Make_Soundt+0x918>)
 800144a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800144e:	4b9a      	ldr	r3, [pc, #616]	@ (80016b8 <_Z10Make_Soundt+0x930>)
 8001450:	edd3 7a00 	vldr	s15, [r3]
 8001454:	eddf 6a99 	vldr	s13, [pc, #612]	@ 80016bc <_Z10Make_Soundt+0x934>
 8001458:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800145c:	4b96      	ldr	r3, [pc, #600]	@ (80016b8 <_Z10Make_Soundt+0x930>)
 800145e:	edd3 7a00 	vldr	s15, [r3]
 8001462:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001466:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800146a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800146e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001472:	4b93      	ldr	r3, [pc, #588]	@ (80016c0 <_Z10Make_Soundt+0x938>)
 8001474:	edc3 7a00 	vstr	s15, [r3]

		signal -= out4 * fb;
 8001478:	4b8b      	ldr	r3, [pc, #556]	@ (80016a8 <_Z10Make_Soundt+0x920>)
 800147a:	ed93 7a00 	vldr	s14, [r3]
 800147e:	4b91      	ldr	r3, [pc, #580]	@ (80016c4 <_Z10Make_Soundt+0x93c>)
 8001480:	edd3 6a00 	vldr	s13, [r3]
 8001484:	4b8e      	ldr	r3, [pc, #568]	@ (80016c0 <_Z10Make_Soundt+0x938>)
 8001486:	edd3 7a00 	vldr	s15, [r3]
 800148a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800148e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001492:	4b85      	ldr	r3, [pc, #532]	@ (80016a8 <_Z10Make_Soundt+0x920>)
 8001494:	edc3 7a00 	vstr	s15, [r3]
		signal *= 0.35013f * (f*f) * (f*f);
 8001498:	4b87      	ldr	r3, [pc, #540]	@ (80016b8 <_Z10Make_Soundt+0x930>)
 800149a:	ed93 7a00 	vldr	s14, [r3]
 800149e:	4b86      	ldr	r3, [pc, #536]	@ (80016b8 <_Z10Make_Soundt+0x930>)
 80014a0:	edd3 7a00 	vldr	s15, [r3]
 80014a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014a8:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 80016c8 <_Z10Make_Soundt+0x940>
 80014ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014b0:	4b81      	ldr	r3, [pc, #516]	@ (80016b8 <_Z10Make_Soundt+0x930>)
 80014b2:	edd3 6a00 	vldr	s13, [r3]
 80014b6:	4b80      	ldr	r3, [pc, #512]	@ (80016b8 <_Z10Make_Soundt+0x930>)
 80014b8:	edd3 7a00 	vldr	s15, [r3]
 80014bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014c4:	4b78      	ldr	r3, [pc, #480]	@ (80016a8 <_Z10Make_Soundt+0x920>)
 80014c6:	edd3 7a00 	vldr	s15, [r3]
 80014ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ce:	4b76      	ldr	r3, [pc, #472]	@ (80016a8 <_Z10Make_Soundt+0x920>)
 80014d0:	edc3 7a00 	vstr	s15, [r3]
		out1 = signal + 0.3f * in1 + (1-f) * out1; 				// Pole 1
 80014d4:	4b7d      	ldr	r3, [pc, #500]	@ (80016cc <_Z10Make_Soundt+0x944>)
 80014d6:	edd3 7a00 	vldr	s15, [r3]
 80014da:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 80016d0 <_Z10Make_Soundt+0x948>
 80014de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014e2:	4b71      	ldr	r3, [pc, #452]	@ (80016a8 <_Z10Make_Soundt+0x920>)
 80014e4:	edd3 7a00 	vldr	s15, [r3]
 80014e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014ec:	4b72      	ldr	r3, [pc, #456]	@ (80016b8 <_Z10Make_Soundt+0x930>)
 80014ee:	edd3 7a00 	vldr	s15, [r3]
 80014f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80014f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014fa:	4b76      	ldr	r3, [pc, #472]	@ (80016d4 <_Z10Make_Soundt+0x94c>)
 80014fc:	edd3 7a00 	vldr	s15, [r3]
 8001500:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001504:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001508:	4b72      	ldr	r3, [pc, #456]	@ (80016d4 <_Z10Make_Soundt+0x94c>)
 800150a:	edc3 7a00 	vstr	s15, [r3]
		in1 = signal;
 800150e:	4b66      	ldr	r3, [pc, #408]	@ (80016a8 <_Z10Make_Soundt+0x920>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a6e      	ldr	r2, [pc, #440]	@ (80016cc <_Z10Make_Soundt+0x944>)
 8001514:	6013      	str	r3, [r2, #0]
		out2 = out1 + 0.3f * in2 + (1-f) * out2; 				// Pole 2
 8001516:	4b70      	ldr	r3, [pc, #448]	@ (80016d8 <_Z10Make_Soundt+0x950>)
 8001518:	edd3 7a00 	vldr	s15, [r3]
 800151c:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 80016d0 <_Z10Make_Soundt+0x948>
 8001520:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001524:	4b6b      	ldr	r3, [pc, #428]	@ (80016d4 <_Z10Make_Soundt+0x94c>)
 8001526:	edd3 7a00 	vldr	s15, [r3]
 800152a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800152e:	4b62      	ldr	r3, [pc, #392]	@ (80016b8 <_Z10Make_Soundt+0x930>)
 8001530:	edd3 7a00 	vldr	s15, [r3]
 8001534:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001538:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800153c:	4b67      	ldr	r3, [pc, #412]	@ (80016dc <_Z10Make_Soundt+0x954>)
 800153e:	edd3 7a00 	vldr	s15, [r3]
 8001542:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001546:	ee77 7a27 	vadd.f32	s15, s14, s15
 800154a:	4b64      	ldr	r3, [pc, #400]	@ (80016dc <_Z10Make_Soundt+0x954>)
 800154c:	edc3 7a00 	vstr	s15, [r3]
		in2 = out1;
 8001550:	4b60      	ldr	r3, [pc, #384]	@ (80016d4 <_Z10Make_Soundt+0x94c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a60      	ldr	r2, [pc, #384]	@ (80016d8 <_Z10Make_Soundt+0x950>)
 8001556:	6013      	str	r3, [r2, #0]
		out3 = out2 + 0.3f * in3 + (1-f) * out3; 				// Pole 3
 8001558:	4b61      	ldr	r3, [pc, #388]	@ (80016e0 <_Z10Make_Soundt+0x958>)
 800155a:	edd3 7a00 	vldr	s15, [r3]
 800155e:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 80016d0 <_Z10Make_Soundt+0x948>
 8001562:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001566:	4b5d      	ldr	r3, [pc, #372]	@ (80016dc <_Z10Make_Soundt+0x954>)
 8001568:	edd3 7a00 	vldr	s15, [r3]
 800156c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001570:	4b51      	ldr	r3, [pc, #324]	@ (80016b8 <_Z10Make_Soundt+0x930>)
 8001572:	edd3 7a00 	vldr	s15, [r3]
 8001576:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800157a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800157e:	4b59      	ldr	r3, [pc, #356]	@ (80016e4 <_Z10Make_Soundt+0x95c>)
 8001580:	edd3 7a00 	vldr	s15, [r3]
 8001584:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001588:	ee77 7a27 	vadd.f32	s15, s14, s15
 800158c:	4b55      	ldr	r3, [pc, #340]	@ (80016e4 <_Z10Make_Soundt+0x95c>)
 800158e:	edc3 7a00 	vstr	s15, [r3]
		in3 = out2;
 8001592:	4b52      	ldr	r3, [pc, #328]	@ (80016dc <_Z10Make_Soundt+0x954>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a52      	ldr	r2, [pc, #328]	@ (80016e0 <_Z10Make_Soundt+0x958>)
 8001598:	6013      	str	r3, [r2, #0]
		out4 = out3 + 0.3f * in4 + (1-f) * out4; 				// Pole 4
 800159a:	4b53      	ldr	r3, [pc, #332]	@ (80016e8 <_Z10Make_Soundt+0x960>)
 800159c:	edd3 7a00 	vldr	s15, [r3]
 80015a0:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 80016d0 <_Z10Make_Soundt+0x948>
 80015a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015a8:	4b4e      	ldr	r3, [pc, #312]	@ (80016e4 <_Z10Make_Soundt+0x95c>)
 80015aa:	edd3 7a00 	vldr	s15, [r3]
 80015ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015b2:	4b41      	ldr	r3, [pc, #260]	@ (80016b8 <_Z10Make_Soundt+0x930>)
 80015b4:	edd3 7a00 	vldr	s15, [r3]
 80015b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80015bc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80015c0:	4b40      	ldr	r3, [pc, #256]	@ (80016c4 <_Z10Make_Soundt+0x93c>)
 80015c2:	edd3 7a00 	vldr	s15, [r3]
 80015c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ce:	4b3d      	ldr	r3, [pc, #244]	@ (80016c4 <_Z10Make_Soundt+0x93c>)
 80015d0:	edc3 7a00 	vstr	s15, [r3]
		in4 = out3;
 80015d4:	4b43      	ldr	r3, [pc, #268]	@ (80016e4 <_Z10Make_Soundt+0x95c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a43      	ldr	r2, [pc, #268]	@ (80016e8 <_Z10Make_Soundt+0x960>)
 80015da:	6013      	str	r3, [r2, #0]

		signal_pf = out4;
 80015dc:	4b39      	ldr	r3, [pc, #228]	@ (80016c4 <_Z10Make_Soundt+0x93c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a42      	ldr	r2, [pc, #264]	@ (80016ec <_Z10Make_Soundt+0x964>)
 80015e2:	6013      	str	r3, [r2, #0]


		// ADSR1 section

		switch (adsr1_state)
 80015e4:	4b42      	ldr	r3, [pc, #264]	@ (80016f0 <_Z10Make_Soundt+0x968>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b04      	cmp	r3, #4
 80015ea:	f200 80a5 	bhi.w	8001738 <_Z10Make_Soundt+0x9b0>
 80015ee:	a201      	add	r2, pc, #4	@ (adr r2, 80015f4 <_Z10Make_Soundt+0x86c>)
 80015f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f4:	08001609 	.word	0x08001609
 80015f8:	08001613 	.word	0x08001613
 80015fc:	0800164f 	.word	0x0800164f
 8001600:	0800168d 	.word	0x0800168d
 8001604:	08001701 	.word	0x08001701
		{
			case 0 :											// Off
			{
				adsr1_output = 0;
 8001608:	4b3a      	ldr	r3, [pc, #232]	@ (80016f4 <_Z10Make_Soundt+0x96c>)
 800160a:	f04f 0200 	mov.w	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
				break;
 8001610:	e092      	b.n	8001738 <_Z10Make_Soundt+0x9b0>
			}

			case 1 :											// Attack
			{
				adsr1_output = adsr1_output + attack1_incr;
 8001612:	4b38      	ldr	r3, [pc, #224]	@ (80016f4 <_Z10Make_Soundt+0x96c>)
 8001614:	ed93 7a00 	vldr	s14, [r3]
 8001618:	4b37      	ldr	r3, [pc, #220]	@ (80016f8 <_Z10Make_Soundt+0x970>)
 800161a:	edd3 7a00 	vldr	s15, [r3]
 800161e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001622:	4b34      	ldr	r3, [pc, #208]	@ (80016f4 <_Z10Make_Soundt+0x96c>)
 8001624:	edc3 7a00 	vstr	s15, [r3]

				if (adsr1_output > 1)
 8001628:	4b32      	ldr	r3, [pc, #200]	@ (80016f4 <_Z10Make_Soundt+0x96c>)
 800162a:	edd3 7a00 	vldr	s15, [r3]
 800162e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001632:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163a:	dc00      	bgt.n	800163e <_Z10Make_Soundt+0x8b6>
					adsr1_output = 1;
					adsr1_state = 2;
//					GPIO_SetBits(GPIOD, GPIO_Pin_15);
				}

				break;
 800163c:	e07c      	b.n	8001738 <_Z10Make_Soundt+0x9b0>
					adsr1_output = 1;
 800163e:	4b2d      	ldr	r3, [pc, #180]	@ (80016f4 <_Z10Make_Soundt+0x96c>)
 8001640:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001644:	601a      	str	r2, [r3, #0]
					adsr1_state = 2;
 8001646:	4b2a      	ldr	r3, [pc, #168]	@ (80016f0 <_Z10Make_Soundt+0x968>)
 8001648:	2202      	movs	r2, #2
 800164a:	701a      	strb	r2, [r3, #0]
				break;
 800164c:	e074      	b.n	8001738 <_Z10Make_Soundt+0x9b0>
			}

			case 2 :											// Decay
			{
				adsr1_output = adsr1_output - decay1_incr;
 800164e:	4b29      	ldr	r3, [pc, #164]	@ (80016f4 <_Z10Make_Soundt+0x96c>)
 8001650:	ed93 7a00 	vldr	s14, [r3]
 8001654:	4b29      	ldr	r3, [pc, #164]	@ (80016fc <_Z10Make_Soundt+0x974>)
 8001656:	edd3 7a00 	vldr	s15, [r3]
 800165a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800165e:	4b25      	ldr	r3, [pc, #148]	@ (80016f4 <_Z10Make_Soundt+0x96c>)
 8001660:	edc3 7a00 	vstr	s15, [r3]

				if (adsr1_output < params.adsr1_sustain)
 8001664:	4b0e      	ldr	r3, [pc, #56]	@ (80016a0 <_Z10Make_Soundt+0x918>)
 8001666:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800166a:	4b22      	ldr	r3, [pc, #136]	@ (80016f4 <_Z10Make_Soundt+0x96c>)
 800166c:	edd3 7a00 	vldr	s15, [r3]
 8001670:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001678:	dc00      	bgt.n	800167c <_Z10Make_Soundt+0x8f4>
				{
					adsr1_output = params.adsr1_sustain;
					adsr1_state = 3;
				}
				break;
 800167a:	e05d      	b.n	8001738 <_Z10Make_Soundt+0x9b0>
					adsr1_output = params.adsr1_sustain;
 800167c:	4b08      	ldr	r3, [pc, #32]	@ (80016a0 <_Z10Make_Soundt+0x918>)
 800167e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001680:	4a1c      	ldr	r2, [pc, #112]	@ (80016f4 <_Z10Make_Soundt+0x96c>)
 8001682:	6013      	str	r3, [r2, #0]
					adsr1_state = 3;
 8001684:	4b1a      	ldr	r3, [pc, #104]	@ (80016f0 <_Z10Make_Soundt+0x968>)
 8001686:	2203      	movs	r2, #3
 8001688:	701a      	strb	r2, [r3, #0]
				break;
 800168a:	e055      	b.n	8001738 <_Z10Make_Soundt+0x9b0>
			}

			case 3 :											// Sustain
			{
				adsr1_output = params.adsr1_sustain;
 800168c:	4b04      	ldr	r3, [pc, #16]	@ (80016a0 <_Z10Make_Soundt+0x918>)
 800168e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001690:	4a18      	ldr	r2, [pc, #96]	@ (80016f4 <_Z10Make_Soundt+0x96c>)
 8001692:	6013      	str	r3, [r2, #0]
				break;
 8001694:	e050      	b.n	8001738 <_Z10Make_Soundt+0x9b0>
 8001696:	bf00      	nop
 8001698:	0800c6bc 	.word	0x0800c6bc
 800169c:	24000710 	.word	0x24000710
 80016a0:	240006a8 	.word	0x240006a8
 80016a4:	2400070c 	.word	0x2400070c
 80016a8:	2400073c 	.word	0x2400073c
 80016ac:	24000758 	.word	0x24000758
 80016b0:	3f947ae1 	.word	0x3f947ae1
 80016b4:	46bb8000 	.word	0x46bb8000
 80016b8:	24000714 	.word	0x24000714
 80016bc:	3e19999a 	.word	0x3e19999a
 80016c0:	24000718 	.word	0x24000718
 80016c4:	24000738 	.word	0x24000738
 80016c8:	3eb3443d 	.word	0x3eb3443d
 80016cc:	2400071c 	.word	0x2400071c
 80016d0:	3e99999a 	.word	0x3e99999a
 80016d4:	2400072c 	.word	0x2400072c
 80016d8:	24000720 	.word	0x24000720
 80016dc:	24000730 	.word	0x24000730
 80016e0:	24000724 	.word	0x24000724
 80016e4:	24000734 	.word	0x24000734
 80016e8:	24000728 	.word	0x24000728
 80016ec:	24000740 	.word	0x24000740
 80016f0:	24000748 	.word	0x24000748
 80016f4:	24000744 	.word	0x24000744
 80016f8:	2400074c 	.word	0x2400074c
 80016fc:	24000750 	.word	0x24000750
			}

			case 4 :											// Release
			{
				adsr1_output = adsr1_output - release1_incr;
 8001700:	4b91      	ldr	r3, [pc, #580]	@ (8001948 <_Z10Make_Soundt+0xbc0>)
 8001702:	ed93 7a00 	vldr	s14, [r3]
 8001706:	4b91      	ldr	r3, [pc, #580]	@ (800194c <_Z10Make_Soundt+0xbc4>)
 8001708:	edd3 7a00 	vldr	s15, [r3]
 800170c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001710:	4b8d      	ldr	r3, [pc, #564]	@ (8001948 <_Z10Make_Soundt+0xbc0>)
 8001712:	edc3 7a00 	vstr	s15, [r3]

				if (adsr1_output < 0)
 8001716:	4b8c      	ldr	r3, [pc, #560]	@ (8001948 <_Z10Make_Soundt+0xbc0>)
 8001718:	edd3 7a00 	vldr	s15, [r3]
 800171c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001724:	d400      	bmi.n	8001728 <_Z10Make_Soundt+0x9a0>
				{
					adsr1_output = 0;
					adsr1_state = 0;
//					GPIO_ResetBits(GPIOD, GPIO_Pin_15);
				}
				break;
 8001726:	e006      	b.n	8001736 <_Z10Make_Soundt+0x9ae>
					adsr1_output = 0;
 8001728:	4b87      	ldr	r3, [pc, #540]	@ (8001948 <_Z10Make_Soundt+0xbc0>)
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
					adsr1_state = 0;
 8001730:	4b87      	ldr	r3, [pc, #540]	@ (8001950 <_Z10Make_Soundt+0xbc8>)
 8001732:	2200      	movs	r2, #0
 8001734:	701a      	strb	r2, [r3, #0]
				break;
 8001736:	bf00      	nop
		}


		// ADSR2 section

		switch (adsr2_state)
 8001738:	4b86      	ldr	r3, [pc, #536]	@ (8001954 <_Z10Make_Soundt+0xbcc>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b04      	cmp	r3, #4
 800173e:	d870      	bhi.n	8001822 <_Z10Make_Soundt+0xa9a>
 8001740:	a201      	add	r2, pc, #4	@ (adr r2, 8001748 <_Z10Make_Soundt+0x9c0>)
 8001742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001746:	bf00      	nop
 8001748:	0800175d 	.word	0x0800175d
 800174c:	08001767 	.word	0x08001767
 8001750:	080017a3 	.word	0x080017a3
 8001754:	080017e1 	.word	0x080017e1
 8001758:	080017eb 	.word	0x080017eb
		{
			case 0 :											// Off
			{
				adsr2_output = 0;
 800175c:	4b7e      	ldr	r3, [pc, #504]	@ (8001958 <_Z10Make_Soundt+0xbd0>)
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
				break;
 8001764:	e05d      	b.n	8001822 <_Z10Make_Soundt+0xa9a>
			}

			case 1 :											// Attack
			{
				adsr2_output = adsr2_output + attack2_incr;
 8001766:	4b7c      	ldr	r3, [pc, #496]	@ (8001958 <_Z10Make_Soundt+0xbd0>)
 8001768:	ed93 7a00 	vldr	s14, [r3]
 800176c:	4b7b      	ldr	r3, [pc, #492]	@ (800195c <_Z10Make_Soundt+0xbd4>)
 800176e:	edd3 7a00 	vldr	s15, [r3]
 8001772:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001776:	4b78      	ldr	r3, [pc, #480]	@ (8001958 <_Z10Make_Soundt+0xbd0>)
 8001778:	edc3 7a00 	vstr	s15, [r3]

				if (adsr2_output > 1)
 800177c:	4b76      	ldr	r3, [pc, #472]	@ (8001958 <_Z10Make_Soundt+0xbd0>)
 800177e:	edd3 7a00 	vldr	s15, [r3]
 8001782:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001786:	eef4 7ac7 	vcmpe.f32	s15, s14
 800178a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800178e:	dc00      	bgt.n	8001792 <_Z10Make_Soundt+0xa0a>
					adsr2_output = 1;
					adsr2_state = 2;
//					GPIO_SetBits(GPIOD, GPIO_Pin_15);
				}

				break;
 8001790:	e047      	b.n	8001822 <_Z10Make_Soundt+0xa9a>
					adsr2_output = 1;
 8001792:	4b71      	ldr	r3, [pc, #452]	@ (8001958 <_Z10Make_Soundt+0xbd0>)
 8001794:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001798:	601a      	str	r2, [r3, #0]
					adsr2_state = 2;
 800179a:	4b6e      	ldr	r3, [pc, #440]	@ (8001954 <_Z10Make_Soundt+0xbcc>)
 800179c:	2202      	movs	r2, #2
 800179e:	701a      	strb	r2, [r3, #0]
				break;
 80017a0:	e03f      	b.n	8001822 <_Z10Make_Soundt+0xa9a>
			}

			case 2 :											// Decay
			{
				adsr2_output = adsr2_output - decay2_incr;
 80017a2:	4b6d      	ldr	r3, [pc, #436]	@ (8001958 <_Z10Make_Soundt+0xbd0>)
 80017a4:	ed93 7a00 	vldr	s14, [r3]
 80017a8:	4b6d      	ldr	r3, [pc, #436]	@ (8001960 <_Z10Make_Soundt+0xbd8>)
 80017aa:	edd3 7a00 	vldr	s15, [r3]
 80017ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017b2:	4b69      	ldr	r3, [pc, #420]	@ (8001958 <_Z10Make_Soundt+0xbd0>)
 80017b4:	edc3 7a00 	vstr	s15, [r3]

				if (adsr2_output < params.adsr2_sustain)
 80017b8:	4b6a      	ldr	r3, [pc, #424]	@ (8001964 <_Z10Make_Soundt+0xbdc>)
 80017ba:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80017be:	4b66      	ldr	r3, [pc, #408]	@ (8001958 <_Z10Make_Soundt+0xbd0>)
 80017c0:	edd3 7a00 	vldr	s15, [r3]
 80017c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017cc:	dc00      	bgt.n	80017d0 <_Z10Make_Soundt+0xa48>
				{
					adsr2_output = params.adsr2_sustain;
					adsr2_state = 3;
				}
				break;
 80017ce:	e028      	b.n	8001822 <_Z10Make_Soundt+0xa9a>
					adsr2_output = params.adsr2_sustain;
 80017d0:	4b64      	ldr	r3, [pc, #400]	@ (8001964 <_Z10Make_Soundt+0xbdc>)
 80017d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d4:	4a60      	ldr	r2, [pc, #384]	@ (8001958 <_Z10Make_Soundt+0xbd0>)
 80017d6:	6013      	str	r3, [r2, #0]
					adsr2_state = 3;
 80017d8:	4b5e      	ldr	r3, [pc, #376]	@ (8001954 <_Z10Make_Soundt+0xbcc>)
 80017da:	2203      	movs	r2, #3
 80017dc:	701a      	strb	r2, [r3, #0]
				break;
 80017de:	e020      	b.n	8001822 <_Z10Make_Soundt+0xa9a>
			}

			case 3 :											// Sustain
			{
				adsr2_output = params.adsr2_sustain;
 80017e0:	4b60      	ldr	r3, [pc, #384]	@ (8001964 <_Z10Make_Soundt+0xbdc>)
 80017e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e4:	4a5c      	ldr	r2, [pc, #368]	@ (8001958 <_Z10Make_Soundt+0xbd0>)
 80017e6:	6013      	str	r3, [r2, #0]
				break;
 80017e8:	e01b      	b.n	8001822 <_Z10Make_Soundt+0xa9a>
			}

			case 4 :											// Release
			{
				adsr2_output = adsr2_output - release2_incr;
 80017ea:	4b5b      	ldr	r3, [pc, #364]	@ (8001958 <_Z10Make_Soundt+0xbd0>)
 80017ec:	ed93 7a00 	vldr	s14, [r3]
 80017f0:	4b5d      	ldr	r3, [pc, #372]	@ (8001968 <_Z10Make_Soundt+0xbe0>)
 80017f2:	edd3 7a00 	vldr	s15, [r3]
 80017f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017fa:	4b57      	ldr	r3, [pc, #348]	@ (8001958 <_Z10Make_Soundt+0xbd0>)
 80017fc:	edc3 7a00 	vstr	s15, [r3]

				if (adsr2_output < 0)
 8001800:	4b55      	ldr	r3, [pc, #340]	@ (8001958 <_Z10Make_Soundt+0xbd0>)
 8001802:	edd3 7a00 	vldr	s15, [r3]
 8001806:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800180a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180e:	d400      	bmi.n	8001812 <_Z10Make_Soundt+0xa8a>
				{
					adsr2_output = 0;
					adsr2_state = 0;
//					GPIO_ResetBits(GPIOD, GPIO_Pin_15);
				}
				break;
 8001810:	e006      	b.n	8001820 <_Z10Make_Soundt+0xa98>
					adsr2_output = 0;
 8001812:	4b51      	ldr	r3, [pc, #324]	@ (8001958 <_Z10Make_Soundt+0xbd0>)
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
					adsr2_state = 0;
 800181a:	4b4e      	ldr	r3, [pc, #312]	@ (8001954 <_Z10Make_Soundt+0xbcc>)
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]
				break;
 8001820:	bf00      	nop
		}


		// VCA section

		signal = adsr1_output * 32767.0f * signal_pf;
 8001822:	4b49      	ldr	r3, [pc, #292]	@ (8001948 <_Z10Make_Soundt+0xbc0>)
 8001824:	edd3 7a00 	vldr	s15, [r3]
 8001828:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 800196c <_Z10Make_Soundt+0xbe4>
 800182c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001830:	4b4f      	ldr	r3, [pc, #316]	@ (8001970 <_Z10Make_Soundt+0xbe8>)
 8001832:	edd3 7a00 	vldr	s15, [r3]
 8001836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800183a:	4b4e      	ldr	r3, [pc, #312]	@ (8001974 <_Z10Make_Soundt+0xbec>)
 800183c:	edc3 7a00 	vstr	s15, [r3]

		if (signal >  32767.0f) signal =  32767.0f;
 8001840:	4b4c      	ldr	r3, [pc, #304]	@ (8001974 <_Z10Make_Soundt+0xbec>)
 8001842:	edd3 7a00 	vldr	s15, [r3]
 8001846:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800196c <_Z10Make_Soundt+0xbe4>
 800184a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800184e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001852:	dd02      	ble.n	800185a <_Z10Make_Soundt+0xad2>
 8001854:	4b47      	ldr	r3, [pc, #284]	@ (8001974 <_Z10Make_Soundt+0xbec>)
 8001856:	4a48      	ldr	r2, [pc, #288]	@ (8001978 <_Z10Make_Soundt+0xbf0>)
 8001858:	601a      	str	r2, [r3, #0]
		if (signal < -32767.0f) signal = -32767.0f;
 800185a:	4b46      	ldr	r3, [pc, #280]	@ (8001974 <_Z10Make_Soundt+0xbec>)
 800185c:	edd3 7a00 	vldr	s15, [r3]
 8001860:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800197c <_Z10Make_Soundt+0xbf4>
 8001864:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800186c:	d502      	bpl.n	8001874 <_Z10Make_Soundt+0xaec>
 800186e:	4b41      	ldr	r3, [pc, #260]	@ (8001974 <_Z10Make_Soundt+0xbec>)
 8001870:	4a43      	ldr	r2, [pc, #268]	@ (8001980 <_Z10Make_Soundt+0xbf8>)
 8001872:	601a      	str	r2, [r3, #0]


		// Fill the buffer

		audiobuff[start_index+i] =   (uint16_t)((int16_t) signal);		// Left Channel value
 8001874:	4b3f      	ldr	r3, [pc, #252]	@ (8001974 <_Z10Make_Soundt+0xbec>)
 8001876:	edd3 7a00 	vldr	s15, [r3]
 800187a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800187e:	ee17 3a90 	vmov	r3, s15
 8001882:	b219      	sxth	r1, r3
 8001884:	88fa      	ldrh	r2, [r7, #6]
 8001886:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001888:	4413      	add	r3, r2
 800188a:	b289      	uxth	r1, r1
 800188c:	4a3d      	ldr	r2, [pc, #244]	@ (8001984 <_Z10Make_Soundt+0xbfc>)
 800188e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		audiobuff[start_index+i+1] = (uint16_t)((int16_t) signal);		// Right Channel Value
 8001892:	4b38      	ldr	r3, [pc, #224]	@ (8001974 <_Z10Make_Soundt+0xbec>)
 8001894:	edd3 7a00 	vldr	s15, [r3]
 8001898:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800189c:	ee17 3a90 	vmov	r3, s15
 80018a0:	b219      	sxth	r1, r3
 80018a2:	88fa      	ldrh	r2, [r7, #6]
 80018a4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80018a6:	4413      	add	r3, r2
 80018a8:	3301      	adds	r3, #1
 80018aa:	b289      	uxth	r1, r1
 80018ac:	4a35      	ldr	r2, [pc, #212]	@ (8001984 <_Z10Make_Soundt+0xbfc>)
 80018ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]


		// Update pointers for next loop

		i = i+2;															// Audio buffer (L+R)
 80018b2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80018b4:	3302      	adds	r3, #2
 80018b6:	86fb      	strh	r3, [r7, #54]	@ 0x36

		osc_1_wtb_pointer = osc_1_wtb_pointer + osc_1_wtb_incr;				// WTB buffer
 80018b8:	4b33      	ldr	r3, [pc, #204]	@ (8001988 <_Z10Make_Soundt+0xc00>)
 80018ba:	ed93 7a00 	vldr	s14, [r3]
 80018be:	edd7 7a07 	vldr	s15, [r7, #28]
 80018c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c6:	4b30      	ldr	r3, [pc, #192]	@ (8001988 <_Z10Make_Soundt+0xc00>)
 80018c8:	edc3 7a00 	vstr	s15, [r3]
		if (osc_1_wtb_pointer>WTB_LEN)										// return to zero if end is reached
 80018cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001988 <_Z10Make_Soundt+0xc00>)
 80018ce:	edd3 7a00 	vldr	s15, [r3]
 80018d2:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 800198c <_Z10Make_Soundt+0xc04>
 80018d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018de:	dd09      	ble.n	80018f4 <_Z10Make_Soundt+0xb6c>
		{
			osc_1_wtb_pointer = osc_1_wtb_pointer - WTB_LEN;
 80018e0:	4b29      	ldr	r3, [pc, #164]	@ (8001988 <_Z10Make_Soundt+0xc00>)
 80018e2:	edd3 7a00 	vldr	s15, [r3]
 80018e6:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800198c <_Z10Make_Soundt+0xc04>
 80018ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018ee:	4b26      	ldr	r3, [pc, #152]	@ (8001988 <_Z10Make_Soundt+0xc00>)
 80018f0:	edc3 7a00 	vstr	s15, [r3]
		}

		osc_2_wtb_pointer = osc_2_wtb_pointer + osc_2_wtb_incr;				// WTB buffer
 80018f4:	4b26      	ldr	r3, [pc, #152]	@ (8001990 <_Z10Make_Soundt+0xc08>)
 80018f6:	ed93 7a00 	vldr	s14, [r3]
 80018fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80018fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001902:	4b23      	ldr	r3, [pc, #140]	@ (8001990 <_Z10Make_Soundt+0xc08>)
 8001904:	edc3 7a00 	vstr	s15, [r3]
		if (osc_2_wtb_pointer>WTB_LEN)										// return to zero if end is reached
 8001908:	4b21      	ldr	r3, [pc, #132]	@ (8001990 <_Z10Make_Soundt+0xc08>)
 800190a:	edd3 7a00 	vldr	s15, [r3]
 800190e:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800198c <_Z10Make_Soundt+0xc04>
 8001912:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800191a:	dd09      	ble.n	8001930 <_Z10Make_Soundt+0xba8>
		{
			osc_2_wtb_pointer = osc_2_wtb_pointer - WTB_LEN;
 800191c:	4b1c      	ldr	r3, [pc, #112]	@ (8001990 <_Z10Make_Soundt+0xc08>)
 800191e:	edd3 7a00 	vldr	s15, [r3]
 8001922:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 800198c <_Z10Make_Soundt+0xc04>
 8001926:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800192a:	4b19      	ldr	r3, [pc, #100]	@ (8001990 <_Z10Make_Soundt+0xc08>)
 800192c:	edc3 7a00 	vstr	s15, [r3]
	while(i<BUFF_LEN_DIV2)
 8001930:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001932:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001936:	f4ff aac5 	bcc.w	8000ec4 <_Z10Make_Soundt+0x13c>
		}
	}

//	GPIO_ResetBits(GPIOD, GPIO_Pin_13);

}
 800193a:	bf00      	nop
 800193c:	bf00      	nop
 800193e:	373c      	adds	r7, #60	@ 0x3c
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	24000744 	.word	0x24000744
 800194c:	24000754 	.word	0x24000754
 8001950:	24000748 	.word	0x24000748
 8001954:	2400075c 	.word	0x2400075c
 8001958:	24000758 	.word	0x24000758
 800195c:	24000760 	.word	0x24000760
 8001960:	24000764 	.word	0x24000764
 8001964:	240006a8 	.word	0x240006a8
 8001968:	24000768 	.word	0x24000768
 800196c:	46fffe00 	.word	0x46fffe00
 8001970:	24000740 	.word	0x24000740
 8001974:	2400073c 	.word	0x2400073c
 8001978:	46fffe00 	.word	0x46fffe00
 800197c:	c6fffe00 	.word	0xc6fffe00
 8001980:	c6fffe00 	.word	0xc6fffe00
 8001984:	240001a4 	.word	0x240001a4
 8001988:	24000704 	.word	0x24000704
 800198c:	44800000 	.word	0x44800000
 8001990:	24000708 	.word	0x24000708

08001994 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800199c:	4a14      	ldr	r2, [pc, #80]	@ (80019f0 <_sbrk+0x5c>)
 800199e:	4b15      	ldr	r3, [pc, #84]	@ (80019f4 <_sbrk+0x60>)
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019a8:	4b13      	ldr	r3, [pc, #76]	@ (80019f8 <_sbrk+0x64>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d102      	bne.n	80019b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019b0:	4b11      	ldr	r3, [pc, #68]	@ (80019f8 <_sbrk+0x64>)
 80019b2:	4a12      	ldr	r2, [pc, #72]	@ (80019fc <_sbrk+0x68>)
 80019b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019b6:	4b10      	ldr	r3, [pc, #64]	@ (80019f8 <_sbrk+0x64>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d207      	bcs.n	80019d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019c4:	f006 fd28 	bl	8008418 <__errno>
 80019c8:	4603      	mov	r3, r0
 80019ca:	220c      	movs	r2, #12
 80019cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ce:	f04f 33ff 	mov.w	r3, #4294967295
 80019d2:	e009      	b.n	80019e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019d4:	4b08      	ldr	r3, [pc, #32]	@ (80019f8 <_sbrk+0x64>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019da:	4b07      	ldr	r3, [pc, #28]	@ (80019f8 <_sbrk+0x64>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	4a05      	ldr	r2, [pc, #20]	@ (80019f8 <_sbrk+0x64>)
 80019e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019e6:	68fb      	ldr	r3, [r7, #12]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3718      	adds	r7, #24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	24050000 	.word	0x24050000
 80019f4:	00000400 	.word	0x00000400
 80019f8:	24000774 	.word	0x24000774
 80019fc:	240008c8 	.word	0x240008c8

08001a00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a04:	4b32      	ldr	r3, [pc, #200]	@ (8001ad0 <SystemInit+0xd0>)
 8001a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a0a:	4a31      	ldr	r2, [pc, #196]	@ (8001ad0 <SystemInit+0xd0>)
 8001a0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a14:	4b2f      	ldr	r3, [pc, #188]	@ (8001ad4 <SystemInit+0xd4>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 030f 	and.w	r3, r3, #15
 8001a1c:	2b06      	cmp	r3, #6
 8001a1e:	d807      	bhi.n	8001a30 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a20:	4b2c      	ldr	r3, [pc, #176]	@ (8001ad4 <SystemInit+0xd4>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f023 030f 	bic.w	r3, r3, #15
 8001a28:	4a2a      	ldr	r2, [pc, #168]	@ (8001ad4 <SystemInit+0xd4>)
 8001a2a:	f043 0307 	orr.w	r3, r3, #7
 8001a2e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a30:	4b29      	ldr	r3, [pc, #164]	@ (8001ad8 <SystemInit+0xd8>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a28      	ldr	r2, [pc, #160]	@ (8001ad8 <SystemInit+0xd8>)
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a3c:	4b26      	ldr	r3, [pc, #152]	@ (8001ad8 <SystemInit+0xd8>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a42:	4b25      	ldr	r3, [pc, #148]	@ (8001ad8 <SystemInit+0xd8>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	4924      	ldr	r1, [pc, #144]	@ (8001ad8 <SystemInit+0xd8>)
 8001a48:	4b24      	ldr	r3, [pc, #144]	@ (8001adc <SystemInit+0xdc>)
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a4e:	4b21      	ldr	r3, [pc, #132]	@ (8001ad4 <SystemInit+0xd4>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d007      	beq.n	8001a6a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad4 <SystemInit+0xd4>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f023 030f 	bic.w	r3, r3, #15
 8001a62:	4a1c      	ldr	r2, [pc, #112]	@ (8001ad4 <SystemInit+0xd4>)
 8001a64:	f043 0307 	orr.w	r3, r3, #7
 8001a68:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad8 <SystemInit+0xd8>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001a70:	4b19      	ldr	r3, [pc, #100]	@ (8001ad8 <SystemInit+0xd8>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001a76:	4b18      	ldr	r3, [pc, #96]	@ (8001ad8 <SystemInit+0xd8>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001a7c:	4b16      	ldr	r3, [pc, #88]	@ (8001ad8 <SystemInit+0xd8>)
 8001a7e:	4a18      	ldr	r2, [pc, #96]	@ (8001ae0 <SystemInit+0xe0>)
 8001a80:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001a82:	4b15      	ldr	r3, [pc, #84]	@ (8001ad8 <SystemInit+0xd8>)
 8001a84:	4a17      	ldr	r2, [pc, #92]	@ (8001ae4 <SystemInit+0xe4>)
 8001a86:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a88:	4b13      	ldr	r3, [pc, #76]	@ (8001ad8 <SystemInit+0xd8>)
 8001a8a:	4a17      	ldr	r2, [pc, #92]	@ (8001ae8 <SystemInit+0xe8>)
 8001a8c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a8e:	4b12      	ldr	r3, [pc, #72]	@ (8001ad8 <SystemInit+0xd8>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a94:	4b10      	ldr	r3, [pc, #64]	@ (8001ad8 <SystemInit+0xd8>)
 8001a96:	4a14      	ldr	r2, [pc, #80]	@ (8001ae8 <SystemInit+0xe8>)
 8001a98:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad8 <SystemInit+0xd8>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001aa0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad8 <SystemInit+0xd8>)
 8001aa2:	4a11      	ldr	r2, [pc, #68]	@ (8001ae8 <SystemInit+0xe8>)
 8001aa4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad8 <SystemInit+0xd8>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001aac:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad8 <SystemInit+0xd8>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a09      	ldr	r2, [pc, #36]	@ (8001ad8 <SystemInit+0xd8>)
 8001ab2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ab6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001ab8:	4b07      	ldr	r3, [pc, #28]	@ (8001ad8 <SystemInit+0xd8>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001abe:	4b0b      	ldr	r3, [pc, #44]	@ (8001aec <SystemInit+0xec>)
 8001ac0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001ac4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001ac6:	bf00      	nop
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	e000ed00 	.word	0xe000ed00
 8001ad4:	52002000 	.word	0x52002000
 8001ad8:	58024400 	.word	0x58024400
 8001adc:	eaf6ed7f 	.word	0xeaf6ed7f
 8001ae0:	02020200 	.word	0x02020200
 8001ae4:	01ff0000 	.word	0x01ff0000
 8001ae8:	01010280 	.word	0x01010280
 8001aec:	52004000 	.word	0x52004000

08001af0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001af0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001af4:	f7ff ff84 	bl	8001a00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001af8:	480c      	ldr	r0, [pc, #48]	@ (8001b2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001afa:	490d      	ldr	r1, [pc, #52]	@ (8001b30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001afc:	4a0d      	ldr	r2, [pc, #52]	@ (8001b34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001afe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b00:	e002      	b.n	8001b08 <LoopCopyDataInit>

08001b02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b06:	3304      	adds	r3, #4

08001b08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b0c:	d3f9      	bcc.n	8001b02 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b10:	4c0a      	ldr	r4, [pc, #40]	@ (8001b3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b14:	e001      	b.n	8001b1a <LoopFillZerobss>

08001b16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b18:	3204      	adds	r2, #4

08001b1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b1c:	d3fb      	bcc.n	8001b16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b1e:	f006 fc81 	bl	8008424 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b22:	f7fe ff3d 	bl	80009a0 <main>
  bx  lr
 8001b26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b28:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001b2c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001b30:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8001b34:	0800d6e4 	.word	0x0800d6e4
  ldr r2, =_sbss
 8001b38:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8001b3c:	240008c4 	.word	0x240008c4

08001b40 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b40:	e7fe      	b.n	8001b40 <ADC3_IRQHandler>
	...

08001b44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b4a:	2003      	movs	r0, #3
 8001b4c:	f000 f95c 	bl	8001e08 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b50:	f003 fde2 	bl	8005718 <HAL_RCC_GetSysClockFreq>
 8001b54:	4602      	mov	r2, r0
 8001b56:	4b15      	ldr	r3, [pc, #84]	@ (8001bac <HAL_Init+0x68>)
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	0a1b      	lsrs	r3, r3, #8
 8001b5c:	f003 030f 	and.w	r3, r3, #15
 8001b60:	4913      	ldr	r1, [pc, #76]	@ (8001bb0 <HAL_Init+0x6c>)
 8001b62:	5ccb      	ldrb	r3, [r1, r3]
 8001b64:	f003 031f 	and.w	r3, r3, #31
 8001b68:	fa22 f303 	lsr.w	r3, r2, r3
 8001b6c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001bac <HAL_Init+0x68>)
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	4a0e      	ldr	r2, [pc, #56]	@ (8001bb0 <HAL_Init+0x6c>)
 8001b78:	5cd3      	ldrb	r3, [r2, r3]
 8001b7a:	f003 031f 	and.w	r3, r3, #31
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	fa22 f303 	lsr.w	r3, r2, r3
 8001b84:	4a0b      	ldr	r2, [pc, #44]	@ (8001bb4 <HAL_Init+0x70>)
 8001b86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b88:	4a0b      	ldr	r2, [pc, #44]	@ (8001bb8 <HAL_Init+0x74>)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b8e:	200f      	movs	r0, #15
 8001b90:	f000 f814 	bl	8001bbc <HAL_InitTick>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e002      	b.n	8001ba4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b9e:	f7ff f89f 	bl	8000ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	58024400 	.word	0x58024400
 8001bb0:	0800d6bc 	.word	0x0800d6bc
 8001bb4:	24000004 	.word	0x24000004
 8001bb8:	24000000 	.word	0x24000000

08001bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001bc4:	4b15      	ldr	r3, [pc, #84]	@ (8001c1c <HAL_InitTick+0x60>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e021      	b.n	8001c14 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001bd0:	4b13      	ldr	r3, [pc, #76]	@ (8001c20 <HAL_InitTick+0x64>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b11      	ldr	r3, [pc, #68]	@ (8001c1c <HAL_InitTick+0x60>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 f941 	bl	8001e6e <HAL_SYSTICK_Config>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e00e      	b.n	8001c14 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b0f      	cmp	r3, #15
 8001bfa:	d80a      	bhi.n	8001c12 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	f04f 30ff 	mov.w	r0, #4294967295
 8001c04:	f000 f90b 	bl	8001e1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c08:	4a06      	ldr	r2, [pc, #24]	@ (8001c24 <HAL_InitTick+0x68>)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	e000      	b.n	8001c14 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	2400000c 	.word	0x2400000c
 8001c20:	24000000 	.word	0x24000000
 8001c24:	24000008 	.word	0x24000008

08001c28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c2c:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <HAL_IncTick+0x20>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	4b06      	ldr	r3, [pc, #24]	@ (8001c4c <HAL_IncTick+0x24>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4413      	add	r3, r2
 8001c38:	4a04      	ldr	r2, [pc, #16]	@ (8001c4c <HAL_IncTick+0x24>)
 8001c3a:	6013      	str	r3, [r2, #0]
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	2400000c 	.word	0x2400000c
 8001c4c:	24000778 	.word	0x24000778

08001c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return uwTick;
 8001c54:	4b03      	ldr	r3, [pc, #12]	@ (8001c64 <HAL_GetTick+0x14>)
 8001c56:	681b      	ldr	r3, [r3, #0]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	24000778 	.word	0x24000778

08001c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca8 <__NVIC_SetPriorityGrouping+0x40>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c84:	4013      	ands	r3, r2
 8001c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c90:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <__NVIC_SetPriorityGrouping+0x44>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c96:	4a04      	ldr	r2, [pc, #16]	@ (8001ca8 <__NVIC_SetPriorityGrouping+0x40>)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	60d3      	str	r3, [r2, #12]
}
 8001c9c:	bf00      	nop
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000ed00 	.word	0xe000ed00
 8001cac:	05fa0000 	.word	0x05fa0000

08001cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb4:	4b04      	ldr	r3, [pc, #16]	@ (8001cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	0a1b      	lsrs	r3, r3, #8
 8001cba:	f003 0307 	and.w	r3, r3, #7
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001cd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	db0b      	blt.n	8001cf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cde:	88fb      	ldrh	r3, [r7, #6]
 8001ce0:	f003 021f 	and.w	r2, r3, #31
 8001ce4:	4907      	ldr	r1, [pc, #28]	@ (8001d04 <__NVIC_EnableIRQ+0x38>)
 8001ce6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cea:	095b      	lsrs	r3, r3, #5
 8001cec:	2001      	movs	r0, #1
 8001cee:	fa00 f202 	lsl.w	r2, r0, r2
 8001cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000e100 	.word	0xe000e100

08001d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	6039      	str	r1, [r7, #0]
 8001d12:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	db0a      	blt.n	8001d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	490c      	ldr	r1, [pc, #48]	@ (8001d54 <__NVIC_SetPriority+0x4c>)
 8001d22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d26:	0112      	lsls	r2, r2, #4
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d30:	e00a      	b.n	8001d48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	4908      	ldr	r1, [pc, #32]	@ (8001d58 <__NVIC_SetPriority+0x50>)
 8001d38:	88fb      	ldrh	r3, [r7, #6]
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	3b04      	subs	r3, #4
 8001d40:	0112      	lsls	r2, r2, #4
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	440b      	add	r3, r1
 8001d46:	761a      	strb	r2, [r3, #24]
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000e100 	.word	0xe000e100
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b089      	sub	sp, #36	@ 0x24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	f1c3 0307 	rsb	r3, r3, #7
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	bf28      	it	cs
 8001d7a:	2304      	movcs	r3, #4
 8001d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3304      	adds	r3, #4
 8001d82:	2b06      	cmp	r3, #6
 8001d84:	d902      	bls.n	8001d8c <NVIC_EncodePriority+0x30>
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3b03      	subs	r3, #3
 8001d8a:	e000      	b.n	8001d8e <NVIC_EncodePriority+0x32>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d90:	f04f 32ff 	mov.w	r2, #4294967295
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43da      	mvns	r2, r3
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	401a      	ands	r2, r3
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da4:	f04f 31ff 	mov.w	r1, #4294967295
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dae:	43d9      	mvns	r1, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db4:	4313      	orrs	r3, r2
         );
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3724      	adds	r7, #36	@ 0x24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
	...

08001dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dd4:	d301      	bcc.n	8001dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e00f      	b.n	8001dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dda:	4a0a      	ldr	r2, [pc, #40]	@ (8001e04 <SysTick_Config+0x40>)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001de2:	210f      	movs	r1, #15
 8001de4:	f04f 30ff 	mov.w	r0, #4294967295
 8001de8:	f7ff ff8e 	bl	8001d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dec:	4b05      	ldr	r3, [pc, #20]	@ (8001e04 <SysTick_Config+0x40>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001df2:	4b04      	ldr	r3, [pc, #16]	@ (8001e04 <SysTick_Config+0x40>)
 8001df4:	2207      	movs	r2, #7
 8001df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	e000e010 	.word	0xe000e010

08001e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7ff ff29 	bl	8001c68 <__NVIC_SetPriorityGrouping>
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b086      	sub	sp, #24
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	4603      	mov	r3, r0
 8001e26:	60b9      	str	r1, [r7, #8]
 8001e28:	607a      	str	r2, [r7, #4]
 8001e2a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e2c:	f7ff ff40 	bl	8001cb0 <__NVIC_GetPriorityGrouping>
 8001e30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	68b9      	ldr	r1, [r7, #8]
 8001e36:	6978      	ldr	r0, [r7, #20]
 8001e38:	f7ff ff90 	bl	8001d5c <NVIC_EncodePriority>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e42:	4611      	mov	r1, r2
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ff5f 	bl	8001d08 <__NVIC_SetPriority>
}
 8001e4a:	bf00      	nop
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	4603      	mov	r3, r0
 8001e5a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ff33 	bl	8001ccc <__NVIC_EnableIRQ>
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7ff ffa4 	bl	8001dc4 <SysTick_Config>
 8001e7c:	4603      	mov	r3, r0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
	...

08001e88 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001e8c:	f3bf 8f5f 	dmb	sy
}
 8001e90:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001e92:	4b07      	ldr	r3, [pc, #28]	@ (8001eb0 <HAL_MPU_Disable+0x28>)
 8001e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e96:	4a06      	ldr	r2, [pc, #24]	@ (8001eb0 <HAL_MPU_Disable+0x28>)
 8001e98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e9c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001e9e:	4b05      	ldr	r3, [pc, #20]	@ (8001eb4 <HAL_MPU_Disable+0x2c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	605a      	str	r2, [r3, #4]
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	e000ed00 	.word	0xe000ed00
 8001eb4:	e000ed90 	.word	0xe000ed90

08001eb8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001ec0:	4a0b      	ldr	r2, [pc, #44]	@ (8001ef0 <HAL_MPU_Enable+0x38>)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001eca:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef4 <HAL_MPU_Enable+0x3c>)
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ece:	4a09      	ldr	r2, [pc, #36]	@ (8001ef4 <HAL_MPU_Enable+0x3c>)
 8001ed0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ed4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed6:	f3bf 8f4f 	dsb	sy
}
 8001eda:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001edc:	f3bf 8f6f 	isb	sy
}
 8001ee0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	e000ed90 	.word	0xe000ed90
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	785a      	ldrb	r2, [r3, #1]
 8001f04:	4b1b      	ldr	r3, [pc, #108]	@ (8001f74 <HAL_MPU_ConfigRegion+0x7c>)
 8001f06:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001f08:	4b1a      	ldr	r3, [pc, #104]	@ (8001f74 <HAL_MPU_ConfigRegion+0x7c>)
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	4a19      	ldr	r2, [pc, #100]	@ (8001f74 <HAL_MPU_ConfigRegion+0x7c>)
 8001f0e:	f023 0301 	bic.w	r3, r3, #1
 8001f12:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001f14:	4a17      	ldr	r2, [pc, #92]	@ (8001f74 <HAL_MPU_ConfigRegion+0x7c>)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	7b1b      	ldrb	r3, [r3, #12]
 8001f20:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	7adb      	ldrb	r3, [r3, #11]
 8001f26:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f28:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	7a9b      	ldrb	r3, [r3, #10]
 8001f2e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f30:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	7b5b      	ldrb	r3, [r3, #13]
 8001f36:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f38:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	7b9b      	ldrb	r3, [r3, #14]
 8001f3e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f40:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	7bdb      	ldrb	r3, [r3, #15]
 8001f46:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f48:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	7a5b      	ldrb	r3, [r3, #9]
 8001f4e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001f50:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	7a1b      	ldrb	r3, [r3, #8]
 8001f56:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001f58:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	7812      	ldrb	r2, [r2, #0]
 8001f5e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f60:	4a04      	ldr	r2, [pc, #16]	@ (8001f74 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f62:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f64:	6113      	str	r3, [r2, #16]
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	e000ed90 	.word	0xe000ed90

08001f78 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001f80:	f7ff fe66 	bl	8001c50 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e312      	b.n	80025b6 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a66      	ldr	r2, [pc, #408]	@ (8002130 <HAL_DMA_Init+0x1b8>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d04a      	beq.n	8002030 <HAL_DMA_Init+0xb8>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a65      	ldr	r2, [pc, #404]	@ (8002134 <HAL_DMA_Init+0x1bc>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d045      	beq.n	8002030 <HAL_DMA_Init+0xb8>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a63      	ldr	r2, [pc, #396]	@ (8002138 <HAL_DMA_Init+0x1c0>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d040      	beq.n	8002030 <HAL_DMA_Init+0xb8>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a62      	ldr	r2, [pc, #392]	@ (800213c <HAL_DMA_Init+0x1c4>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d03b      	beq.n	8002030 <HAL_DMA_Init+0xb8>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a60      	ldr	r2, [pc, #384]	@ (8002140 <HAL_DMA_Init+0x1c8>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d036      	beq.n	8002030 <HAL_DMA_Init+0xb8>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a5f      	ldr	r2, [pc, #380]	@ (8002144 <HAL_DMA_Init+0x1cc>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d031      	beq.n	8002030 <HAL_DMA_Init+0xb8>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a5d      	ldr	r2, [pc, #372]	@ (8002148 <HAL_DMA_Init+0x1d0>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d02c      	beq.n	8002030 <HAL_DMA_Init+0xb8>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a5c      	ldr	r2, [pc, #368]	@ (800214c <HAL_DMA_Init+0x1d4>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d027      	beq.n	8002030 <HAL_DMA_Init+0xb8>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a5a      	ldr	r2, [pc, #360]	@ (8002150 <HAL_DMA_Init+0x1d8>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d022      	beq.n	8002030 <HAL_DMA_Init+0xb8>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a59      	ldr	r2, [pc, #356]	@ (8002154 <HAL_DMA_Init+0x1dc>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d01d      	beq.n	8002030 <HAL_DMA_Init+0xb8>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a57      	ldr	r2, [pc, #348]	@ (8002158 <HAL_DMA_Init+0x1e0>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d018      	beq.n	8002030 <HAL_DMA_Init+0xb8>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a56      	ldr	r2, [pc, #344]	@ (800215c <HAL_DMA_Init+0x1e4>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d013      	beq.n	8002030 <HAL_DMA_Init+0xb8>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a54      	ldr	r2, [pc, #336]	@ (8002160 <HAL_DMA_Init+0x1e8>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d00e      	beq.n	8002030 <HAL_DMA_Init+0xb8>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a53      	ldr	r2, [pc, #332]	@ (8002164 <HAL_DMA_Init+0x1ec>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d009      	beq.n	8002030 <HAL_DMA_Init+0xb8>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a51      	ldr	r2, [pc, #324]	@ (8002168 <HAL_DMA_Init+0x1f0>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d004      	beq.n	8002030 <HAL_DMA_Init+0xb8>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a50      	ldr	r2, [pc, #320]	@ (800216c <HAL_DMA_Init+0x1f4>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d101      	bne.n	8002034 <HAL_DMA_Init+0xbc>
 8002030:	2301      	movs	r3, #1
 8002032:	e000      	b.n	8002036 <HAL_DMA_Init+0xbe>
 8002034:	2300      	movs	r3, #0
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 813c 	beq.w	80022b4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2202      	movs	r2, #2
 8002040:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a37      	ldr	r2, [pc, #220]	@ (8002130 <HAL_DMA_Init+0x1b8>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d04a      	beq.n	80020ec <HAL_DMA_Init+0x174>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a36      	ldr	r2, [pc, #216]	@ (8002134 <HAL_DMA_Init+0x1bc>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d045      	beq.n	80020ec <HAL_DMA_Init+0x174>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a34      	ldr	r2, [pc, #208]	@ (8002138 <HAL_DMA_Init+0x1c0>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d040      	beq.n	80020ec <HAL_DMA_Init+0x174>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a33      	ldr	r2, [pc, #204]	@ (800213c <HAL_DMA_Init+0x1c4>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d03b      	beq.n	80020ec <HAL_DMA_Init+0x174>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a31      	ldr	r2, [pc, #196]	@ (8002140 <HAL_DMA_Init+0x1c8>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d036      	beq.n	80020ec <HAL_DMA_Init+0x174>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a30      	ldr	r2, [pc, #192]	@ (8002144 <HAL_DMA_Init+0x1cc>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d031      	beq.n	80020ec <HAL_DMA_Init+0x174>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a2e      	ldr	r2, [pc, #184]	@ (8002148 <HAL_DMA_Init+0x1d0>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d02c      	beq.n	80020ec <HAL_DMA_Init+0x174>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a2d      	ldr	r2, [pc, #180]	@ (800214c <HAL_DMA_Init+0x1d4>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d027      	beq.n	80020ec <HAL_DMA_Init+0x174>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a2b      	ldr	r2, [pc, #172]	@ (8002150 <HAL_DMA_Init+0x1d8>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d022      	beq.n	80020ec <HAL_DMA_Init+0x174>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a2a      	ldr	r2, [pc, #168]	@ (8002154 <HAL_DMA_Init+0x1dc>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d01d      	beq.n	80020ec <HAL_DMA_Init+0x174>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a28      	ldr	r2, [pc, #160]	@ (8002158 <HAL_DMA_Init+0x1e0>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d018      	beq.n	80020ec <HAL_DMA_Init+0x174>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a27      	ldr	r2, [pc, #156]	@ (800215c <HAL_DMA_Init+0x1e4>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d013      	beq.n	80020ec <HAL_DMA_Init+0x174>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a25      	ldr	r2, [pc, #148]	@ (8002160 <HAL_DMA_Init+0x1e8>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d00e      	beq.n	80020ec <HAL_DMA_Init+0x174>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a24      	ldr	r2, [pc, #144]	@ (8002164 <HAL_DMA_Init+0x1ec>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d009      	beq.n	80020ec <HAL_DMA_Init+0x174>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a22      	ldr	r2, [pc, #136]	@ (8002168 <HAL_DMA_Init+0x1f0>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d004      	beq.n	80020ec <HAL_DMA_Init+0x174>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a21      	ldr	r2, [pc, #132]	@ (800216c <HAL_DMA_Init+0x1f4>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d108      	bne.n	80020fe <HAL_DMA_Init+0x186>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0201 	bic.w	r2, r2, #1
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	e007      	b.n	800210e <HAL_DMA_Init+0x196>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0201 	bic.w	r2, r2, #1
 800210c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800210e:	e02f      	b.n	8002170 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002110:	f7ff fd9e 	bl	8001c50 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b05      	cmp	r3, #5
 800211c:	d928      	bls.n	8002170 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2220      	movs	r2, #32
 8002122:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2203      	movs	r2, #3
 8002128:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e242      	b.n	80025b6 <HAL_DMA_Init+0x63e>
 8002130:	40020010 	.word	0x40020010
 8002134:	40020028 	.word	0x40020028
 8002138:	40020040 	.word	0x40020040
 800213c:	40020058 	.word	0x40020058
 8002140:	40020070 	.word	0x40020070
 8002144:	40020088 	.word	0x40020088
 8002148:	400200a0 	.word	0x400200a0
 800214c:	400200b8 	.word	0x400200b8
 8002150:	40020410 	.word	0x40020410
 8002154:	40020428 	.word	0x40020428
 8002158:	40020440 	.word	0x40020440
 800215c:	40020458 	.word	0x40020458
 8002160:	40020470 	.word	0x40020470
 8002164:	40020488 	.word	0x40020488
 8002168:	400204a0 	.word	0x400204a0
 800216c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1c8      	bne.n	8002110 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	4b83      	ldr	r3, [pc, #524]	@ (8002398 <HAL_DMA_Init+0x420>)
 800218a:	4013      	ands	r3, r2
 800218c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002196:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021a2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ae:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	d107      	bne.n	80021d4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021cc:	4313      	orrs	r3, r2
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b28      	cmp	r3, #40	@ 0x28
 80021da:	d903      	bls.n	80021e4 <HAL_DMA_Init+0x26c>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80021e2:	d91f      	bls.n	8002224 <HAL_DMA_Init+0x2ac>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80021ea:	d903      	bls.n	80021f4 <HAL_DMA_Init+0x27c>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b42      	cmp	r3, #66	@ 0x42
 80021f2:	d917      	bls.n	8002224 <HAL_DMA_Init+0x2ac>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b46      	cmp	r3, #70	@ 0x46
 80021fa:	d903      	bls.n	8002204 <HAL_DMA_Init+0x28c>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b48      	cmp	r3, #72	@ 0x48
 8002202:	d90f      	bls.n	8002224 <HAL_DMA_Init+0x2ac>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b4e      	cmp	r3, #78	@ 0x4e
 800220a:	d903      	bls.n	8002214 <HAL_DMA_Init+0x29c>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b52      	cmp	r3, #82	@ 0x52
 8002212:	d907      	bls.n	8002224 <HAL_DMA_Init+0x2ac>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b73      	cmp	r3, #115	@ 0x73
 800221a:	d905      	bls.n	8002228 <HAL_DMA_Init+0x2b0>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b77      	cmp	r3, #119	@ 0x77
 8002222:	d801      	bhi.n	8002228 <HAL_DMA_Init+0x2b0>
 8002224:	2301      	movs	r3, #1
 8002226:	e000      	b.n	800222a <HAL_DMA_Init+0x2b2>
 8002228:	2300      	movs	r3, #0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002234:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	f023 0307 	bic.w	r3, r3, #7
 800224c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	4313      	orrs	r3, r2
 8002256:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225c:	2b04      	cmp	r3, #4
 800225e:	d117      	bne.n	8002290 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	4313      	orrs	r3, r2
 8002268:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00e      	beq.n	8002290 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f001 fdca 	bl	8003e0c <DMA_CheckFifoParam>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d008      	beq.n	8002290 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2240      	movs	r2, #64	@ 0x40
 8002282:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e192      	b.n	80025b6 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f001 fd05 	bl	8003ca8 <DMA_CalcBaseAndBitshift>
 800229e:	4603      	mov	r3, r0
 80022a0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a6:	f003 031f 	and.w	r3, r3, #31
 80022aa:	223f      	movs	r2, #63	@ 0x3f
 80022ac:	409a      	lsls	r2, r3
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	609a      	str	r2, [r3, #8]
 80022b2:	e0c8      	b.n	8002446 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a38      	ldr	r2, [pc, #224]	@ (800239c <HAL_DMA_Init+0x424>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d022      	beq.n	8002304 <HAL_DMA_Init+0x38c>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a37      	ldr	r2, [pc, #220]	@ (80023a0 <HAL_DMA_Init+0x428>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d01d      	beq.n	8002304 <HAL_DMA_Init+0x38c>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a35      	ldr	r2, [pc, #212]	@ (80023a4 <HAL_DMA_Init+0x42c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d018      	beq.n	8002304 <HAL_DMA_Init+0x38c>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a34      	ldr	r2, [pc, #208]	@ (80023a8 <HAL_DMA_Init+0x430>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d013      	beq.n	8002304 <HAL_DMA_Init+0x38c>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a32      	ldr	r2, [pc, #200]	@ (80023ac <HAL_DMA_Init+0x434>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d00e      	beq.n	8002304 <HAL_DMA_Init+0x38c>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a31      	ldr	r2, [pc, #196]	@ (80023b0 <HAL_DMA_Init+0x438>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d009      	beq.n	8002304 <HAL_DMA_Init+0x38c>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a2f      	ldr	r2, [pc, #188]	@ (80023b4 <HAL_DMA_Init+0x43c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d004      	beq.n	8002304 <HAL_DMA_Init+0x38c>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a2e      	ldr	r2, [pc, #184]	@ (80023b8 <HAL_DMA_Init+0x440>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d101      	bne.n	8002308 <HAL_DMA_Init+0x390>
 8002304:	2301      	movs	r3, #1
 8002306:	e000      	b.n	800230a <HAL_DMA_Init+0x392>
 8002308:	2300      	movs	r3, #0
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 8092 	beq.w	8002434 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a21      	ldr	r2, [pc, #132]	@ (800239c <HAL_DMA_Init+0x424>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d021      	beq.n	800235e <HAL_DMA_Init+0x3e6>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a20      	ldr	r2, [pc, #128]	@ (80023a0 <HAL_DMA_Init+0x428>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d01c      	beq.n	800235e <HAL_DMA_Init+0x3e6>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a1e      	ldr	r2, [pc, #120]	@ (80023a4 <HAL_DMA_Init+0x42c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d017      	beq.n	800235e <HAL_DMA_Init+0x3e6>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a1d      	ldr	r2, [pc, #116]	@ (80023a8 <HAL_DMA_Init+0x430>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d012      	beq.n	800235e <HAL_DMA_Init+0x3e6>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a1b      	ldr	r2, [pc, #108]	@ (80023ac <HAL_DMA_Init+0x434>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d00d      	beq.n	800235e <HAL_DMA_Init+0x3e6>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a1a      	ldr	r2, [pc, #104]	@ (80023b0 <HAL_DMA_Init+0x438>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d008      	beq.n	800235e <HAL_DMA_Init+0x3e6>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a18      	ldr	r2, [pc, #96]	@ (80023b4 <HAL_DMA_Init+0x43c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d003      	beq.n	800235e <HAL_DMA_Init+0x3e6>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a17      	ldr	r2, [pc, #92]	@ (80023b8 <HAL_DMA_Init+0x440>)
 800235c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2202      	movs	r2, #2
 8002362:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	4b10      	ldr	r3, [pc, #64]	@ (80023bc <HAL_DMA_Init+0x444>)
 800237a:	4013      	ands	r3, r2
 800237c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	2b40      	cmp	r3, #64	@ 0x40
 8002384:	d01c      	beq.n	80023c0 <HAL_DMA_Init+0x448>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	2b80      	cmp	r3, #128	@ 0x80
 800238c:	d102      	bne.n	8002394 <HAL_DMA_Init+0x41c>
 800238e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002392:	e016      	b.n	80023c2 <HAL_DMA_Init+0x44a>
 8002394:	2300      	movs	r3, #0
 8002396:	e014      	b.n	80023c2 <HAL_DMA_Init+0x44a>
 8002398:	fe10803f 	.word	0xfe10803f
 800239c:	58025408 	.word	0x58025408
 80023a0:	5802541c 	.word	0x5802541c
 80023a4:	58025430 	.word	0x58025430
 80023a8:	58025444 	.word	0x58025444
 80023ac:	58025458 	.word	0x58025458
 80023b0:	5802546c 	.word	0x5802546c
 80023b4:	58025480 	.word	0x58025480
 80023b8:	58025494 	.word	0x58025494
 80023bc:	fffe000f 	.word	0xfffe000f
 80023c0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	68d2      	ldr	r2, [r2, #12]
 80023c6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80023c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80023d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80023d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80023e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80023e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80023f0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	461a      	mov	r2, r3
 8002406:	4b6e      	ldr	r3, [pc, #440]	@ (80025c0 <HAL_DMA_Init+0x648>)
 8002408:	4413      	add	r3, r2
 800240a:	4a6e      	ldr	r2, [pc, #440]	@ (80025c4 <HAL_DMA_Init+0x64c>)
 800240c:	fba2 2303 	umull	r2, r3, r2, r3
 8002410:	091b      	lsrs	r3, r3, #4
 8002412:	009a      	lsls	r2, r3, #2
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f001 fc45 	bl	8003ca8 <DMA_CalcBaseAndBitshift>
 800241e:	4603      	mov	r3, r0
 8002420:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002426:	f003 031f 	and.w	r3, r3, #31
 800242a:	2201      	movs	r2, #1
 800242c:	409a      	lsls	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	e008      	b.n	8002446 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2240      	movs	r2, #64	@ 0x40
 8002438:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2203      	movs	r2, #3
 800243e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e0b7      	b.n	80025b6 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a5f      	ldr	r2, [pc, #380]	@ (80025c8 <HAL_DMA_Init+0x650>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d072      	beq.n	8002536 <HAL_DMA_Init+0x5be>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a5d      	ldr	r2, [pc, #372]	@ (80025cc <HAL_DMA_Init+0x654>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d06d      	beq.n	8002536 <HAL_DMA_Init+0x5be>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a5c      	ldr	r2, [pc, #368]	@ (80025d0 <HAL_DMA_Init+0x658>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d068      	beq.n	8002536 <HAL_DMA_Init+0x5be>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a5a      	ldr	r2, [pc, #360]	@ (80025d4 <HAL_DMA_Init+0x65c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d063      	beq.n	8002536 <HAL_DMA_Init+0x5be>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a59      	ldr	r2, [pc, #356]	@ (80025d8 <HAL_DMA_Init+0x660>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d05e      	beq.n	8002536 <HAL_DMA_Init+0x5be>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a57      	ldr	r2, [pc, #348]	@ (80025dc <HAL_DMA_Init+0x664>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d059      	beq.n	8002536 <HAL_DMA_Init+0x5be>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a56      	ldr	r2, [pc, #344]	@ (80025e0 <HAL_DMA_Init+0x668>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d054      	beq.n	8002536 <HAL_DMA_Init+0x5be>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a54      	ldr	r2, [pc, #336]	@ (80025e4 <HAL_DMA_Init+0x66c>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d04f      	beq.n	8002536 <HAL_DMA_Init+0x5be>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a53      	ldr	r2, [pc, #332]	@ (80025e8 <HAL_DMA_Init+0x670>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d04a      	beq.n	8002536 <HAL_DMA_Init+0x5be>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a51      	ldr	r2, [pc, #324]	@ (80025ec <HAL_DMA_Init+0x674>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d045      	beq.n	8002536 <HAL_DMA_Init+0x5be>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a50      	ldr	r2, [pc, #320]	@ (80025f0 <HAL_DMA_Init+0x678>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d040      	beq.n	8002536 <HAL_DMA_Init+0x5be>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a4e      	ldr	r2, [pc, #312]	@ (80025f4 <HAL_DMA_Init+0x67c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d03b      	beq.n	8002536 <HAL_DMA_Init+0x5be>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a4d      	ldr	r2, [pc, #308]	@ (80025f8 <HAL_DMA_Init+0x680>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d036      	beq.n	8002536 <HAL_DMA_Init+0x5be>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a4b      	ldr	r2, [pc, #300]	@ (80025fc <HAL_DMA_Init+0x684>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d031      	beq.n	8002536 <HAL_DMA_Init+0x5be>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a4a      	ldr	r2, [pc, #296]	@ (8002600 <HAL_DMA_Init+0x688>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d02c      	beq.n	8002536 <HAL_DMA_Init+0x5be>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a48      	ldr	r2, [pc, #288]	@ (8002604 <HAL_DMA_Init+0x68c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d027      	beq.n	8002536 <HAL_DMA_Init+0x5be>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a47      	ldr	r2, [pc, #284]	@ (8002608 <HAL_DMA_Init+0x690>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d022      	beq.n	8002536 <HAL_DMA_Init+0x5be>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a45      	ldr	r2, [pc, #276]	@ (800260c <HAL_DMA_Init+0x694>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d01d      	beq.n	8002536 <HAL_DMA_Init+0x5be>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a44      	ldr	r2, [pc, #272]	@ (8002610 <HAL_DMA_Init+0x698>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d018      	beq.n	8002536 <HAL_DMA_Init+0x5be>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a42      	ldr	r2, [pc, #264]	@ (8002614 <HAL_DMA_Init+0x69c>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d013      	beq.n	8002536 <HAL_DMA_Init+0x5be>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a41      	ldr	r2, [pc, #260]	@ (8002618 <HAL_DMA_Init+0x6a0>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d00e      	beq.n	8002536 <HAL_DMA_Init+0x5be>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a3f      	ldr	r2, [pc, #252]	@ (800261c <HAL_DMA_Init+0x6a4>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d009      	beq.n	8002536 <HAL_DMA_Init+0x5be>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a3e      	ldr	r2, [pc, #248]	@ (8002620 <HAL_DMA_Init+0x6a8>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d004      	beq.n	8002536 <HAL_DMA_Init+0x5be>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a3c      	ldr	r2, [pc, #240]	@ (8002624 <HAL_DMA_Init+0x6ac>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d101      	bne.n	800253a <HAL_DMA_Init+0x5c2>
 8002536:	2301      	movs	r3, #1
 8002538:	e000      	b.n	800253c <HAL_DMA_Init+0x5c4>
 800253a:	2300      	movs	r3, #0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d032      	beq.n	80025a6 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f001 fcdf 	bl	8003f04 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	2b80      	cmp	r3, #128	@ 0x80
 800254c:	d102      	bne.n	8002554 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002568:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d010      	beq.n	8002594 <HAL_DMA_Init+0x61c>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b08      	cmp	r3, #8
 8002578:	d80c      	bhi.n	8002594 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f001 fd5c 	bl	8004038 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002590:	605a      	str	r2, [r3, #4]
 8002592:	e008      	b.n	80025a6 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	a7fdabf8 	.word	0xa7fdabf8
 80025c4:	cccccccd 	.word	0xcccccccd
 80025c8:	40020010 	.word	0x40020010
 80025cc:	40020028 	.word	0x40020028
 80025d0:	40020040 	.word	0x40020040
 80025d4:	40020058 	.word	0x40020058
 80025d8:	40020070 	.word	0x40020070
 80025dc:	40020088 	.word	0x40020088
 80025e0:	400200a0 	.word	0x400200a0
 80025e4:	400200b8 	.word	0x400200b8
 80025e8:	40020410 	.word	0x40020410
 80025ec:	40020428 	.word	0x40020428
 80025f0:	40020440 	.word	0x40020440
 80025f4:	40020458 	.word	0x40020458
 80025f8:	40020470 	.word	0x40020470
 80025fc:	40020488 	.word	0x40020488
 8002600:	400204a0 	.word	0x400204a0
 8002604:	400204b8 	.word	0x400204b8
 8002608:	58025408 	.word	0x58025408
 800260c:	5802541c 	.word	0x5802541c
 8002610:	58025430 	.word	0x58025430
 8002614:	58025444 	.word	0x58025444
 8002618:	58025458 	.word	0x58025458
 800261c:	5802546c 	.word	0x5802546c
 8002620:	58025480 	.word	0x58025480
 8002624:	58025494 	.word	0x58025494

08002628 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
 8002634:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002636:	2300      	movs	r3, #0
 8002638:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e226      	b.n	8002a92 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800264a:	2b01      	cmp	r3, #1
 800264c:	d101      	bne.n	8002652 <HAL_DMA_Start_IT+0x2a>
 800264e:	2302      	movs	r3, #2
 8002650:	e21f      	b.n	8002a92 <HAL_DMA_Start_IT+0x46a>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b01      	cmp	r3, #1
 8002664:	f040 820a 	bne.w	8002a7c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2202      	movs	r2, #2
 800266c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a68      	ldr	r2, [pc, #416]	@ (800281c <HAL_DMA_Start_IT+0x1f4>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d04a      	beq.n	8002716 <HAL_DMA_Start_IT+0xee>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a66      	ldr	r2, [pc, #408]	@ (8002820 <HAL_DMA_Start_IT+0x1f8>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d045      	beq.n	8002716 <HAL_DMA_Start_IT+0xee>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a65      	ldr	r2, [pc, #404]	@ (8002824 <HAL_DMA_Start_IT+0x1fc>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d040      	beq.n	8002716 <HAL_DMA_Start_IT+0xee>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a63      	ldr	r2, [pc, #396]	@ (8002828 <HAL_DMA_Start_IT+0x200>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d03b      	beq.n	8002716 <HAL_DMA_Start_IT+0xee>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a62      	ldr	r2, [pc, #392]	@ (800282c <HAL_DMA_Start_IT+0x204>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d036      	beq.n	8002716 <HAL_DMA_Start_IT+0xee>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a60      	ldr	r2, [pc, #384]	@ (8002830 <HAL_DMA_Start_IT+0x208>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d031      	beq.n	8002716 <HAL_DMA_Start_IT+0xee>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a5f      	ldr	r2, [pc, #380]	@ (8002834 <HAL_DMA_Start_IT+0x20c>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d02c      	beq.n	8002716 <HAL_DMA_Start_IT+0xee>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a5d      	ldr	r2, [pc, #372]	@ (8002838 <HAL_DMA_Start_IT+0x210>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d027      	beq.n	8002716 <HAL_DMA_Start_IT+0xee>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a5c      	ldr	r2, [pc, #368]	@ (800283c <HAL_DMA_Start_IT+0x214>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d022      	beq.n	8002716 <HAL_DMA_Start_IT+0xee>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a5a      	ldr	r2, [pc, #360]	@ (8002840 <HAL_DMA_Start_IT+0x218>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d01d      	beq.n	8002716 <HAL_DMA_Start_IT+0xee>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a59      	ldr	r2, [pc, #356]	@ (8002844 <HAL_DMA_Start_IT+0x21c>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d018      	beq.n	8002716 <HAL_DMA_Start_IT+0xee>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a57      	ldr	r2, [pc, #348]	@ (8002848 <HAL_DMA_Start_IT+0x220>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d013      	beq.n	8002716 <HAL_DMA_Start_IT+0xee>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a56      	ldr	r2, [pc, #344]	@ (800284c <HAL_DMA_Start_IT+0x224>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d00e      	beq.n	8002716 <HAL_DMA_Start_IT+0xee>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a54      	ldr	r2, [pc, #336]	@ (8002850 <HAL_DMA_Start_IT+0x228>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d009      	beq.n	8002716 <HAL_DMA_Start_IT+0xee>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a53      	ldr	r2, [pc, #332]	@ (8002854 <HAL_DMA_Start_IT+0x22c>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d004      	beq.n	8002716 <HAL_DMA_Start_IT+0xee>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a51      	ldr	r2, [pc, #324]	@ (8002858 <HAL_DMA_Start_IT+0x230>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d108      	bne.n	8002728 <HAL_DMA_Start_IT+0x100>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 0201 	bic.w	r2, r2, #1
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	e007      	b.n	8002738 <HAL_DMA_Start_IT+0x110>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0201 	bic.w	r2, r2, #1
 8002736:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	68b9      	ldr	r1, [r7, #8]
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f001 f906 	bl	8003950 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a34      	ldr	r2, [pc, #208]	@ (800281c <HAL_DMA_Start_IT+0x1f4>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d04a      	beq.n	80027e4 <HAL_DMA_Start_IT+0x1bc>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a33      	ldr	r2, [pc, #204]	@ (8002820 <HAL_DMA_Start_IT+0x1f8>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d045      	beq.n	80027e4 <HAL_DMA_Start_IT+0x1bc>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a31      	ldr	r2, [pc, #196]	@ (8002824 <HAL_DMA_Start_IT+0x1fc>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d040      	beq.n	80027e4 <HAL_DMA_Start_IT+0x1bc>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a30      	ldr	r2, [pc, #192]	@ (8002828 <HAL_DMA_Start_IT+0x200>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d03b      	beq.n	80027e4 <HAL_DMA_Start_IT+0x1bc>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a2e      	ldr	r2, [pc, #184]	@ (800282c <HAL_DMA_Start_IT+0x204>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d036      	beq.n	80027e4 <HAL_DMA_Start_IT+0x1bc>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a2d      	ldr	r2, [pc, #180]	@ (8002830 <HAL_DMA_Start_IT+0x208>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d031      	beq.n	80027e4 <HAL_DMA_Start_IT+0x1bc>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a2b      	ldr	r2, [pc, #172]	@ (8002834 <HAL_DMA_Start_IT+0x20c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d02c      	beq.n	80027e4 <HAL_DMA_Start_IT+0x1bc>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a2a      	ldr	r2, [pc, #168]	@ (8002838 <HAL_DMA_Start_IT+0x210>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d027      	beq.n	80027e4 <HAL_DMA_Start_IT+0x1bc>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a28      	ldr	r2, [pc, #160]	@ (800283c <HAL_DMA_Start_IT+0x214>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d022      	beq.n	80027e4 <HAL_DMA_Start_IT+0x1bc>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a27      	ldr	r2, [pc, #156]	@ (8002840 <HAL_DMA_Start_IT+0x218>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d01d      	beq.n	80027e4 <HAL_DMA_Start_IT+0x1bc>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a25      	ldr	r2, [pc, #148]	@ (8002844 <HAL_DMA_Start_IT+0x21c>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d018      	beq.n	80027e4 <HAL_DMA_Start_IT+0x1bc>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a24      	ldr	r2, [pc, #144]	@ (8002848 <HAL_DMA_Start_IT+0x220>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d013      	beq.n	80027e4 <HAL_DMA_Start_IT+0x1bc>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a22      	ldr	r2, [pc, #136]	@ (800284c <HAL_DMA_Start_IT+0x224>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d00e      	beq.n	80027e4 <HAL_DMA_Start_IT+0x1bc>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a21      	ldr	r2, [pc, #132]	@ (8002850 <HAL_DMA_Start_IT+0x228>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d009      	beq.n	80027e4 <HAL_DMA_Start_IT+0x1bc>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a1f      	ldr	r2, [pc, #124]	@ (8002854 <HAL_DMA_Start_IT+0x22c>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d004      	beq.n	80027e4 <HAL_DMA_Start_IT+0x1bc>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a1e      	ldr	r2, [pc, #120]	@ (8002858 <HAL_DMA_Start_IT+0x230>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d101      	bne.n	80027e8 <HAL_DMA_Start_IT+0x1c0>
 80027e4:	2301      	movs	r3, #1
 80027e6:	e000      	b.n	80027ea <HAL_DMA_Start_IT+0x1c2>
 80027e8:	2300      	movs	r3, #0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d036      	beq.n	800285c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f023 021e 	bic.w	r2, r3, #30
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f042 0216 	orr.w	r2, r2, #22
 8002800:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002806:	2b00      	cmp	r3, #0
 8002808:	d03e      	beq.n	8002888 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f042 0208 	orr.w	r2, r2, #8
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	e035      	b.n	8002888 <HAL_DMA_Start_IT+0x260>
 800281c:	40020010 	.word	0x40020010
 8002820:	40020028 	.word	0x40020028
 8002824:	40020040 	.word	0x40020040
 8002828:	40020058 	.word	0x40020058
 800282c:	40020070 	.word	0x40020070
 8002830:	40020088 	.word	0x40020088
 8002834:	400200a0 	.word	0x400200a0
 8002838:	400200b8 	.word	0x400200b8
 800283c:	40020410 	.word	0x40020410
 8002840:	40020428 	.word	0x40020428
 8002844:	40020440 	.word	0x40020440
 8002848:	40020458 	.word	0x40020458
 800284c:	40020470 	.word	0x40020470
 8002850:	40020488 	.word	0x40020488
 8002854:	400204a0 	.word	0x400204a0
 8002858:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f023 020e 	bic.w	r2, r3, #14
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 020a 	orr.w	r2, r2, #10
 800286e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002874:	2b00      	cmp	r3, #0
 8002876:	d007      	beq.n	8002888 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f042 0204 	orr.w	r2, r2, #4
 8002886:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a83      	ldr	r2, [pc, #524]	@ (8002a9c <HAL_DMA_Start_IT+0x474>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d072      	beq.n	8002978 <HAL_DMA_Start_IT+0x350>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a82      	ldr	r2, [pc, #520]	@ (8002aa0 <HAL_DMA_Start_IT+0x478>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d06d      	beq.n	8002978 <HAL_DMA_Start_IT+0x350>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a80      	ldr	r2, [pc, #512]	@ (8002aa4 <HAL_DMA_Start_IT+0x47c>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d068      	beq.n	8002978 <HAL_DMA_Start_IT+0x350>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a7f      	ldr	r2, [pc, #508]	@ (8002aa8 <HAL_DMA_Start_IT+0x480>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d063      	beq.n	8002978 <HAL_DMA_Start_IT+0x350>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a7d      	ldr	r2, [pc, #500]	@ (8002aac <HAL_DMA_Start_IT+0x484>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d05e      	beq.n	8002978 <HAL_DMA_Start_IT+0x350>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a7c      	ldr	r2, [pc, #496]	@ (8002ab0 <HAL_DMA_Start_IT+0x488>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d059      	beq.n	8002978 <HAL_DMA_Start_IT+0x350>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a7a      	ldr	r2, [pc, #488]	@ (8002ab4 <HAL_DMA_Start_IT+0x48c>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d054      	beq.n	8002978 <HAL_DMA_Start_IT+0x350>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a79      	ldr	r2, [pc, #484]	@ (8002ab8 <HAL_DMA_Start_IT+0x490>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d04f      	beq.n	8002978 <HAL_DMA_Start_IT+0x350>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a77      	ldr	r2, [pc, #476]	@ (8002abc <HAL_DMA_Start_IT+0x494>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d04a      	beq.n	8002978 <HAL_DMA_Start_IT+0x350>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a76      	ldr	r2, [pc, #472]	@ (8002ac0 <HAL_DMA_Start_IT+0x498>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d045      	beq.n	8002978 <HAL_DMA_Start_IT+0x350>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a74      	ldr	r2, [pc, #464]	@ (8002ac4 <HAL_DMA_Start_IT+0x49c>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d040      	beq.n	8002978 <HAL_DMA_Start_IT+0x350>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a73      	ldr	r2, [pc, #460]	@ (8002ac8 <HAL_DMA_Start_IT+0x4a0>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d03b      	beq.n	8002978 <HAL_DMA_Start_IT+0x350>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a71      	ldr	r2, [pc, #452]	@ (8002acc <HAL_DMA_Start_IT+0x4a4>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d036      	beq.n	8002978 <HAL_DMA_Start_IT+0x350>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a70      	ldr	r2, [pc, #448]	@ (8002ad0 <HAL_DMA_Start_IT+0x4a8>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d031      	beq.n	8002978 <HAL_DMA_Start_IT+0x350>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a6e      	ldr	r2, [pc, #440]	@ (8002ad4 <HAL_DMA_Start_IT+0x4ac>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d02c      	beq.n	8002978 <HAL_DMA_Start_IT+0x350>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a6d      	ldr	r2, [pc, #436]	@ (8002ad8 <HAL_DMA_Start_IT+0x4b0>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d027      	beq.n	8002978 <HAL_DMA_Start_IT+0x350>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a6b      	ldr	r2, [pc, #428]	@ (8002adc <HAL_DMA_Start_IT+0x4b4>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d022      	beq.n	8002978 <HAL_DMA_Start_IT+0x350>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a6a      	ldr	r2, [pc, #424]	@ (8002ae0 <HAL_DMA_Start_IT+0x4b8>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d01d      	beq.n	8002978 <HAL_DMA_Start_IT+0x350>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a68      	ldr	r2, [pc, #416]	@ (8002ae4 <HAL_DMA_Start_IT+0x4bc>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d018      	beq.n	8002978 <HAL_DMA_Start_IT+0x350>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a67      	ldr	r2, [pc, #412]	@ (8002ae8 <HAL_DMA_Start_IT+0x4c0>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d013      	beq.n	8002978 <HAL_DMA_Start_IT+0x350>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a65      	ldr	r2, [pc, #404]	@ (8002aec <HAL_DMA_Start_IT+0x4c4>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d00e      	beq.n	8002978 <HAL_DMA_Start_IT+0x350>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a64      	ldr	r2, [pc, #400]	@ (8002af0 <HAL_DMA_Start_IT+0x4c8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d009      	beq.n	8002978 <HAL_DMA_Start_IT+0x350>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a62      	ldr	r2, [pc, #392]	@ (8002af4 <HAL_DMA_Start_IT+0x4cc>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d004      	beq.n	8002978 <HAL_DMA_Start_IT+0x350>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a61      	ldr	r2, [pc, #388]	@ (8002af8 <HAL_DMA_Start_IT+0x4d0>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d101      	bne.n	800297c <HAL_DMA_Start_IT+0x354>
 8002978:	2301      	movs	r3, #1
 800297a:	e000      	b.n	800297e <HAL_DMA_Start_IT+0x356>
 800297c:	2300      	movs	r3, #0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d01a      	beq.n	80029b8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d007      	beq.n	80029a0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800299a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800299e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d007      	beq.n	80029b8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029b6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a37      	ldr	r2, [pc, #220]	@ (8002a9c <HAL_DMA_Start_IT+0x474>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d04a      	beq.n	8002a58 <HAL_DMA_Start_IT+0x430>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a36      	ldr	r2, [pc, #216]	@ (8002aa0 <HAL_DMA_Start_IT+0x478>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d045      	beq.n	8002a58 <HAL_DMA_Start_IT+0x430>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a34      	ldr	r2, [pc, #208]	@ (8002aa4 <HAL_DMA_Start_IT+0x47c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d040      	beq.n	8002a58 <HAL_DMA_Start_IT+0x430>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a33      	ldr	r2, [pc, #204]	@ (8002aa8 <HAL_DMA_Start_IT+0x480>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d03b      	beq.n	8002a58 <HAL_DMA_Start_IT+0x430>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a31      	ldr	r2, [pc, #196]	@ (8002aac <HAL_DMA_Start_IT+0x484>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d036      	beq.n	8002a58 <HAL_DMA_Start_IT+0x430>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a30      	ldr	r2, [pc, #192]	@ (8002ab0 <HAL_DMA_Start_IT+0x488>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d031      	beq.n	8002a58 <HAL_DMA_Start_IT+0x430>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a2e      	ldr	r2, [pc, #184]	@ (8002ab4 <HAL_DMA_Start_IT+0x48c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d02c      	beq.n	8002a58 <HAL_DMA_Start_IT+0x430>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a2d      	ldr	r2, [pc, #180]	@ (8002ab8 <HAL_DMA_Start_IT+0x490>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d027      	beq.n	8002a58 <HAL_DMA_Start_IT+0x430>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a2b      	ldr	r2, [pc, #172]	@ (8002abc <HAL_DMA_Start_IT+0x494>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d022      	beq.n	8002a58 <HAL_DMA_Start_IT+0x430>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a2a      	ldr	r2, [pc, #168]	@ (8002ac0 <HAL_DMA_Start_IT+0x498>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d01d      	beq.n	8002a58 <HAL_DMA_Start_IT+0x430>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a28      	ldr	r2, [pc, #160]	@ (8002ac4 <HAL_DMA_Start_IT+0x49c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d018      	beq.n	8002a58 <HAL_DMA_Start_IT+0x430>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a27      	ldr	r2, [pc, #156]	@ (8002ac8 <HAL_DMA_Start_IT+0x4a0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d013      	beq.n	8002a58 <HAL_DMA_Start_IT+0x430>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a25      	ldr	r2, [pc, #148]	@ (8002acc <HAL_DMA_Start_IT+0x4a4>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d00e      	beq.n	8002a58 <HAL_DMA_Start_IT+0x430>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a24      	ldr	r2, [pc, #144]	@ (8002ad0 <HAL_DMA_Start_IT+0x4a8>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d009      	beq.n	8002a58 <HAL_DMA_Start_IT+0x430>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a22      	ldr	r2, [pc, #136]	@ (8002ad4 <HAL_DMA_Start_IT+0x4ac>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d004      	beq.n	8002a58 <HAL_DMA_Start_IT+0x430>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a21      	ldr	r2, [pc, #132]	@ (8002ad8 <HAL_DMA_Start_IT+0x4b0>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d108      	bne.n	8002a6a <HAL_DMA_Start_IT+0x442>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0201 	orr.w	r2, r2, #1
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	e012      	b.n	8002a90 <HAL_DMA_Start_IT+0x468>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f042 0201 	orr.w	r2, r2, #1
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	e009      	b.n	8002a90 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a82:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3718      	adds	r7, #24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40020010 	.word	0x40020010
 8002aa0:	40020028 	.word	0x40020028
 8002aa4:	40020040 	.word	0x40020040
 8002aa8:	40020058 	.word	0x40020058
 8002aac:	40020070 	.word	0x40020070
 8002ab0:	40020088 	.word	0x40020088
 8002ab4:	400200a0 	.word	0x400200a0
 8002ab8:	400200b8 	.word	0x400200b8
 8002abc:	40020410 	.word	0x40020410
 8002ac0:	40020428 	.word	0x40020428
 8002ac4:	40020440 	.word	0x40020440
 8002ac8:	40020458 	.word	0x40020458
 8002acc:	40020470 	.word	0x40020470
 8002ad0:	40020488 	.word	0x40020488
 8002ad4:	400204a0 	.word	0x400204a0
 8002ad8:	400204b8 	.word	0x400204b8
 8002adc:	58025408 	.word	0x58025408
 8002ae0:	5802541c 	.word	0x5802541c
 8002ae4:	58025430 	.word	0x58025430
 8002ae8:	58025444 	.word	0x58025444
 8002aec:	58025458 	.word	0x58025458
 8002af0:	5802546c 	.word	0x5802546c
 8002af4:	58025480 	.word	0x58025480
 8002af8:	58025494 	.word	0x58025494

08002afc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08a      	sub	sp, #40	@ 0x28
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b08:	4b67      	ldr	r3, [pc, #412]	@ (8002ca8 <HAL_DMA_IRQHandler+0x1ac>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a67      	ldr	r2, [pc, #412]	@ (8002cac <HAL_DMA_IRQHandler+0x1b0>)
 8002b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b12:	0a9b      	lsrs	r3, r3, #10
 8002b14:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b1a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b20:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002b22:	6a3b      	ldr	r3, [r7, #32]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a5f      	ldr	r2, [pc, #380]	@ (8002cb0 <HAL_DMA_IRQHandler+0x1b4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d04a      	beq.n	8002bce <HAL_DMA_IRQHandler+0xd2>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a5d      	ldr	r2, [pc, #372]	@ (8002cb4 <HAL_DMA_IRQHandler+0x1b8>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d045      	beq.n	8002bce <HAL_DMA_IRQHandler+0xd2>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a5c      	ldr	r2, [pc, #368]	@ (8002cb8 <HAL_DMA_IRQHandler+0x1bc>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d040      	beq.n	8002bce <HAL_DMA_IRQHandler+0xd2>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a5a      	ldr	r2, [pc, #360]	@ (8002cbc <HAL_DMA_IRQHandler+0x1c0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d03b      	beq.n	8002bce <HAL_DMA_IRQHandler+0xd2>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a59      	ldr	r2, [pc, #356]	@ (8002cc0 <HAL_DMA_IRQHandler+0x1c4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d036      	beq.n	8002bce <HAL_DMA_IRQHandler+0xd2>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a57      	ldr	r2, [pc, #348]	@ (8002cc4 <HAL_DMA_IRQHandler+0x1c8>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d031      	beq.n	8002bce <HAL_DMA_IRQHandler+0xd2>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a56      	ldr	r2, [pc, #344]	@ (8002cc8 <HAL_DMA_IRQHandler+0x1cc>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d02c      	beq.n	8002bce <HAL_DMA_IRQHandler+0xd2>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a54      	ldr	r2, [pc, #336]	@ (8002ccc <HAL_DMA_IRQHandler+0x1d0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d027      	beq.n	8002bce <HAL_DMA_IRQHandler+0xd2>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a53      	ldr	r2, [pc, #332]	@ (8002cd0 <HAL_DMA_IRQHandler+0x1d4>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d022      	beq.n	8002bce <HAL_DMA_IRQHandler+0xd2>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a51      	ldr	r2, [pc, #324]	@ (8002cd4 <HAL_DMA_IRQHandler+0x1d8>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d01d      	beq.n	8002bce <HAL_DMA_IRQHandler+0xd2>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a50      	ldr	r2, [pc, #320]	@ (8002cd8 <HAL_DMA_IRQHandler+0x1dc>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d018      	beq.n	8002bce <HAL_DMA_IRQHandler+0xd2>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a4e      	ldr	r2, [pc, #312]	@ (8002cdc <HAL_DMA_IRQHandler+0x1e0>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d013      	beq.n	8002bce <HAL_DMA_IRQHandler+0xd2>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a4d      	ldr	r2, [pc, #308]	@ (8002ce0 <HAL_DMA_IRQHandler+0x1e4>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d00e      	beq.n	8002bce <HAL_DMA_IRQHandler+0xd2>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a4b      	ldr	r2, [pc, #300]	@ (8002ce4 <HAL_DMA_IRQHandler+0x1e8>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d009      	beq.n	8002bce <HAL_DMA_IRQHandler+0xd2>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a4a      	ldr	r2, [pc, #296]	@ (8002ce8 <HAL_DMA_IRQHandler+0x1ec>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d004      	beq.n	8002bce <HAL_DMA_IRQHandler+0xd2>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a48      	ldr	r2, [pc, #288]	@ (8002cec <HAL_DMA_IRQHandler+0x1f0>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d101      	bne.n	8002bd2 <HAL_DMA_IRQHandler+0xd6>
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e000      	b.n	8002bd4 <HAL_DMA_IRQHandler+0xd8>
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 842b 	beq.w	8003430 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bde:	f003 031f 	and.w	r3, r3, #31
 8002be2:	2208      	movs	r2, #8
 8002be4:	409a      	lsls	r2, r3
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	4013      	ands	r3, r2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 80a2 	beq.w	8002d34 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a2e      	ldr	r2, [pc, #184]	@ (8002cb0 <HAL_DMA_IRQHandler+0x1b4>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d04a      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x194>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a2d      	ldr	r2, [pc, #180]	@ (8002cb4 <HAL_DMA_IRQHandler+0x1b8>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d045      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x194>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a2b      	ldr	r2, [pc, #172]	@ (8002cb8 <HAL_DMA_IRQHandler+0x1bc>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d040      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x194>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a2a      	ldr	r2, [pc, #168]	@ (8002cbc <HAL_DMA_IRQHandler+0x1c0>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d03b      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x194>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a28      	ldr	r2, [pc, #160]	@ (8002cc0 <HAL_DMA_IRQHandler+0x1c4>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d036      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x194>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a27      	ldr	r2, [pc, #156]	@ (8002cc4 <HAL_DMA_IRQHandler+0x1c8>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d031      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x194>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a25      	ldr	r2, [pc, #148]	@ (8002cc8 <HAL_DMA_IRQHandler+0x1cc>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d02c      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x194>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a24      	ldr	r2, [pc, #144]	@ (8002ccc <HAL_DMA_IRQHandler+0x1d0>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d027      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x194>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a22      	ldr	r2, [pc, #136]	@ (8002cd0 <HAL_DMA_IRQHandler+0x1d4>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d022      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x194>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a21      	ldr	r2, [pc, #132]	@ (8002cd4 <HAL_DMA_IRQHandler+0x1d8>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d01d      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x194>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a1f      	ldr	r2, [pc, #124]	@ (8002cd8 <HAL_DMA_IRQHandler+0x1dc>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d018      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x194>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a1e      	ldr	r2, [pc, #120]	@ (8002cdc <HAL_DMA_IRQHandler+0x1e0>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d013      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x194>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ce0 <HAL_DMA_IRQHandler+0x1e4>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d00e      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x194>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a1b      	ldr	r2, [pc, #108]	@ (8002ce4 <HAL_DMA_IRQHandler+0x1e8>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d009      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x194>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a19      	ldr	r2, [pc, #100]	@ (8002ce8 <HAL_DMA_IRQHandler+0x1ec>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d004      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x194>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a18      	ldr	r2, [pc, #96]	@ (8002cec <HAL_DMA_IRQHandler+0x1f0>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d12f      	bne.n	8002cf0 <HAL_DMA_IRQHandler+0x1f4>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0304 	and.w	r3, r3, #4
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	bf14      	ite	ne
 8002c9e:	2301      	movne	r3, #1
 8002ca0:	2300      	moveq	r3, #0
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	e02e      	b.n	8002d04 <HAL_DMA_IRQHandler+0x208>
 8002ca6:	bf00      	nop
 8002ca8:	24000000 	.word	0x24000000
 8002cac:	1b4e81b5 	.word	0x1b4e81b5
 8002cb0:	40020010 	.word	0x40020010
 8002cb4:	40020028 	.word	0x40020028
 8002cb8:	40020040 	.word	0x40020040
 8002cbc:	40020058 	.word	0x40020058
 8002cc0:	40020070 	.word	0x40020070
 8002cc4:	40020088 	.word	0x40020088
 8002cc8:	400200a0 	.word	0x400200a0
 8002ccc:	400200b8 	.word	0x400200b8
 8002cd0:	40020410 	.word	0x40020410
 8002cd4:	40020428 	.word	0x40020428
 8002cd8:	40020440 	.word	0x40020440
 8002cdc:	40020458 	.word	0x40020458
 8002ce0:	40020470 	.word	0x40020470
 8002ce4:	40020488 	.word	0x40020488
 8002ce8:	400204a0 	.word	0x400204a0
 8002cec:	400204b8 	.word	0x400204b8
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0308 	and.w	r3, r3, #8
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	bf14      	ite	ne
 8002cfe:	2301      	movne	r3, #1
 8002d00:	2300      	moveq	r3, #0
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d015      	beq.n	8002d34 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0204 	bic.w	r2, r2, #4
 8002d16:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d1c:	f003 031f 	and.w	r3, r3, #31
 8002d20:	2208      	movs	r2, #8
 8002d22:	409a      	lsls	r2, r3
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d2c:	f043 0201 	orr.w	r2, r3, #1
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d38:	f003 031f 	and.w	r3, r3, #31
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d06e      	beq.n	8002e28 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a69      	ldr	r2, [pc, #420]	@ (8002ef4 <HAL_DMA_IRQHandler+0x3f8>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d04a      	beq.n	8002dea <HAL_DMA_IRQHandler+0x2ee>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a67      	ldr	r2, [pc, #412]	@ (8002ef8 <HAL_DMA_IRQHandler+0x3fc>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d045      	beq.n	8002dea <HAL_DMA_IRQHandler+0x2ee>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a66      	ldr	r2, [pc, #408]	@ (8002efc <HAL_DMA_IRQHandler+0x400>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d040      	beq.n	8002dea <HAL_DMA_IRQHandler+0x2ee>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a64      	ldr	r2, [pc, #400]	@ (8002f00 <HAL_DMA_IRQHandler+0x404>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d03b      	beq.n	8002dea <HAL_DMA_IRQHandler+0x2ee>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a63      	ldr	r2, [pc, #396]	@ (8002f04 <HAL_DMA_IRQHandler+0x408>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d036      	beq.n	8002dea <HAL_DMA_IRQHandler+0x2ee>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a61      	ldr	r2, [pc, #388]	@ (8002f08 <HAL_DMA_IRQHandler+0x40c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d031      	beq.n	8002dea <HAL_DMA_IRQHandler+0x2ee>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a60      	ldr	r2, [pc, #384]	@ (8002f0c <HAL_DMA_IRQHandler+0x410>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d02c      	beq.n	8002dea <HAL_DMA_IRQHandler+0x2ee>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a5e      	ldr	r2, [pc, #376]	@ (8002f10 <HAL_DMA_IRQHandler+0x414>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d027      	beq.n	8002dea <HAL_DMA_IRQHandler+0x2ee>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a5d      	ldr	r2, [pc, #372]	@ (8002f14 <HAL_DMA_IRQHandler+0x418>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d022      	beq.n	8002dea <HAL_DMA_IRQHandler+0x2ee>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a5b      	ldr	r2, [pc, #364]	@ (8002f18 <HAL_DMA_IRQHandler+0x41c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d01d      	beq.n	8002dea <HAL_DMA_IRQHandler+0x2ee>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a5a      	ldr	r2, [pc, #360]	@ (8002f1c <HAL_DMA_IRQHandler+0x420>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d018      	beq.n	8002dea <HAL_DMA_IRQHandler+0x2ee>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a58      	ldr	r2, [pc, #352]	@ (8002f20 <HAL_DMA_IRQHandler+0x424>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d013      	beq.n	8002dea <HAL_DMA_IRQHandler+0x2ee>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a57      	ldr	r2, [pc, #348]	@ (8002f24 <HAL_DMA_IRQHandler+0x428>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d00e      	beq.n	8002dea <HAL_DMA_IRQHandler+0x2ee>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a55      	ldr	r2, [pc, #340]	@ (8002f28 <HAL_DMA_IRQHandler+0x42c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d009      	beq.n	8002dea <HAL_DMA_IRQHandler+0x2ee>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a54      	ldr	r2, [pc, #336]	@ (8002f2c <HAL_DMA_IRQHandler+0x430>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d004      	beq.n	8002dea <HAL_DMA_IRQHandler+0x2ee>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a52      	ldr	r2, [pc, #328]	@ (8002f30 <HAL_DMA_IRQHandler+0x434>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d10a      	bne.n	8002e00 <HAL_DMA_IRQHandler+0x304>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	bf14      	ite	ne
 8002df8:	2301      	movne	r3, #1
 8002dfa:	2300      	moveq	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	e003      	b.n	8002e08 <HAL_DMA_IRQHandler+0x30c>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2300      	movs	r3, #0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00d      	beq.n	8002e28 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e10:	f003 031f 	and.w	r3, r3, #31
 8002e14:	2201      	movs	r2, #1
 8002e16:	409a      	lsls	r2, r3
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e20:	f043 0202 	orr.w	r2, r3, #2
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e2c:	f003 031f 	and.w	r3, r3, #31
 8002e30:	2204      	movs	r2, #4
 8002e32:	409a      	lsls	r2, r3
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 808f 	beq.w	8002f5c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a2c      	ldr	r2, [pc, #176]	@ (8002ef4 <HAL_DMA_IRQHandler+0x3f8>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d04a      	beq.n	8002ede <HAL_DMA_IRQHandler+0x3e2>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a2a      	ldr	r2, [pc, #168]	@ (8002ef8 <HAL_DMA_IRQHandler+0x3fc>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d045      	beq.n	8002ede <HAL_DMA_IRQHandler+0x3e2>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a29      	ldr	r2, [pc, #164]	@ (8002efc <HAL_DMA_IRQHandler+0x400>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d040      	beq.n	8002ede <HAL_DMA_IRQHandler+0x3e2>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a27      	ldr	r2, [pc, #156]	@ (8002f00 <HAL_DMA_IRQHandler+0x404>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d03b      	beq.n	8002ede <HAL_DMA_IRQHandler+0x3e2>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a26      	ldr	r2, [pc, #152]	@ (8002f04 <HAL_DMA_IRQHandler+0x408>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d036      	beq.n	8002ede <HAL_DMA_IRQHandler+0x3e2>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a24      	ldr	r2, [pc, #144]	@ (8002f08 <HAL_DMA_IRQHandler+0x40c>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d031      	beq.n	8002ede <HAL_DMA_IRQHandler+0x3e2>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a23      	ldr	r2, [pc, #140]	@ (8002f0c <HAL_DMA_IRQHandler+0x410>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d02c      	beq.n	8002ede <HAL_DMA_IRQHandler+0x3e2>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a21      	ldr	r2, [pc, #132]	@ (8002f10 <HAL_DMA_IRQHandler+0x414>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d027      	beq.n	8002ede <HAL_DMA_IRQHandler+0x3e2>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a20      	ldr	r2, [pc, #128]	@ (8002f14 <HAL_DMA_IRQHandler+0x418>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d022      	beq.n	8002ede <HAL_DMA_IRQHandler+0x3e2>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a1e      	ldr	r2, [pc, #120]	@ (8002f18 <HAL_DMA_IRQHandler+0x41c>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d01d      	beq.n	8002ede <HAL_DMA_IRQHandler+0x3e2>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a1d      	ldr	r2, [pc, #116]	@ (8002f1c <HAL_DMA_IRQHandler+0x420>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d018      	beq.n	8002ede <HAL_DMA_IRQHandler+0x3e2>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a1b      	ldr	r2, [pc, #108]	@ (8002f20 <HAL_DMA_IRQHandler+0x424>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d013      	beq.n	8002ede <HAL_DMA_IRQHandler+0x3e2>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a1a      	ldr	r2, [pc, #104]	@ (8002f24 <HAL_DMA_IRQHandler+0x428>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d00e      	beq.n	8002ede <HAL_DMA_IRQHandler+0x3e2>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a18      	ldr	r2, [pc, #96]	@ (8002f28 <HAL_DMA_IRQHandler+0x42c>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d009      	beq.n	8002ede <HAL_DMA_IRQHandler+0x3e2>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a17      	ldr	r2, [pc, #92]	@ (8002f2c <HAL_DMA_IRQHandler+0x430>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d004      	beq.n	8002ede <HAL_DMA_IRQHandler+0x3e2>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a15      	ldr	r2, [pc, #84]	@ (8002f30 <HAL_DMA_IRQHandler+0x434>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d12a      	bne.n	8002f34 <HAL_DMA_IRQHandler+0x438>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	bf14      	ite	ne
 8002eec:	2301      	movne	r3, #1
 8002eee:	2300      	moveq	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	e023      	b.n	8002f3c <HAL_DMA_IRQHandler+0x440>
 8002ef4:	40020010 	.word	0x40020010
 8002ef8:	40020028 	.word	0x40020028
 8002efc:	40020040 	.word	0x40020040
 8002f00:	40020058 	.word	0x40020058
 8002f04:	40020070 	.word	0x40020070
 8002f08:	40020088 	.word	0x40020088
 8002f0c:	400200a0 	.word	0x400200a0
 8002f10:	400200b8 	.word	0x400200b8
 8002f14:	40020410 	.word	0x40020410
 8002f18:	40020428 	.word	0x40020428
 8002f1c:	40020440 	.word	0x40020440
 8002f20:	40020458 	.word	0x40020458
 8002f24:	40020470 	.word	0x40020470
 8002f28:	40020488 	.word	0x40020488
 8002f2c:	400204a0 	.word	0x400204a0
 8002f30:	400204b8 	.word	0x400204b8
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00d      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f44:	f003 031f 	and.w	r3, r3, #31
 8002f48:	2204      	movs	r2, #4
 8002f4a:	409a      	lsls	r2, r3
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f54:	f043 0204 	orr.w	r2, r3, #4
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f60:	f003 031f 	and.w	r3, r3, #31
 8002f64:	2210      	movs	r2, #16
 8002f66:	409a      	lsls	r2, r3
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f000 80a6 	beq.w	80030be <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a85      	ldr	r2, [pc, #532]	@ (800318c <HAL_DMA_IRQHandler+0x690>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d04a      	beq.n	8003012 <HAL_DMA_IRQHandler+0x516>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a83      	ldr	r2, [pc, #524]	@ (8003190 <HAL_DMA_IRQHandler+0x694>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d045      	beq.n	8003012 <HAL_DMA_IRQHandler+0x516>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a82      	ldr	r2, [pc, #520]	@ (8003194 <HAL_DMA_IRQHandler+0x698>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d040      	beq.n	8003012 <HAL_DMA_IRQHandler+0x516>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a80      	ldr	r2, [pc, #512]	@ (8003198 <HAL_DMA_IRQHandler+0x69c>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d03b      	beq.n	8003012 <HAL_DMA_IRQHandler+0x516>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a7f      	ldr	r2, [pc, #508]	@ (800319c <HAL_DMA_IRQHandler+0x6a0>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d036      	beq.n	8003012 <HAL_DMA_IRQHandler+0x516>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a7d      	ldr	r2, [pc, #500]	@ (80031a0 <HAL_DMA_IRQHandler+0x6a4>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d031      	beq.n	8003012 <HAL_DMA_IRQHandler+0x516>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a7c      	ldr	r2, [pc, #496]	@ (80031a4 <HAL_DMA_IRQHandler+0x6a8>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d02c      	beq.n	8003012 <HAL_DMA_IRQHandler+0x516>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a7a      	ldr	r2, [pc, #488]	@ (80031a8 <HAL_DMA_IRQHandler+0x6ac>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d027      	beq.n	8003012 <HAL_DMA_IRQHandler+0x516>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a79      	ldr	r2, [pc, #484]	@ (80031ac <HAL_DMA_IRQHandler+0x6b0>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d022      	beq.n	8003012 <HAL_DMA_IRQHandler+0x516>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a77      	ldr	r2, [pc, #476]	@ (80031b0 <HAL_DMA_IRQHandler+0x6b4>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d01d      	beq.n	8003012 <HAL_DMA_IRQHandler+0x516>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a76      	ldr	r2, [pc, #472]	@ (80031b4 <HAL_DMA_IRQHandler+0x6b8>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d018      	beq.n	8003012 <HAL_DMA_IRQHandler+0x516>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a74      	ldr	r2, [pc, #464]	@ (80031b8 <HAL_DMA_IRQHandler+0x6bc>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d013      	beq.n	8003012 <HAL_DMA_IRQHandler+0x516>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a73      	ldr	r2, [pc, #460]	@ (80031bc <HAL_DMA_IRQHandler+0x6c0>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d00e      	beq.n	8003012 <HAL_DMA_IRQHandler+0x516>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a71      	ldr	r2, [pc, #452]	@ (80031c0 <HAL_DMA_IRQHandler+0x6c4>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d009      	beq.n	8003012 <HAL_DMA_IRQHandler+0x516>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a70      	ldr	r2, [pc, #448]	@ (80031c4 <HAL_DMA_IRQHandler+0x6c8>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d004      	beq.n	8003012 <HAL_DMA_IRQHandler+0x516>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a6e      	ldr	r2, [pc, #440]	@ (80031c8 <HAL_DMA_IRQHandler+0x6cc>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d10a      	bne.n	8003028 <HAL_DMA_IRQHandler+0x52c>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0308 	and.w	r3, r3, #8
 800301c:	2b00      	cmp	r3, #0
 800301e:	bf14      	ite	ne
 8003020:	2301      	movne	r3, #1
 8003022:	2300      	moveq	r3, #0
 8003024:	b2db      	uxtb	r3, r3
 8003026:	e009      	b.n	800303c <HAL_DMA_IRQHandler+0x540>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0304 	and.w	r3, r3, #4
 8003032:	2b00      	cmp	r3, #0
 8003034:	bf14      	ite	ne
 8003036:	2301      	movne	r3, #1
 8003038:	2300      	moveq	r3, #0
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	d03e      	beq.n	80030be <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003044:	f003 031f 	and.w	r3, r3, #31
 8003048:	2210      	movs	r2, #16
 800304a:	409a      	lsls	r2, r3
 800304c:	6a3b      	ldr	r3, [r7, #32]
 800304e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d018      	beq.n	8003090 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d108      	bne.n	800307e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003070:	2b00      	cmp	r3, #0
 8003072:	d024      	beq.n	80030be <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	4798      	blx	r3
 800307c:	e01f      	b.n	80030be <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003082:	2b00      	cmp	r3, #0
 8003084:	d01b      	beq.n	80030be <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	4798      	blx	r3
 800308e:	e016      	b.n	80030be <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800309a:	2b00      	cmp	r3, #0
 800309c:	d107      	bne.n	80030ae <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0208 	bic.w	r2, r2, #8
 80030ac:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c2:	f003 031f 	and.w	r3, r3, #31
 80030c6:	2220      	movs	r2, #32
 80030c8:	409a      	lsls	r2, r3
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	4013      	ands	r3, r2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 8110 	beq.w	80032f4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a2c      	ldr	r2, [pc, #176]	@ (800318c <HAL_DMA_IRQHandler+0x690>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d04a      	beq.n	8003174 <HAL_DMA_IRQHandler+0x678>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a2b      	ldr	r2, [pc, #172]	@ (8003190 <HAL_DMA_IRQHandler+0x694>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d045      	beq.n	8003174 <HAL_DMA_IRQHandler+0x678>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a29      	ldr	r2, [pc, #164]	@ (8003194 <HAL_DMA_IRQHandler+0x698>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d040      	beq.n	8003174 <HAL_DMA_IRQHandler+0x678>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a28      	ldr	r2, [pc, #160]	@ (8003198 <HAL_DMA_IRQHandler+0x69c>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d03b      	beq.n	8003174 <HAL_DMA_IRQHandler+0x678>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a26      	ldr	r2, [pc, #152]	@ (800319c <HAL_DMA_IRQHandler+0x6a0>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d036      	beq.n	8003174 <HAL_DMA_IRQHandler+0x678>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a25      	ldr	r2, [pc, #148]	@ (80031a0 <HAL_DMA_IRQHandler+0x6a4>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d031      	beq.n	8003174 <HAL_DMA_IRQHandler+0x678>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a23      	ldr	r2, [pc, #140]	@ (80031a4 <HAL_DMA_IRQHandler+0x6a8>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d02c      	beq.n	8003174 <HAL_DMA_IRQHandler+0x678>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a22      	ldr	r2, [pc, #136]	@ (80031a8 <HAL_DMA_IRQHandler+0x6ac>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d027      	beq.n	8003174 <HAL_DMA_IRQHandler+0x678>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a20      	ldr	r2, [pc, #128]	@ (80031ac <HAL_DMA_IRQHandler+0x6b0>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d022      	beq.n	8003174 <HAL_DMA_IRQHandler+0x678>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a1f      	ldr	r2, [pc, #124]	@ (80031b0 <HAL_DMA_IRQHandler+0x6b4>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d01d      	beq.n	8003174 <HAL_DMA_IRQHandler+0x678>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a1d      	ldr	r2, [pc, #116]	@ (80031b4 <HAL_DMA_IRQHandler+0x6b8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d018      	beq.n	8003174 <HAL_DMA_IRQHandler+0x678>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a1c      	ldr	r2, [pc, #112]	@ (80031b8 <HAL_DMA_IRQHandler+0x6bc>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d013      	beq.n	8003174 <HAL_DMA_IRQHandler+0x678>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a1a      	ldr	r2, [pc, #104]	@ (80031bc <HAL_DMA_IRQHandler+0x6c0>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d00e      	beq.n	8003174 <HAL_DMA_IRQHandler+0x678>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a19      	ldr	r2, [pc, #100]	@ (80031c0 <HAL_DMA_IRQHandler+0x6c4>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d009      	beq.n	8003174 <HAL_DMA_IRQHandler+0x678>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a17      	ldr	r2, [pc, #92]	@ (80031c4 <HAL_DMA_IRQHandler+0x6c8>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d004      	beq.n	8003174 <HAL_DMA_IRQHandler+0x678>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a16      	ldr	r2, [pc, #88]	@ (80031c8 <HAL_DMA_IRQHandler+0x6cc>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d12b      	bne.n	80031cc <HAL_DMA_IRQHandler+0x6d0>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0310 	and.w	r3, r3, #16
 800317e:	2b00      	cmp	r3, #0
 8003180:	bf14      	ite	ne
 8003182:	2301      	movne	r3, #1
 8003184:	2300      	moveq	r3, #0
 8003186:	b2db      	uxtb	r3, r3
 8003188:	e02a      	b.n	80031e0 <HAL_DMA_IRQHandler+0x6e4>
 800318a:	bf00      	nop
 800318c:	40020010 	.word	0x40020010
 8003190:	40020028 	.word	0x40020028
 8003194:	40020040 	.word	0x40020040
 8003198:	40020058 	.word	0x40020058
 800319c:	40020070 	.word	0x40020070
 80031a0:	40020088 	.word	0x40020088
 80031a4:	400200a0 	.word	0x400200a0
 80031a8:	400200b8 	.word	0x400200b8
 80031ac:	40020410 	.word	0x40020410
 80031b0:	40020428 	.word	0x40020428
 80031b4:	40020440 	.word	0x40020440
 80031b8:	40020458 	.word	0x40020458
 80031bc:	40020470 	.word	0x40020470
 80031c0:	40020488 	.word	0x40020488
 80031c4:	400204a0 	.word	0x400204a0
 80031c8:	400204b8 	.word	0x400204b8
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	bf14      	ite	ne
 80031da:	2301      	movne	r3, #1
 80031dc:	2300      	moveq	r3, #0
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 8087 	beq.w	80032f4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ea:	f003 031f 	and.w	r3, r3, #31
 80031ee:	2220      	movs	r2, #32
 80031f0:	409a      	lsls	r2, r3
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d139      	bne.n	8003276 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0216 	bic.w	r2, r2, #22
 8003210:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695a      	ldr	r2, [r3, #20]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003220:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003226:	2b00      	cmp	r3, #0
 8003228:	d103      	bne.n	8003232 <HAL_DMA_IRQHandler+0x736>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800322e:	2b00      	cmp	r3, #0
 8003230:	d007      	beq.n	8003242 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 0208 	bic.w	r2, r2, #8
 8003240:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003246:	f003 031f 	and.w	r3, r3, #31
 800324a:	223f      	movs	r2, #63	@ 0x3f
 800324c:	409a      	lsls	r2, r3
 800324e:	6a3b      	ldr	r3, [r7, #32]
 8003250:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 834a 	beq.w	8003900 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	4798      	blx	r3
          }
          return;
 8003274:	e344      	b.n	8003900 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d018      	beq.n	80032b6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d108      	bne.n	80032a4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003296:	2b00      	cmp	r3, #0
 8003298:	d02c      	beq.n	80032f4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	4798      	blx	r3
 80032a2:	e027      	b.n	80032f4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d023      	beq.n	80032f4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	4798      	blx	r3
 80032b4:	e01e      	b.n	80032f4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10f      	bne.n	80032e4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0210 	bic.w	r2, r2, #16
 80032d2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d003      	beq.n	80032f4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 8306 	beq.w	800390a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 8088 	beq.w	800341c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2204      	movs	r2, #4
 8003310:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a7a      	ldr	r2, [pc, #488]	@ (8003504 <HAL_DMA_IRQHandler+0xa08>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d04a      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x8b8>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a79      	ldr	r2, [pc, #484]	@ (8003508 <HAL_DMA_IRQHandler+0xa0c>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d045      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x8b8>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a77      	ldr	r2, [pc, #476]	@ (800350c <HAL_DMA_IRQHandler+0xa10>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d040      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x8b8>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a76      	ldr	r2, [pc, #472]	@ (8003510 <HAL_DMA_IRQHandler+0xa14>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d03b      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x8b8>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a74      	ldr	r2, [pc, #464]	@ (8003514 <HAL_DMA_IRQHandler+0xa18>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d036      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x8b8>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a73      	ldr	r2, [pc, #460]	@ (8003518 <HAL_DMA_IRQHandler+0xa1c>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d031      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x8b8>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a71      	ldr	r2, [pc, #452]	@ (800351c <HAL_DMA_IRQHandler+0xa20>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d02c      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x8b8>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a70      	ldr	r2, [pc, #448]	@ (8003520 <HAL_DMA_IRQHandler+0xa24>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d027      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x8b8>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a6e      	ldr	r2, [pc, #440]	@ (8003524 <HAL_DMA_IRQHandler+0xa28>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d022      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x8b8>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a6d      	ldr	r2, [pc, #436]	@ (8003528 <HAL_DMA_IRQHandler+0xa2c>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d01d      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x8b8>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a6b      	ldr	r2, [pc, #428]	@ (800352c <HAL_DMA_IRQHandler+0xa30>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d018      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x8b8>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a6a      	ldr	r2, [pc, #424]	@ (8003530 <HAL_DMA_IRQHandler+0xa34>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d013      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x8b8>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a68      	ldr	r2, [pc, #416]	@ (8003534 <HAL_DMA_IRQHandler+0xa38>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d00e      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x8b8>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a67      	ldr	r2, [pc, #412]	@ (8003538 <HAL_DMA_IRQHandler+0xa3c>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d009      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x8b8>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a65      	ldr	r2, [pc, #404]	@ (800353c <HAL_DMA_IRQHandler+0xa40>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d004      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x8b8>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a64      	ldr	r2, [pc, #400]	@ (8003540 <HAL_DMA_IRQHandler+0xa44>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d108      	bne.n	80033c6 <HAL_DMA_IRQHandler+0x8ca>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 0201 	bic.w	r2, r2, #1
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	e007      	b.n	80033d6 <HAL_DMA_IRQHandler+0x8da>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0201 	bic.w	r2, r2, #1
 80033d4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	3301      	adds	r3, #1
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033de:	429a      	cmp	r2, r3
 80033e0:	d307      	bcc.n	80033f2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1f2      	bne.n	80033d6 <HAL_DMA_IRQHandler+0x8da>
 80033f0:	e000      	b.n	80033f4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80033f2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d004      	beq.n	800340c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2203      	movs	r2, #3
 8003406:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800340a:	e003      	b.n	8003414 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 8272 	beq.w	800390a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	4798      	blx	r3
 800342e:	e26c      	b.n	800390a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a43      	ldr	r2, [pc, #268]	@ (8003544 <HAL_DMA_IRQHandler+0xa48>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d022      	beq.n	8003480 <HAL_DMA_IRQHandler+0x984>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a42      	ldr	r2, [pc, #264]	@ (8003548 <HAL_DMA_IRQHandler+0xa4c>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d01d      	beq.n	8003480 <HAL_DMA_IRQHandler+0x984>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a40      	ldr	r2, [pc, #256]	@ (800354c <HAL_DMA_IRQHandler+0xa50>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d018      	beq.n	8003480 <HAL_DMA_IRQHandler+0x984>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a3f      	ldr	r2, [pc, #252]	@ (8003550 <HAL_DMA_IRQHandler+0xa54>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d013      	beq.n	8003480 <HAL_DMA_IRQHandler+0x984>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a3d      	ldr	r2, [pc, #244]	@ (8003554 <HAL_DMA_IRQHandler+0xa58>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d00e      	beq.n	8003480 <HAL_DMA_IRQHandler+0x984>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a3c      	ldr	r2, [pc, #240]	@ (8003558 <HAL_DMA_IRQHandler+0xa5c>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d009      	beq.n	8003480 <HAL_DMA_IRQHandler+0x984>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a3a      	ldr	r2, [pc, #232]	@ (800355c <HAL_DMA_IRQHandler+0xa60>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d004      	beq.n	8003480 <HAL_DMA_IRQHandler+0x984>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a39      	ldr	r2, [pc, #228]	@ (8003560 <HAL_DMA_IRQHandler+0xa64>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d101      	bne.n	8003484 <HAL_DMA_IRQHandler+0x988>
 8003480:	2301      	movs	r3, #1
 8003482:	e000      	b.n	8003486 <HAL_DMA_IRQHandler+0x98a>
 8003484:	2300      	movs	r3, #0
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 823f 	beq.w	800390a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003498:	f003 031f 	and.w	r3, r3, #31
 800349c:	2204      	movs	r2, #4
 800349e:	409a      	lsls	r2, r3
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	4013      	ands	r3, r2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 80cd 	beq.w	8003644 <HAL_DMA_IRQHandler+0xb48>
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 80c7 	beq.w	8003644 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ba:	f003 031f 	and.w	r3, r3, #31
 80034be:	2204      	movs	r2, #4
 80034c0:	409a      	lsls	r2, r3
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d049      	beq.n	8003564 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d109      	bne.n	80034ee <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 8210 	beq.w	8003904 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034ec:	e20a      	b.n	8003904 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 8206 	beq.w	8003904 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003500:	e200      	b.n	8003904 <HAL_DMA_IRQHandler+0xe08>
 8003502:	bf00      	nop
 8003504:	40020010 	.word	0x40020010
 8003508:	40020028 	.word	0x40020028
 800350c:	40020040 	.word	0x40020040
 8003510:	40020058 	.word	0x40020058
 8003514:	40020070 	.word	0x40020070
 8003518:	40020088 	.word	0x40020088
 800351c:	400200a0 	.word	0x400200a0
 8003520:	400200b8 	.word	0x400200b8
 8003524:	40020410 	.word	0x40020410
 8003528:	40020428 	.word	0x40020428
 800352c:	40020440 	.word	0x40020440
 8003530:	40020458 	.word	0x40020458
 8003534:	40020470 	.word	0x40020470
 8003538:	40020488 	.word	0x40020488
 800353c:	400204a0 	.word	0x400204a0
 8003540:	400204b8 	.word	0x400204b8
 8003544:	58025408 	.word	0x58025408
 8003548:	5802541c 	.word	0x5802541c
 800354c:	58025430 	.word	0x58025430
 8003550:	58025444 	.word	0x58025444
 8003554:	58025458 	.word	0x58025458
 8003558:	5802546c 	.word	0x5802546c
 800355c:	58025480 	.word	0x58025480
 8003560:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	f003 0320 	and.w	r3, r3, #32
 800356a:	2b00      	cmp	r3, #0
 800356c:	d160      	bne.n	8003630 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a7f      	ldr	r2, [pc, #508]	@ (8003770 <HAL_DMA_IRQHandler+0xc74>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d04a      	beq.n	800360e <HAL_DMA_IRQHandler+0xb12>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a7d      	ldr	r2, [pc, #500]	@ (8003774 <HAL_DMA_IRQHandler+0xc78>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d045      	beq.n	800360e <HAL_DMA_IRQHandler+0xb12>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a7c      	ldr	r2, [pc, #496]	@ (8003778 <HAL_DMA_IRQHandler+0xc7c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d040      	beq.n	800360e <HAL_DMA_IRQHandler+0xb12>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a7a      	ldr	r2, [pc, #488]	@ (800377c <HAL_DMA_IRQHandler+0xc80>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d03b      	beq.n	800360e <HAL_DMA_IRQHandler+0xb12>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a79      	ldr	r2, [pc, #484]	@ (8003780 <HAL_DMA_IRQHandler+0xc84>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d036      	beq.n	800360e <HAL_DMA_IRQHandler+0xb12>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a77      	ldr	r2, [pc, #476]	@ (8003784 <HAL_DMA_IRQHandler+0xc88>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d031      	beq.n	800360e <HAL_DMA_IRQHandler+0xb12>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a76      	ldr	r2, [pc, #472]	@ (8003788 <HAL_DMA_IRQHandler+0xc8c>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d02c      	beq.n	800360e <HAL_DMA_IRQHandler+0xb12>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a74      	ldr	r2, [pc, #464]	@ (800378c <HAL_DMA_IRQHandler+0xc90>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d027      	beq.n	800360e <HAL_DMA_IRQHandler+0xb12>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a73      	ldr	r2, [pc, #460]	@ (8003790 <HAL_DMA_IRQHandler+0xc94>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d022      	beq.n	800360e <HAL_DMA_IRQHandler+0xb12>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a71      	ldr	r2, [pc, #452]	@ (8003794 <HAL_DMA_IRQHandler+0xc98>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d01d      	beq.n	800360e <HAL_DMA_IRQHandler+0xb12>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a70      	ldr	r2, [pc, #448]	@ (8003798 <HAL_DMA_IRQHandler+0xc9c>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d018      	beq.n	800360e <HAL_DMA_IRQHandler+0xb12>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a6e      	ldr	r2, [pc, #440]	@ (800379c <HAL_DMA_IRQHandler+0xca0>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d013      	beq.n	800360e <HAL_DMA_IRQHandler+0xb12>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a6d      	ldr	r2, [pc, #436]	@ (80037a0 <HAL_DMA_IRQHandler+0xca4>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d00e      	beq.n	800360e <HAL_DMA_IRQHandler+0xb12>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a6b      	ldr	r2, [pc, #428]	@ (80037a4 <HAL_DMA_IRQHandler+0xca8>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d009      	beq.n	800360e <HAL_DMA_IRQHandler+0xb12>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a6a      	ldr	r2, [pc, #424]	@ (80037a8 <HAL_DMA_IRQHandler+0xcac>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d004      	beq.n	800360e <HAL_DMA_IRQHandler+0xb12>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a68      	ldr	r2, [pc, #416]	@ (80037ac <HAL_DMA_IRQHandler+0xcb0>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d108      	bne.n	8003620 <HAL_DMA_IRQHandler+0xb24>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0208 	bic.w	r2, r2, #8
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	e007      	b.n	8003630 <HAL_DMA_IRQHandler+0xb34>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0204 	bic.w	r2, r2, #4
 800362e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 8165 	beq.w	8003904 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003642:	e15f      	b.n	8003904 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003648:	f003 031f 	and.w	r3, r3, #31
 800364c:	2202      	movs	r2, #2
 800364e:	409a      	lsls	r2, r3
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	4013      	ands	r3, r2
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 80c5 	beq.w	80037e4 <HAL_DMA_IRQHandler+0xce8>
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 80bf 	beq.w	80037e4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800366a:	f003 031f 	and.w	r3, r3, #31
 800366e:	2202      	movs	r2, #2
 8003670:	409a      	lsls	r2, r3
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d018      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d109      	bne.n	800369e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 813a 	beq.w	8003908 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800369c:	e134      	b.n	8003908 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f000 8130 	beq.w	8003908 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036b0:	e12a      	b.n	8003908 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	f003 0320 	and.w	r3, r3, #32
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f040 8089 	bne.w	80037d0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a2b      	ldr	r2, [pc, #172]	@ (8003770 <HAL_DMA_IRQHandler+0xc74>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d04a      	beq.n	800375e <HAL_DMA_IRQHandler+0xc62>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a29      	ldr	r2, [pc, #164]	@ (8003774 <HAL_DMA_IRQHandler+0xc78>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d045      	beq.n	800375e <HAL_DMA_IRQHandler+0xc62>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a28      	ldr	r2, [pc, #160]	@ (8003778 <HAL_DMA_IRQHandler+0xc7c>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d040      	beq.n	800375e <HAL_DMA_IRQHandler+0xc62>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a26      	ldr	r2, [pc, #152]	@ (800377c <HAL_DMA_IRQHandler+0xc80>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d03b      	beq.n	800375e <HAL_DMA_IRQHandler+0xc62>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a25      	ldr	r2, [pc, #148]	@ (8003780 <HAL_DMA_IRQHandler+0xc84>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d036      	beq.n	800375e <HAL_DMA_IRQHandler+0xc62>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a23      	ldr	r2, [pc, #140]	@ (8003784 <HAL_DMA_IRQHandler+0xc88>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d031      	beq.n	800375e <HAL_DMA_IRQHandler+0xc62>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a22      	ldr	r2, [pc, #136]	@ (8003788 <HAL_DMA_IRQHandler+0xc8c>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d02c      	beq.n	800375e <HAL_DMA_IRQHandler+0xc62>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a20      	ldr	r2, [pc, #128]	@ (800378c <HAL_DMA_IRQHandler+0xc90>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d027      	beq.n	800375e <HAL_DMA_IRQHandler+0xc62>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a1f      	ldr	r2, [pc, #124]	@ (8003790 <HAL_DMA_IRQHandler+0xc94>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d022      	beq.n	800375e <HAL_DMA_IRQHandler+0xc62>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a1d      	ldr	r2, [pc, #116]	@ (8003794 <HAL_DMA_IRQHandler+0xc98>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d01d      	beq.n	800375e <HAL_DMA_IRQHandler+0xc62>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a1c      	ldr	r2, [pc, #112]	@ (8003798 <HAL_DMA_IRQHandler+0xc9c>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d018      	beq.n	800375e <HAL_DMA_IRQHandler+0xc62>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a1a      	ldr	r2, [pc, #104]	@ (800379c <HAL_DMA_IRQHandler+0xca0>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d013      	beq.n	800375e <HAL_DMA_IRQHandler+0xc62>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a19      	ldr	r2, [pc, #100]	@ (80037a0 <HAL_DMA_IRQHandler+0xca4>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d00e      	beq.n	800375e <HAL_DMA_IRQHandler+0xc62>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a17      	ldr	r2, [pc, #92]	@ (80037a4 <HAL_DMA_IRQHandler+0xca8>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d009      	beq.n	800375e <HAL_DMA_IRQHandler+0xc62>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a16      	ldr	r2, [pc, #88]	@ (80037a8 <HAL_DMA_IRQHandler+0xcac>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d004      	beq.n	800375e <HAL_DMA_IRQHandler+0xc62>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a14      	ldr	r2, [pc, #80]	@ (80037ac <HAL_DMA_IRQHandler+0xcb0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d128      	bne.n	80037b0 <HAL_DMA_IRQHandler+0xcb4>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0214 	bic.w	r2, r2, #20
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	e027      	b.n	80037c0 <HAL_DMA_IRQHandler+0xcc4>
 8003770:	40020010 	.word	0x40020010
 8003774:	40020028 	.word	0x40020028
 8003778:	40020040 	.word	0x40020040
 800377c:	40020058 	.word	0x40020058
 8003780:	40020070 	.word	0x40020070
 8003784:	40020088 	.word	0x40020088
 8003788:	400200a0 	.word	0x400200a0
 800378c:	400200b8 	.word	0x400200b8
 8003790:	40020410 	.word	0x40020410
 8003794:	40020428 	.word	0x40020428
 8003798:	40020440 	.word	0x40020440
 800379c:	40020458 	.word	0x40020458
 80037a0:	40020470 	.word	0x40020470
 80037a4:	40020488 	.word	0x40020488
 80037a8:	400204a0 	.word	0x400204a0
 80037ac:	400204b8 	.word	0x400204b8
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 020a 	bic.w	r2, r2, #10
 80037be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 8097 	beq.w	8003908 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037e2:	e091      	b.n	8003908 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037e8:	f003 031f 	and.w	r3, r3, #31
 80037ec:	2208      	movs	r2, #8
 80037ee:	409a      	lsls	r2, r3
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	4013      	ands	r3, r2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 8088 	beq.w	800390a <HAL_DMA_IRQHandler+0xe0e>
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	f003 0308 	and.w	r3, r3, #8
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 8082 	beq.w	800390a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a41      	ldr	r2, [pc, #260]	@ (8003910 <HAL_DMA_IRQHandler+0xe14>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d04a      	beq.n	80038a6 <HAL_DMA_IRQHandler+0xdaa>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a3f      	ldr	r2, [pc, #252]	@ (8003914 <HAL_DMA_IRQHandler+0xe18>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d045      	beq.n	80038a6 <HAL_DMA_IRQHandler+0xdaa>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a3e      	ldr	r2, [pc, #248]	@ (8003918 <HAL_DMA_IRQHandler+0xe1c>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d040      	beq.n	80038a6 <HAL_DMA_IRQHandler+0xdaa>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a3c      	ldr	r2, [pc, #240]	@ (800391c <HAL_DMA_IRQHandler+0xe20>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d03b      	beq.n	80038a6 <HAL_DMA_IRQHandler+0xdaa>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a3b      	ldr	r2, [pc, #236]	@ (8003920 <HAL_DMA_IRQHandler+0xe24>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d036      	beq.n	80038a6 <HAL_DMA_IRQHandler+0xdaa>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a39      	ldr	r2, [pc, #228]	@ (8003924 <HAL_DMA_IRQHandler+0xe28>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d031      	beq.n	80038a6 <HAL_DMA_IRQHandler+0xdaa>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a38      	ldr	r2, [pc, #224]	@ (8003928 <HAL_DMA_IRQHandler+0xe2c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d02c      	beq.n	80038a6 <HAL_DMA_IRQHandler+0xdaa>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a36      	ldr	r2, [pc, #216]	@ (800392c <HAL_DMA_IRQHandler+0xe30>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d027      	beq.n	80038a6 <HAL_DMA_IRQHandler+0xdaa>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a35      	ldr	r2, [pc, #212]	@ (8003930 <HAL_DMA_IRQHandler+0xe34>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d022      	beq.n	80038a6 <HAL_DMA_IRQHandler+0xdaa>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a33      	ldr	r2, [pc, #204]	@ (8003934 <HAL_DMA_IRQHandler+0xe38>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d01d      	beq.n	80038a6 <HAL_DMA_IRQHandler+0xdaa>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a32      	ldr	r2, [pc, #200]	@ (8003938 <HAL_DMA_IRQHandler+0xe3c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d018      	beq.n	80038a6 <HAL_DMA_IRQHandler+0xdaa>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a30      	ldr	r2, [pc, #192]	@ (800393c <HAL_DMA_IRQHandler+0xe40>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d013      	beq.n	80038a6 <HAL_DMA_IRQHandler+0xdaa>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a2f      	ldr	r2, [pc, #188]	@ (8003940 <HAL_DMA_IRQHandler+0xe44>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d00e      	beq.n	80038a6 <HAL_DMA_IRQHandler+0xdaa>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a2d      	ldr	r2, [pc, #180]	@ (8003944 <HAL_DMA_IRQHandler+0xe48>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d009      	beq.n	80038a6 <HAL_DMA_IRQHandler+0xdaa>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a2c      	ldr	r2, [pc, #176]	@ (8003948 <HAL_DMA_IRQHandler+0xe4c>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d004      	beq.n	80038a6 <HAL_DMA_IRQHandler+0xdaa>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a2a      	ldr	r2, [pc, #168]	@ (800394c <HAL_DMA_IRQHandler+0xe50>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d108      	bne.n	80038b8 <HAL_DMA_IRQHandler+0xdbc>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 021c 	bic.w	r2, r2, #28
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	e007      	b.n	80038c8 <HAL_DMA_IRQHandler+0xdcc>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 020e 	bic.w	r2, r2, #14
 80038c6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038cc:	f003 031f 	and.w	r3, r3, #31
 80038d0:	2201      	movs	r2, #1
 80038d2:	409a      	lsls	r2, r3
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d009      	beq.n	800390a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	4798      	blx	r3
 80038fe:	e004      	b.n	800390a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003900:	bf00      	nop
 8003902:	e002      	b.n	800390a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003904:	bf00      	nop
 8003906:	e000      	b.n	800390a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003908:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800390a:	3728      	adds	r7, #40	@ 0x28
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40020010 	.word	0x40020010
 8003914:	40020028 	.word	0x40020028
 8003918:	40020040 	.word	0x40020040
 800391c:	40020058 	.word	0x40020058
 8003920:	40020070 	.word	0x40020070
 8003924:	40020088 	.word	0x40020088
 8003928:	400200a0 	.word	0x400200a0
 800392c:	400200b8 	.word	0x400200b8
 8003930:	40020410 	.word	0x40020410
 8003934:	40020428 	.word	0x40020428
 8003938:	40020440 	.word	0x40020440
 800393c:	40020458 	.word	0x40020458
 8003940:	40020470 	.word	0x40020470
 8003944:	40020488 	.word	0x40020488
 8003948:	400204a0 	.word	0x400204a0
 800394c:	400204b8 	.word	0x400204b8

08003950 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003950:	b480      	push	{r7}
 8003952:	b087      	sub	sp, #28
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
 800395c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003962:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003968:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a7f      	ldr	r2, [pc, #508]	@ (8003b6c <DMA_SetConfig+0x21c>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d072      	beq.n	8003a5a <DMA_SetConfig+0x10a>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a7d      	ldr	r2, [pc, #500]	@ (8003b70 <DMA_SetConfig+0x220>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d06d      	beq.n	8003a5a <DMA_SetConfig+0x10a>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a7c      	ldr	r2, [pc, #496]	@ (8003b74 <DMA_SetConfig+0x224>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d068      	beq.n	8003a5a <DMA_SetConfig+0x10a>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a7a      	ldr	r2, [pc, #488]	@ (8003b78 <DMA_SetConfig+0x228>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d063      	beq.n	8003a5a <DMA_SetConfig+0x10a>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a79      	ldr	r2, [pc, #484]	@ (8003b7c <DMA_SetConfig+0x22c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d05e      	beq.n	8003a5a <DMA_SetConfig+0x10a>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a77      	ldr	r2, [pc, #476]	@ (8003b80 <DMA_SetConfig+0x230>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d059      	beq.n	8003a5a <DMA_SetConfig+0x10a>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a76      	ldr	r2, [pc, #472]	@ (8003b84 <DMA_SetConfig+0x234>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d054      	beq.n	8003a5a <DMA_SetConfig+0x10a>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a74      	ldr	r2, [pc, #464]	@ (8003b88 <DMA_SetConfig+0x238>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d04f      	beq.n	8003a5a <DMA_SetConfig+0x10a>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a73      	ldr	r2, [pc, #460]	@ (8003b8c <DMA_SetConfig+0x23c>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d04a      	beq.n	8003a5a <DMA_SetConfig+0x10a>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a71      	ldr	r2, [pc, #452]	@ (8003b90 <DMA_SetConfig+0x240>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d045      	beq.n	8003a5a <DMA_SetConfig+0x10a>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a70      	ldr	r2, [pc, #448]	@ (8003b94 <DMA_SetConfig+0x244>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d040      	beq.n	8003a5a <DMA_SetConfig+0x10a>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a6e      	ldr	r2, [pc, #440]	@ (8003b98 <DMA_SetConfig+0x248>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d03b      	beq.n	8003a5a <DMA_SetConfig+0x10a>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a6d      	ldr	r2, [pc, #436]	@ (8003b9c <DMA_SetConfig+0x24c>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d036      	beq.n	8003a5a <DMA_SetConfig+0x10a>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a6b      	ldr	r2, [pc, #428]	@ (8003ba0 <DMA_SetConfig+0x250>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d031      	beq.n	8003a5a <DMA_SetConfig+0x10a>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a6a      	ldr	r2, [pc, #424]	@ (8003ba4 <DMA_SetConfig+0x254>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d02c      	beq.n	8003a5a <DMA_SetConfig+0x10a>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a68      	ldr	r2, [pc, #416]	@ (8003ba8 <DMA_SetConfig+0x258>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d027      	beq.n	8003a5a <DMA_SetConfig+0x10a>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a67      	ldr	r2, [pc, #412]	@ (8003bac <DMA_SetConfig+0x25c>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d022      	beq.n	8003a5a <DMA_SetConfig+0x10a>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a65      	ldr	r2, [pc, #404]	@ (8003bb0 <DMA_SetConfig+0x260>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d01d      	beq.n	8003a5a <DMA_SetConfig+0x10a>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a64      	ldr	r2, [pc, #400]	@ (8003bb4 <DMA_SetConfig+0x264>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d018      	beq.n	8003a5a <DMA_SetConfig+0x10a>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a62      	ldr	r2, [pc, #392]	@ (8003bb8 <DMA_SetConfig+0x268>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d013      	beq.n	8003a5a <DMA_SetConfig+0x10a>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a61      	ldr	r2, [pc, #388]	@ (8003bbc <DMA_SetConfig+0x26c>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d00e      	beq.n	8003a5a <DMA_SetConfig+0x10a>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a5f      	ldr	r2, [pc, #380]	@ (8003bc0 <DMA_SetConfig+0x270>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d009      	beq.n	8003a5a <DMA_SetConfig+0x10a>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a5e      	ldr	r2, [pc, #376]	@ (8003bc4 <DMA_SetConfig+0x274>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d004      	beq.n	8003a5a <DMA_SetConfig+0x10a>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a5c      	ldr	r2, [pc, #368]	@ (8003bc8 <DMA_SetConfig+0x278>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d101      	bne.n	8003a5e <DMA_SetConfig+0x10e>
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e000      	b.n	8003a60 <DMA_SetConfig+0x110>
 8003a5e:	2300      	movs	r3, #0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00d      	beq.n	8003a80 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003a6c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d004      	beq.n	8003a80 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003a7e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a39      	ldr	r2, [pc, #228]	@ (8003b6c <DMA_SetConfig+0x21c>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d04a      	beq.n	8003b20 <DMA_SetConfig+0x1d0>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a38      	ldr	r2, [pc, #224]	@ (8003b70 <DMA_SetConfig+0x220>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d045      	beq.n	8003b20 <DMA_SetConfig+0x1d0>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a36      	ldr	r2, [pc, #216]	@ (8003b74 <DMA_SetConfig+0x224>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d040      	beq.n	8003b20 <DMA_SetConfig+0x1d0>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a35      	ldr	r2, [pc, #212]	@ (8003b78 <DMA_SetConfig+0x228>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d03b      	beq.n	8003b20 <DMA_SetConfig+0x1d0>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a33      	ldr	r2, [pc, #204]	@ (8003b7c <DMA_SetConfig+0x22c>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d036      	beq.n	8003b20 <DMA_SetConfig+0x1d0>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a32      	ldr	r2, [pc, #200]	@ (8003b80 <DMA_SetConfig+0x230>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d031      	beq.n	8003b20 <DMA_SetConfig+0x1d0>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a30      	ldr	r2, [pc, #192]	@ (8003b84 <DMA_SetConfig+0x234>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d02c      	beq.n	8003b20 <DMA_SetConfig+0x1d0>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a2f      	ldr	r2, [pc, #188]	@ (8003b88 <DMA_SetConfig+0x238>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d027      	beq.n	8003b20 <DMA_SetConfig+0x1d0>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a2d      	ldr	r2, [pc, #180]	@ (8003b8c <DMA_SetConfig+0x23c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d022      	beq.n	8003b20 <DMA_SetConfig+0x1d0>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a2c      	ldr	r2, [pc, #176]	@ (8003b90 <DMA_SetConfig+0x240>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d01d      	beq.n	8003b20 <DMA_SetConfig+0x1d0>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a2a      	ldr	r2, [pc, #168]	@ (8003b94 <DMA_SetConfig+0x244>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d018      	beq.n	8003b20 <DMA_SetConfig+0x1d0>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a29      	ldr	r2, [pc, #164]	@ (8003b98 <DMA_SetConfig+0x248>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d013      	beq.n	8003b20 <DMA_SetConfig+0x1d0>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a27      	ldr	r2, [pc, #156]	@ (8003b9c <DMA_SetConfig+0x24c>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d00e      	beq.n	8003b20 <DMA_SetConfig+0x1d0>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a26      	ldr	r2, [pc, #152]	@ (8003ba0 <DMA_SetConfig+0x250>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d009      	beq.n	8003b20 <DMA_SetConfig+0x1d0>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a24      	ldr	r2, [pc, #144]	@ (8003ba4 <DMA_SetConfig+0x254>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d004      	beq.n	8003b20 <DMA_SetConfig+0x1d0>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a23      	ldr	r2, [pc, #140]	@ (8003ba8 <DMA_SetConfig+0x258>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d101      	bne.n	8003b24 <DMA_SetConfig+0x1d4>
 8003b20:	2301      	movs	r3, #1
 8003b22:	e000      	b.n	8003b26 <DMA_SetConfig+0x1d6>
 8003b24:	2300      	movs	r3, #0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d059      	beq.n	8003bde <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b2e:	f003 031f 	and.w	r3, r3, #31
 8003b32:	223f      	movs	r2, #63	@ 0x3f
 8003b34:	409a      	lsls	r2, r3
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003b48:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	2b40      	cmp	r3, #64	@ 0x40
 8003b58:	d138      	bne.n	8003bcc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003b6a:	e086      	b.n	8003c7a <DMA_SetConfig+0x32a>
 8003b6c:	40020010 	.word	0x40020010
 8003b70:	40020028 	.word	0x40020028
 8003b74:	40020040 	.word	0x40020040
 8003b78:	40020058 	.word	0x40020058
 8003b7c:	40020070 	.word	0x40020070
 8003b80:	40020088 	.word	0x40020088
 8003b84:	400200a0 	.word	0x400200a0
 8003b88:	400200b8 	.word	0x400200b8
 8003b8c:	40020410 	.word	0x40020410
 8003b90:	40020428 	.word	0x40020428
 8003b94:	40020440 	.word	0x40020440
 8003b98:	40020458 	.word	0x40020458
 8003b9c:	40020470 	.word	0x40020470
 8003ba0:	40020488 	.word	0x40020488
 8003ba4:	400204a0 	.word	0x400204a0
 8003ba8:	400204b8 	.word	0x400204b8
 8003bac:	58025408 	.word	0x58025408
 8003bb0:	5802541c 	.word	0x5802541c
 8003bb4:	58025430 	.word	0x58025430
 8003bb8:	58025444 	.word	0x58025444
 8003bbc:	58025458 	.word	0x58025458
 8003bc0:	5802546c 	.word	0x5802546c
 8003bc4:	58025480 	.word	0x58025480
 8003bc8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	60da      	str	r2, [r3, #12]
}
 8003bdc:	e04d      	b.n	8003c7a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a29      	ldr	r2, [pc, #164]	@ (8003c88 <DMA_SetConfig+0x338>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d022      	beq.n	8003c2e <DMA_SetConfig+0x2de>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a27      	ldr	r2, [pc, #156]	@ (8003c8c <DMA_SetConfig+0x33c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d01d      	beq.n	8003c2e <DMA_SetConfig+0x2de>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a26      	ldr	r2, [pc, #152]	@ (8003c90 <DMA_SetConfig+0x340>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d018      	beq.n	8003c2e <DMA_SetConfig+0x2de>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a24      	ldr	r2, [pc, #144]	@ (8003c94 <DMA_SetConfig+0x344>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d013      	beq.n	8003c2e <DMA_SetConfig+0x2de>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a23      	ldr	r2, [pc, #140]	@ (8003c98 <DMA_SetConfig+0x348>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d00e      	beq.n	8003c2e <DMA_SetConfig+0x2de>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a21      	ldr	r2, [pc, #132]	@ (8003c9c <DMA_SetConfig+0x34c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d009      	beq.n	8003c2e <DMA_SetConfig+0x2de>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a20      	ldr	r2, [pc, #128]	@ (8003ca0 <DMA_SetConfig+0x350>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d004      	beq.n	8003c2e <DMA_SetConfig+0x2de>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a1e      	ldr	r2, [pc, #120]	@ (8003ca4 <DMA_SetConfig+0x354>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d101      	bne.n	8003c32 <DMA_SetConfig+0x2e2>
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e000      	b.n	8003c34 <DMA_SetConfig+0x2e4>
 8003c32:	2300      	movs	r3, #0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d020      	beq.n	8003c7a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c3c:	f003 031f 	and.w	r3, r3, #31
 8003c40:	2201      	movs	r2, #1
 8003c42:	409a      	lsls	r2, r3
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	2b40      	cmp	r3, #64	@ 0x40
 8003c56:	d108      	bne.n	8003c6a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	60da      	str	r2, [r3, #12]
}
 8003c68:	e007      	b.n	8003c7a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	60da      	str	r2, [r3, #12]
}
 8003c7a:	bf00      	nop
 8003c7c:	371c      	adds	r7, #28
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	58025408 	.word	0x58025408
 8003c8c:	5802541c 	.word	0x5802541c
 8003c90:	58025430 	.word	0x58025430
 8003c94:	58025444 	.word	0x58025444
 8003c98:	58025458 	.word	0x58025458
 8003c9c:	5802546c 	.word	0x5802546c
 8003ca0:	58025480 	.word	0x58025480
 8003ca4:	58025494 	.word	0x58025494

08003ca8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a42      	ldr	r2, [pc, #264]	@ (8003dc0 <DMA_CalcBaseAndBitshift+0x118>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d04a      	beq.n	8003d50 <DMA_CalcBaseAndBitshift+0xa8>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a41      	ldr	r2, [pc, #260]	@ (8003dc4 <DMA_CalcBaseAndBitshift+0x11c>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d045      	beq.n	8003d50 <DMA_CalcBaseAndBitshift+0xa8>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a3f      	ldr	r2, [pc, #252]	@ (8003dc8 <DMA_CalcBaseAndBitshift+0x120>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d040      	beq.n	8003d50 <DMA_CalcBaseAndBitshift+0xa8>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a3e      	ldr	r2, [pc, #248]	@ (8003dcc <DMA_CalcBaseAndBitshift+0x124>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d03b      	beq.n	8003d50 <DMA_CalcBaseAndBitshift+0xa8>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a3c      	ldr	r2, [pc, #240]	@ (8003dd0 <DMA_CalcBaseAndBitshift+0x128>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d036      	beq.n	8003d50 <DMA_CalcBaseAndBitshift+0xa8>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a3b      	ldr	r2, [pc, #236]	@ (8003dd4 <DMA_CalcBaseAndBitshift+0x12c>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d031      	beq.n	8003d50 <DMA_CalcBaseAndBitshift+0xa8>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a39      	ldr	r2, [pc, #228]	@ (8003dd8 <DMA_CalcBaseAndBitshift+0x130>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d02c      	beq.n	8003d50 <DMA_CalcBaseAndBitshift+0xa8>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a38      	ldr	r2, [pc, #224]	@ (8003ddc <DMA_CalcBaseAndBitshift+0x134>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d027      	beq.n	8003d50 <DMA_CalcBaseAndBitshift+0xa8>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a36      	ldr	r2, [pc, #216]	@ (8003de0 <DMA_CalcBaseAndBitshift+0x138>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d022      	beq.n	8003d50 <DMA_CalcBaseAndBitshift+0xa8>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a35      	ldr	r2, [pc, #212]	@ (8003de4 <DMA_CalcBaseAndBitshift+0x13c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d01d      	beq.n	8003d50 <DMA_CalcBaseAndBitshift+0xa8>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a33      	ldr	r2, [pc, #204]	@ (8003de8 <DMA_CalcBaseAndBitshift+0x140>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d018      	beq.n	8003d50 <DMA_CalcBaseAndBitshift+0xa8>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a32      	ldr	r2, [pc, #200]	@ (8003dec <DMA_CalcBaseAndBitshift+0x144>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d013      	beq.n	8003d50 <DMA_CalcBaseAndBitshift+0xa8>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a30      	ldr	r2, [pc, #192]	@ (8003df0 <DMA_CalcBaseAndBitshift+0x148>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d00e      	beq.n	8003d50 <DMA_CalcBaseAndBitshift+0xa8>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a2f      	ldr	r2, [pc, #188]	@ (8003df4 <DMA_CalcBaseAndBitshift+0x14c>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d009      	beq.n	8003d50 <DMA_CalcBaseAndBitshift+0xa8>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a2d      	ldr	r2, [pc, #180]	@ (8003df8 <DMA_CalcBaseAndBitshift+0x150>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d004      	beq.n	8003d50 <DMA_CalcBaseAndBitshift+0xa8>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a2c      	ldr	r2, [pc, #176]	@ (8003dfc <DMA_CalcBaseAndBitshift+0x154>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d101      	bne.n	8003d54 <DMA_CalcBaseAndBitshift+0xac>
 8003d50:	2301      	movs	r3, #1
 8003d52:	e000      	b.n	8003d56 <DMA_CalcBaseAndBitshift+0xae>
 8003d54:	2300      	movs	r3, #0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d024      	beq.n	8003da4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	3b10      	subs	r3, #16
 8003d62:	4a27      	ldr	r2, [pc, #156]	@ (8003e00 <DMA_CalcBaseAndBitshift+0x158>)
 8003d64:	fba2 2303 	umull	r2, r3, r2, r3
 8003d68:	091b      	lsrs	r3, r3, #4
 8003d6a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f003 0307 	and.w	r3, r3, #7
 8003d72:	4a24      	ldr	r2, [pc, #144]	@ (8003e04 <DMA_CalcBaseAndBitshift+0x15c>)
 8003d74:	5cd3      	ldrb	r3, [r2, r3]
 8003d76:	461a      	mov	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2b03      	cmp	r3, #3
 8003d80:	d908      	bls.n	8003d94 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	461a      	mov	r2, r3
 8003d88:	4b1f      	ldr	r3, [pc, #124]	@ (8003e08 <DMA_CalcBaseAndBitshift+0x160>)
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	1d1a      	adds	r2, r3, #4
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d92:	e00d      	b.n	8003db0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	461a      	mov	r2, r3
 8003d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8003e08 <DMA_CalcBaseAndBitshift+0x160>)
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003da2:	e005      	b.n	8003db0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3714      	adds	r7, #20
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	40020010 	.word	0x40020010
 8003dc4:	40020028 	.word	0x40020028
 8003dc8:	40020040 	.word	0x40020040
 8003dcc:	40020058 	.word	0x40020058
 8003dd0:	40020070 	.word	0x40020070
 8003dd4:	40020088 	.word	0x40020088
 8003dd8:	400200a0 	.word	0x400200a0
 8003ddc:	400200b8 	.word	0x400200b8
 8003de0:	40020410 	.word	0x40020410
 8003de4:	40020428 	.word	0x40020428
 8003de8:	40020440 	.word	0x40020440
 8003dec:	40020458 	.word	0x40020458
 8003df0:	40020470 	.word	0x40020470
 8003df4:	40020488 	.word	0x40020488
 8003df8:	400204a0 	.word	0x400204a0
 8003dfc:	400204b8 	.word	0x400204b8
 8003e00:	aaaaaaab 	.word	0xaaaaaaab
 8003e04:	0800d6cc 	.word	0x0800d6cc
 8003e08:	fffffc00 	.word	0xfffffc00

08003e0c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e14:	2300      	movs	r3, #0
 8003e16:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d120      	bne.n	8003e62 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e24:	2b03      	cmp	r3, #3
 8003e26:	d858      	bhi.n	8003eda <DMA_CheckFifoParam+0xce>
 8003e28:	a201      	add	r2, pc, #4	@ (adr r2, 8003e30 <DMA_CheckFifoParam+0x24>)
 8003e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2e:	bf00      	nop
 8003e30:	08003e41 	.word	0x08003e41
 8003e34:	08003e53 	.word	0x08003e53
 8003e38:	08003e41 	.word	0x08003e41
 8003e3c:	08003edb 	.word	0x08003edb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d048      	beq.n	8003ede <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e50:	e045      	b.n	8003ede <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e56:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e5a:	d142      	bne.n	8003ee2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e60:	e03f      	b.n	8003ee2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e6a:	d123      	bne.n	8003eb4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e70:	2b03      	cmp	r3, #3
 8003e72:	d838      	bhi.n	8003ee6 <DMA_CheckFifoParam+0xda>
 8003e74:	a201      	add	r2, pc, #4	@ (adr r2, 8003e7c <DMA_CheckFifoParam+0x70>)
 8003e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7a:	bf00      	nop
 8003e7c:	08003e8d 	.word	0x08003e8d
 8003e80:	08003e93 	.word	0x08003e93
 8003e84:	08003e8d 	.word	0x08003e8d
 8003e88:	08003ea5 	.word	0x08003ea5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	73fb      	strb	r3, [r7, #15]
        break;
 8003e90:	e030      	b.n	8003ef4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e96:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d025      	beq.n	8003eea <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ea2:	e022      	b.n	8003eea <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003eac:	d11f      	bne.n	8003eee <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003eb2:	e01c      	b.n	8003eee <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d902      	bls.n	8003ec2 <DMA_CheckFifoParam+0xb6>
 8003ebc:	2b03      	cmp	r3, #3
 8003ebe:	d003      	beq.n	8003ec8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003ec0:	e018      	b.n	8003ef4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	73fb      	strb	r3, [r7, #15]
        break;
 8003ec6:	e015      	b.n	8003ef4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ecc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00e      	beq.n	8003ef2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	73fb      	strb	r3, [r7, #15]
    break;
 8003ed8:	e00b      	b.n	8003ef2 <DMA_CheckFifoParam+0xe6>
        break;
 8003eda:	bf00      	nop
 8003edc:	e00a      	b.n	8003ef4 <DMA_CheckFifoParam+0xe8>
        break;
 8003ede:	bf00      	nop
 8003ee0:	e008      	b.n	8003ef4 <DMA_CheckFifoParam+0xe8>
        break;
 8003ee2:	bf00      	nop
 8003ee4:	e006      	b.n	8003ef4 <DMA_CheckFifoParam+0xe8>
        break;
 8003ee6:	bf00      	nop
 8003ee8:	e004      	b.n	8003ef4 <DMA_CheckFifoParam+0xe8>
        break;
 8003eea:	bf00      	nop
 8003eec:	e002      	b.n	8003ef4 <DMA_CheckFifoParam+0xe8>
        break;
 8003eee:	bf00      	nop
 8003ef0:	e000      	b.n	8003ef4 <DMA_CheckFifoParam+0xe8>
    break;
 8003ef2:	bf00      	nop
    }
  }

  return status;
 8003ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3714      	adds	r7, #20
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop

08003f04 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a38      	ldr	r2, [pc, #224]	@ (8003ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d022      	beq.n	8003f62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a36      	ldr	r2, [pc, #216]	@ (8003ffc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d01d      	beq.n	8003f62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a35      	ldr	r2, [pc, #212]	@ (8004000 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d018      	beq.n	8003f62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a33      	ldr	r2, [pc, #204]	@ (8004004 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d013      	beq.n	8003f62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a32      	ldr	r2, [pc, #200]	@ (8004008 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d00e      	beq.n	8003f62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a30      	ldr	r2, [pc, #192]	@ (800400c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d009      	beq.n	8003f62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a2f      	ldr	r2, [pc, #188]	@ (8004010 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d004      	beq.n	8003f62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a2d      	ldr	r2, [pc, #180]	@ (8004014 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d101      	bne.n	8003f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003f62:	2301      	movs	r3, #1
 8003f64:	e000      	b.n	8003f68 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003f66:	2300      	movs	r3, #0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d01a      	beq.n	8003fa2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	3b08      	subs	r3, #8
 8003f74:	4a28      	ldr	r2, [pc, #160]	@ (8004018 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003f76:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7a:	091b      	lsrs	r3, r3, #4
 8003f7c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	4b26      	ldr	r3, [pc, #152]	@ (800401c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003f82:	4413      	add	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	461a      	mov	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a24      	ldr	r2, [pc, #144]	@ (8004020 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003f90:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f003 031f 	and.w	r3, r3, #31
 8003f98:	2201      	movs	r2, #1
 8003f9a:	409a      	lsls	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003fa0:	e024      	b.n	8003fec <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	3b10      	subs	r3, #16
 8003faa:	4a1e      	ldr	r2, [pc, #120]	@ (8004024 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003fac:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb0:	091b      	lsrs	r3, r3, #4
 8003fb2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	4a1c      	ldr	r2, [pc, #112]	@ (8004028 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d806      	bhi.n	8003fca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	4a1b      	ldr	r2, [pc, #108]	@ (800402c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d902      	bls.n	8003fca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	3308      	adds	r3, #8
 8003fc8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	4b18      	ldr	r3, [pc, #96]	@ (8004030 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003fce:	4413      	add	r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a16      	ldr	r2, [pc, #88]	@ (8004034 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003fdc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f003 031f 	and.w	r3, r3, #31
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	409a      	lsls	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003fec:	bf00      	nop
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr
 8003ff8:	58025408 	.word	0x58025408
 8003ffc:	5802541c 	.word	0x5802541c
 8004000:	58025430 	.word	0x58025430
 8004004:	58025444 	.word	0x58025444
 8004008:	58025458 	.word	0x58025458
 800400c:	5802546c 	.word	0x5802546c
 8004010:	58025480 	.word	0x58025480
 8004014:	58025494 	.word	0x58025494
 8004018:	cccccccd 	.word	0xcccccccd
 800401c:	16009600 	.word	0x16009600
 8004020:	58025880 	.word	0x58025880
 8004024:	aaaaaaab 	.word	0xaaaaaaab
 8004028:	400204b8 	.word	0x400204b8
 800402c:	4002040f 	.word	0x4002040f
 8004030:	10008200 	.word	0x10008200
 8004034:	40020880 	.word	0x40020880

08004038 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	b2db      	uxtb	r3, r3
 8004046:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d04a      	beq.n	80040e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2b08      	cmp	r3, #8
 8004052:	d847      	bhi.n	80040e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a25      	ldr	r2, [pc, #148]	@ (80040f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d022      	beq.n	80040a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a24      	ldr	r2, [pc, #144]	@ (80040f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d01d      	beq.n	80040a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a22      	ldr	r2, [pc, #136]	@ (80040f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d018      	beq.n	80040a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a21      	ldr	r2, [pc, #132]	@ (80040fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d013      	beq.n	80040a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a1f      	ldr	r2, [pc, #124]	@ (8004100 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d00e      	beq.n	80040a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a1e      	ldr	r2, [pc, #120]	@ (8004104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d009      	beq.n	80040a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a1c      	ldr	r2, [pc, #112]	@ (8004108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d004      	beq.n	80040a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a1b      	ldr	r2, [pc, #108]	@ (800410c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d101      	bne.n	80040a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80040a4:	2301      	movs	r3, #1
 80040a6:	e000      	b.n	80040aa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80040a8:	2300      	movs	r3, #0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00a      	beq.n	80040c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	4b17      	ldr	r3, [pc, #92]	@ (8004110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80040b2:	4413      	add	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	461a      	mov	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a15      	ldr	r2, [pc, #84]	@ (8004114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80040c0:	671a      	str	r2, [r3, #112]	@ 0x70
 80040c2:	e009      	b.n	80040d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	4b14      	ldr	r3, [pc, #80]	@ (8004118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80040c8:	4413      	add	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	461a      	mov	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a11      	ldr	r2, [pc, #68]	@ (800411c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80040d6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	3b01      	subs	r3, #1
 80040dc:	2201      	movs	r2, #1
 80040de:	409a      	lsls	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80040e4:	bf00      	nop
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	58025408 	.word	0x58025408
 80040f4:	5802541c 	.word	0x5802541c
 80040f8:	58025430 	.word	0x58025430
 80040fc:	58025444 	.word	0x58025444
 8004100:	58025458 	.word	0x58025458
 8004104:	5802546c 	.word	0x5802546c
 8004108:	58025480 	.word	0x58025480
 800410c:	58025494 	.word	0x58025494
 8004110:	1600963f 	.word	0x1600963f
 8004114:	58025940 	.word	0x58025940
 8004118:	1000823f 	.word	0x1000823f
 800411c:	40020940 	.word	0x40020940

08004120 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004120:	b480      	push	{r7}
 8004122:	b089      	sub	sp, #36	@ 0x24
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800412a:	2300      	movs	r3, #0
 800412c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800412e:	4b86      	ldr	r3, [pc, #536]	@ (8004348 <HAL_GPIO_Init+0x228>)
 8004130:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004132:	e18c      	b.n	800444e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	2101      	movs	r1, #1
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	fa01 f303 	lsl.w	r3, r1, r3
 8004140:	4013      	ands	r3, r2
 8004142:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 817e 	beq.w	8004448 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f003 0303 	and.w	r3, r3, #3
 8004154:	2b01      	cmp	r3, #1
 8004156:	d005      	beq.n	8004164 <HAL_GPIO_Init+0x44>
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f003 0303 	and.w	r3, r3, #3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d130      	bne.n	80041c6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	2203      	movs	r2, #3
 8004170:	fa02 f303 	lsl.w	r3, r2, r3
 8004174:	43db      	mvns	r3, r3
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	4013      	ands	r3, r2
 800417a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	68da      	ldr	r2, [r3, #12]
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	fa02 f303 	lsl.w	r3, r2, r3
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	4313      	orrs	r3, r2
 800418c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800419a:	2201      	movs	r2, #1
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	fa02 f303 	lsl.w	r3, r2, r3
 80041a2:	43db      	mvns	r3, r3
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	4013      	ands	r3, r2
 80041a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	091b      	lsrs	r3, r3, #4
 80041b0:	f003 0201 	and.w	r2, r3, #1
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	69ba      	ldr	r2, [r7, #24]
 80041bc:	4313      	orrs	r3, r2
 80041be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f003 0303 	and.w	r3, r3, #3
 80041ce:	2b03      	cmp	r3, #3
 80041d0:	d017      	beq.n	8004202 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	2203      	movs	r2, #3
 80041de:	fa02 f303 	lsl.w	r3, r2, r3
 80041e2:	43db      	mvns	r3, r3
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	4013      	ands	r3, r2
 80041e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d123      	bne.n	8004256 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	08da      	lsrs	r2, r3, #3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	3208      	adds	r2, #8
 8004216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800421a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	220f      	movs	r2, #15
 8004226:	fa02 f303 	lsl.w	r3, r2, r3
 800422a:	43db      	mvns	r3, r3
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	4013      	ands	r3, r2
 8004230:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	691a      	ldr	r2, [r3, #16]
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	f003 0307 	and.w	r3, r3, #7
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	fa02 f303 	lsl.w	r3, r2, r3
 8004242:	69ba      	ldr	r2, [r7, #24]
 8004244:	4313      	orrs	r3, r2
 8004246:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	08da      	lsrs	r2, r3, #3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3208      	adds	r2, #8
 8004250:	69b9      	ldr	r1, [r7, #24]
 8004252:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	2203      	movs	r2, #3
 8004262:	fa02 f303 	lsl.w	r3, r2, r3
 8004266:	43db      	mvns	r3, r3
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	4013      	ands	r3, r2
 800426c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f003 0203 	and.w	r2, r3, #3
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	fa02 f303 	lsl.w	r3, r2, r3
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	4313      	orrs	r3, r2
 8004282:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 80d8 	beq.w	8004448 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004298:	4b2c      	ldr	r3, [pc, #176]	@ (800434c <HAL_GPIO_Init+0x22c>)
 800429a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800429e:	4a2b      	ldr	r2, [pc, #172]	@ (800434c <HAL_GPIO_Init+0x22c>)
 80042a0:	f043 0302 	orr.w	r3, r3, #2
 80042a4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80042a8:	4b28      	ldr	r3, [pc, #160]	@ (800434c <HAL_GPIO_Init+0x22c>)
 80042aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	60fb      	str	r3, [r7, #12]
 80042b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042b6:	4a26      	ldr	r2, [pc, #152]	@ (8004350 <HAL_GPIO_Init+0x230>)
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	089b      	lsrs	r3, r3, #2
 80042bc:	3302      	adds	r3, #2
 80042be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	f003 0303 	and.w	r3, r3, #3
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	220f      	movs	r2, #15
 80042ce:	fa02 f303 	lsl.w	r3, r2, r3
 80042d2:	43db      	mvns	r3, r3
 80042d4:	69ba      	ldr	r2, [r7, #24]
 80042d6:	4013      	ands	r3, r2
 80042d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a1d      	ldr	r2, [pc, #116]	@ (8004354 <HAL_GPIO_Init+0x234>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d04a      	beq.n	8004378 <HAL_GPIO_Init+0x258>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a1c      	ldr	r2, [pc, #112]	@ (8004358 <HAL_GPIO_Init+0x238>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d02b      	beq.n	8004342 <HAL_GPIO_Init+0x222>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a1b      	ldr	r2, [pc, #108]	@ (800435c <HAL_GPIO_Init+0x23c>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d025      	beq.n	800433e <HAL_GPIO_Init+0x21e>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a1a      	ldr	r2, [pc, #104]	@ (8004360 <HAL_GPIO_Init+0x240>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d01f      	beq.n	800433a <HAL_GPIO_Init+0x21a>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a19      	ldr	r2, [pc, #100]	@ (8004364 <HAL_GPIO_Init+0x244>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d019      	beq.n	8004336 <HAL_GPIO_Init+0x216>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a18      	ldr	r2, [pc, #96]	@ (8004368 <HAL_GPIO_Init+0x248>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d013      	beq.n	8004332 <HAL_GPIO_Init+0x212>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a17      	ldr	r2, [pc, #92]	@ (800436c <HAL_GPIO_Init+0x24c>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d00d      	beq.n	800432e <HAL_GPIO_Init+0x20e>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a16      	ldr	r2, [pc, #88]	@ (8004370 <HAL_GPIO_Init+0x250>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d007      	beq.n	800432a <HAL_GPIO_Init+0x20a>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a15      	ldr	r2, [pc, #84]	@ (8004374 <HAL_GPIO_Init+0x254>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d101      	bne.n	8004326 <HAL_GPIO_Init+0x206>
 8004322:	2309      	movs	r3, #9
 8004324:	e029      	b.n	800437a <HAL_GPIO_Init+0x25a>
 8004326:	230a      	movs	r3, #10
 8004328:	e027      	b.n	800437a <HAL_GPIO_Init+0x25a>
 800432a:	2307      	movs	r3, #7
 800432c:	e025      	b.n	800437a <HAL_GPIO_Init+0x25a>
 800432e:	2306      	movs	r3, #6
 8004330:	e023      	b.n	800437a <HAL_GPIO_Init+0x25a>
 8004332:	2305      	movs	r3, #5
 8004334:	e021      	b.n	800437a <HAL_GPIO_Init+0x25a>
 8004336:	2304      	movs	r3, #4
 8004338:	e01f      	b.n	800437a <HAL_GPIO_Init+0x25a>
 800433a:	2303      	movs	r3, #3
 800433c:	e01d      	b.n	800437a <HAL_GPIO_Init+0x25a>
 800433e:	2302      	movs	r3, #2
 8004340:	e01b      	b.n	800437a <HAL_GPIO_Init+0x25a>
 8004342:	2301      	movs	r3, #1
 8004344:	e019      	b.n	800437a <HAL_GPIO_Init+0x25a>
 8004346:	bf00      	nop
 8004348:	58000080 	.word	0x58000080
 800434c:	58024400 	.word	0x58024400
 8004350:	58000400 	.word	0x58000400
 8004354:	58020000 	.word	0x58020000
 8004358:	58020400 	.word	0x58020400
 800435c:	58020800 	.word	0x58020800
 8004360:	58020c00 	.word	0x58020c00
 8004364:	58021000 	.word	0x58021000
 8004368:	58021400 	.word	0x58021400
 800436c:	58021800 	.word	0x58021800
 8004370:	58021c00 	.word	0x58021c00
 8004374:	58022400 	.word	0x58022400
 8004378:	2300      	movs	r3, #0
 800437a:	69fa      	ldr	r2, [r7, #28]
 800437c:	f002 0203 	and.w	r2, r2, #3
 8004380:	0092      	lsls	r2, r2, #2
 8004382:	4093      	lsls	r3, r2
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	4313      	orrs	r3, r2
 8004388:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800438a:	4938      	ldr	r1, [pc, #224]	@ (800446c <HAL_GPIO_Init+0x34c>)
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	089b      	lsrs	r3, r3, #2
 8004390:	3302      	adds	r3, #2
 8004392:	69ba      	ldr	r2, [r7, #24]
 8004394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004398:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	43db      	mvns	r3, r3
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	4013      	ands	r3, r2
 80043a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80043b6:	69ba      	ldr	r2, [r7, #24]
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80043be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80043c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	43db      	mvns	r3, r3
 80043d2:	69ba      	ldr	r2, [r7, #24]
 80043d4:	4013      	ands	r3, r2
 80043d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d003      	beq.n	80043ec <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80043ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	43db      	mvns	r3, r3
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	4013      	ands	r3, r2
 8004402:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d003      	beq.n	8004418 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	4313      	orrs	r3, r2
 8004416:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	43db      	mvns	r3, r3
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	4013      	ands	r3, r2
 800442c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	4313      	orrs	r3, r2
 8004440:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	3301      	adds	r3, #1
 800444c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	fa22 f303 	lsr.w	r3, r2, r3
 8004458:	2b00      	cmp	r3, #0
 800445a:	f47f ae6b 	bne.w	8004134 <HAL_GPIO_Init+0x14>
  }
}
 800445e:	bf00      	nop
 8004460:	bf00      	nop
 8004462:	3724      	adds	r7, #36	@ 0x24
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr
 800446c:	58000400 	.word	0x58000400

08004470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	460b      	mov	r3, r1
 800447a:	807b      	strh	r3, [r7, #2]
 800447c:	4613      	mov	r3, r2
 800447e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004480:	787b      	ldrb	r3, [r7, #1]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004486:	887a      	ldrh	r2, [r7, #2]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800448c:	e003      	b.n	8004496 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800448e:	887b      	ldrh	r3, [r7, #2]
 8004490:	041a      	lsls	r2, r3, #16
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	619a      	str	r2, [r3, #24]
}
 8004496:	bf00      	nop
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
	...

080044a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e08b      	b.n	80045ce <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d106      	bne.n	80044d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7fc f820 	bl	8000510 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2224      	movs	r2, #36	@ 0x24
 80044d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0201 	bic.w	r2, r2, #1
 80044e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80044f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004504:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d107      	bne.n	800451e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	689a      	ldr	r2, [r3, #8]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800451a:	609a      	str	r2, [r3, #8]
 800451c:	e006      	b.n	800452c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	689a      	ldr	r2, [r3, #8]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800452a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	2b02      	cmp	r3, #2
 8004532:	d108      	bne.n	8004546 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004542:	605a      	str	r2, [r3, #4]
 8004544:	e007      	b.n	8004556 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004554:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6859      	ldr	r1, [r3, #4]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	4b1d      	ldr	r3, [pc, #116]	@ (80045d8 <HAL_I2C_Init+0x134>)
 8004562:	430b      	orrs	r3, r1
 8004564:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68da      	ldr	r2, [r3, #12]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004574:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691a      	ldr	r2, [r3, #16]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	430a      	orrs	r2, r1
 800458e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	69d9      	ldr	r1, [r3, #28]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a1a      	ldr	r2, [r3, #32]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f042 0201 	orr.w	r2, r2, #1
 80045ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2220      	movs	r2, #32
 80045ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	02008000 	.word	0x02008000

080045dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b20      	cmp	r3, #32
 80045f0:	d138      	bne.n	8004664 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d101      	bne.n	8004600 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80045fc:	2302      	movs	r3, #2
 80045fe:	e032      	b.n	8004666 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2224      	movs	r2, #36	@ 0x24
 800460c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 0201 	bic.w	r2, r2, #1
 800461e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800462e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6819      	ldr	r1, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0201 	orr.w	r2, r2, #1
 800464e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2220      	movs	r2, #32
 8004654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004660:	2300      	movs	r3, #0
 8004662:	e000      	b.n	8004666 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004664:	2302      	movs	r3, #2
  }
}
 8004666:	4618      	mov	r0, r3
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004672:	b480      	push	{r7}
 8004674:	b085      	sub	sp, #20
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
 800467a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b20      	cmp	r3, #32
 8004686:	d139      	bne.n	80046fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800468e:	2b01      	cmp	r3, #1
 8004690:	d101      	bne.n	8004696 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004692:	2302      	movs	r3, #2
 8004694:	e033      	b.n	80046fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2224      	movs	r2, #36	@ 0x24
 80046a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 0201 	bic.w	r2, r2, #1
 80046b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80046c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	021b      	lsls	r3, r3, #8
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 0201 	orr.w	r2, r2, #1
 80046e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2220      	movs	r2, #32
 80046ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80046f8:	2300      	movs	r3, #0
 80046fa:	e000      	b.n	80046fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80046fc:	2302      	movs	r3, #2
  }
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
	...

0800470c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b088      	sub	sp, #32
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e11a      	b.n	8004954 <HAL_I2S_Init+0x248>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d106      	bne.n	8004738 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7fb ff86 	bl	8000644 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2202      	movs	r2, #2
 800473c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b01      	cmp	r3, #1
 800474c:	d107      	bne.n	800475e <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 0201 	bic.w	r2, r2, #1
 800475c:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2200      	movs	r2, #0
 8004764:	651a      	str	r2, [r3, #80]	@ 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	2b04      	cmp	r3, #4
 800476c:	d008      	beq.n	8004780 <HAL_I2S_Init+0x74>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	2b06      	cmp	r3, #6
 8004774:	d004      	beq.n	8004780 <HAL_I2S_Init+0x74>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2b0a      	cmp	r3, #10
 800477c:	f040 8094 	bne.w	80048a8 <HAL_I2S_Init+0x19c>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	2b02      	cmp	r3, #2
 8004786:	d067      	beq.n	8004858 <HAL_I2S_Init+0x14c>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d002      	beq.n	8004796 <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8004790:	2302      	movs	r3, #2
 8004792:	617b      	str	r3, [r7, #20]
 8004794:	e001      	b.n	800479a <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8004796:	2301      	movs	r3, #1
 8004798:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	2b30      	cmp	r3, #48	@ 0x30
 80047a0:	d003      	beq.n	80047aa <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 80047a6:	2bb0      	cmp	r3, #176	@ 0xb0
 80047a8:	d102      	bne.n	80047b0 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 80047aa:	2301      	movs	r3, #1
 80047ac:	60bb      	str	r3, [r7, #8]
 80047ae:	e001      	b.n	80047b4 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 80047b0:	2300      	movs	r3, #0
 80047b2:	60bb      	str	r3, [r7, #8]
      }

      /* Get the source clock value: based on System Clock value */
#if defined (SPI_SPI6I2S_SUPPORT)
      if (hi2s->Instance == SPI6)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a68      	ldr	r2, [pc, #416]	@ (800495c <HAL_I2S_Init+0x250>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d107      	bne.n	80047ce <HAL_I2S_Init+0xc2>
      {
        /* SPI6 source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI6);
 80047be:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80047c2:	f04f 0100 	mov.w	r1, #0
 80047c6:	f002 fb07 	bl	8006dd8 <HAL_RCCEx_GetPeriphCLKFreq>
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	e006      	b.n	80047dc <HAL_I2S_Init+0xd0>
      }
      else
      {
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 80047ce:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80047d2:	f04f 0100 	mov.w	r1, #0
 80047d6:	f002 faff 	bl	8006dd8 <HAL_RCCEx_GetPeriphCLKFreq>
 80047da:	60f8      	str	r0, [r7, #12]
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80047e4:	d113      	bne.n	800480e <HAL_I2S_Init+0x102>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80047e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	fa22 f303 	lsr.w	r3, r2, r3
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80047f6:	4613      	mov	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4413      	add	r3, r2
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	461a      	mov	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	fbb2 f3f3 	udiv	r3, r2, r3
 8004808:	3305      	adds	r3, #5
 800480a:	613b      	str	r3, [r7, #16]
 800480c:	e014      	b.n	8004838 <HAL_I2S_Init+0x12c>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 800480e:	2220      	movs	r2, #32
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	fa22 f303 	lsr.w	r3, r2, r3
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	fb02 f303 	mul.w	r3, r2, r3
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004822:	4613      	mov	r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4413      	add	r3, r2
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	461a      	mov	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	fbb2 f3f3 	udiv	r3, r2, r3
 8004834:	3305      	adds	r3, #5
 8004836:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	4a49      	ldr	r2, [pc, #292]	@ (8004960 <HAL_I2S_Init+0x254>)
 800483c:	fba2 2303 	umull	r2, r3, r2, r3
 8004840:	08db      	lsrs	r3, r3, #3
 8004842:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	085b      	lsrs	r3, r3, #1
 8004854:	61fb      	str	r3, [r7, #28]
 8004856:	e003      	b.n	8004860 <HAL_I2S_Init+0x154>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8004858:	2302      	movs	r3, #2
 800485a:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 800485c:	2300      	movs	r3, #0
 800485e:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d102      	bne.n	800486c <HAL_I2S_Init+0x160>
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d002      	beq.n	8004872 <HAL_I2S_Init+0x166>
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	2bff      	cmp	r3, #255	@ 0xff
 8004870:	d907      	bls.n	8004882 <HAL_I2S_Init+0x176>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004876:	f043 0210 	orr.w	r2, r3, #16
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	651a      	str	r2, [r3, #80]	@ 0x50
      return  HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e068      	b.n	8004954 <HAL_I2S_Init+0x248>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d101      	bne.n	800488c <HAL_I2S_Init+0x180>
    {
      i2sodd = 1UL;
 8004888:	2301      	movs	r3, #1
 800488a:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004892:	4b34      	ldr	r3, [pc, #208]	@ (8004964 <HAL_I2S_Init+0x258>)
 8004894:	4013      	ands	r3, r2
 8004896:	69fa      	ldr	r2, [r7, #28]
 8004898:	0411      	lsls	r1, r2, #16
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	0612      	lsls	r2, r2, #24
 800489e:	4311      	orrs	r1, r2
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	6812      	ldr	r2, [r2, #0]
 80048a4:	430b      	orrs	r3, r1
 80048a6:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048ae:	4b2e      	ldr	r3, [pc, #184]	@ (8004968 <HAL_I2S_Init+0x25c>)
 80048b0:	4013      	ands	r3, r2
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	6851      	ldr	r1, [r2, #4]
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	6892      	ldr	r2, [r2, #8]
 80048ba:	4311      	orrs	r1, r2
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	68d2      	ldr	r2, [r2, #12]
 80048c0:	4311      	orrs	r1, r2
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	6992      	ldr	r2, [r2, #24]
 80048c6:	4311      	orrs	r1, r2
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	6a12      	ldr	r2, [r2, #32]
 80048cc:	4311      	orrs	r1, r2
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80048d2:	4311      	orrs	r1, r2
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	6912      	ldr	r2, [r2, #16]
 80048d8:	430a      	orrs	r2, r1
 80048da:	431a      	orrs	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f042 0201 	orr.w	r2, r2, #1
 80048e4:	651a      	str	r2, [r3, #80]	@ 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f640 72f8 	movw	r2, #4088	@ 0xff8
 80048ee:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80048fe:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	f423 0100 	bic.w	r1, r3, #8388608	@ 0x800000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	69da      	ldr	r2, [r3, #28]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	2b04      	cmp	r3, #4
 800491c:	d007      	beq.n	800492e <HAL_I2S_Init+0x222>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	2b06      	cmp	r3, #6
 8004924:	d003      	beq.n	800492e <HAL_I2S_Init+0x222>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	2b0a      	cmp	r3, #10
 800492c:	d10a      	bne.n	8004944 <HAL_I2S_Init+0x238>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3720      	adds	r7, #32
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	58001400 	.word	0x58001400
 8004960:	cccccccd 	.word	0xcccccccd
 8004964:	fe00ffff 	.word	0xfe00ffff
 8004968:	fdff9040 	.word	0xfdff9040

0800496c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, const uint16_t *pData, uint16_t Size)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	4613      	mov	r3, r2
 8004978:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800497a:	2300      	movs	r3, #0
 800497c:	75fb      	strb	r3, [r7, #23]

  if ((pData == NULL) || (Size == 0UL))
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d002      	beq.n	800498a <HAL_I2S_Transmit_DMA+0x1e>
 8004984:	88fb      	ldrh	r3, [r7, #6]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <HAL_I2S_Transmit_DMA+0x22>
  {
    return  HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e086      	b.n	8004a9c <HAL_I2S_Transmit_DMA+0x130>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b01      	cmp	r3, #1
 8004998:	d001      	beq.n	800499e <HAL_I2S_Transmit_DMA+0x32>
  {
    return HAL_BUSY;
 800499a:	2302      	movs	r3, #2
 800499c:	e07e      	b.n	8004a9c <HAL_I2S_Transmit_DMA+0x130>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d101      	bne.n	80049ae <HAL_I2S_Transmit_DMA+0x42>
 80049aa:	2302      	movs	r3, #2
 80049ac:	e076      	b.n	8004a9c <HAL_I2S_Transmit_DMA+0x130>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Set state and reset error code */
  hi2s->State       = HAL_I2S_STATE_BUSY_TX;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2203      	movs	r2, #3
 80049ba:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->pTxBuffPtr  = (const uint16_t *)pData;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->TxXferSize  = Size;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	88fa      	ldrh	r2, [r7, #6]
 80049ce:	861a      	strh	r2, [r3, #48]	@ 0x30
  hi2s->TxXferCount = Size;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	88fa      	ldrh	r2, [r7, #6]
 80049d4:	865a      	strh	r2, [r3, #50]	@ 0x32

  /* Init field not used in handle to zero */
  hi2s->pRxBuffPtr  = NULL;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2s->RxXferSize  = (uint16_t)0UL;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	871a      	strh	r2, [r3, #56]	@ 0x38
  hi2s->RxXferCount = (uint16_t)0UL;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ec:	4a2d      	ldr	r2, [pc, #180]	@ (8004aa4 <HAL_I2S_Transmit_DMA+0x138>)
 80049ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049f4:	4a2c      	ldr	r2, [pc, #176]	@ (8004aa8 <HAL_I2S_Transmit_DMA+0x13c>)
 80049f6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049fc:	4a2b      	ldr	r2, [pc, #172]	@ (8004aac <HAL_I2S_Transmit_DMA+0x140>)
 80049fe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a08:	4619      	mov	r1, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	3320      	adds	r3, #32
 8004a10:	461a      	mov	r2, r3
                                 hi2s->TxXferCount))
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004a16:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 8004a18:	f7fd fe06 	bl	8002628 <HAL_DMA_Start_IT>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d011      	beq.n	8004a46 <HAL_I2S_Transmit_DMA+0xda>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a26:	f043 0208 	orr.w	r2, r3, #8
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	651a      	str	r2, [r3, #80]	@ 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    __HAL_UNLOCK(hi2s);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    errorcode = HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8004a42:	7dfb      	ldrb	r3, [r7, #23]
 8004a44:	e02a      	b.n	8004a9c <HAL_I2S_Transmit_DMA+0x130>
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d107      	bne.n	8004a64 <HAL_I2S_Transmit_DMA+0xf8>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689a      	ldr	r2, [r3, #8]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a62:	609a      	str	r2, [r3, #8]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d107      	bne.n	8004a82 <HAL_I2S_Transmit_DMA+0x116>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f042 0201 	orr.w	r2, r2, #1
 8004a80:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a90:	601a      	str	r2, [r3, #0]

  __HAL_UNLOCK(hi2s);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  return errorcode;
 8004a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3718      	adds	r7, #24
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	08004b1b 	.word	0x08004b1b
 8004aa8:	08004ad9 	.word	0x08004ad9
 8004aac:	08004b37 	.word	0x08004b37

08004ab0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ae4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10e      	bne.n	8004b0c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004afc:	609a      	str	r2, [r3, #8]

    hi2s->TxXferCount = (uint16_t) 0UL;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f7ff ffcf 	bl	8004ab0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004b12:	bf00      	nop
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b084      	sub	sp, #16
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f7fb ff2e 	bl	800098a <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004b2e:	bf00      	nop
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b084      	sub	sp, #16
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689a      	ldr	r2, [r3, #8]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8004b52:	609a      	str	r2, [r3, #8]
  hi2s->TxXferCount = (uint16_t) 0UL;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	865a      	strh	r2, [r3, #50]	@ 0x32
  hi2s->RxXferCount = (uint16_t) 0UL;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	875a      	strh	r2, [r3, #58]	@ 0x3a

  hi2s->State = HAL_I2S_STATE_READY;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b6c:	f043 0208 	orr.w	r2, r3, #8
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f7ff ffa5 	bl	8004ac4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004b7a:	bf00      	nop
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
	...

08004b84 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004b8c:	4b19      	ldr	r3, [pc, #100]	@ (8004bf4 <HAL_PWREx_ConfigSupply+0x70>)
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f003 0304 	and.w	r3, r3, #4
 8004b94:	2b04      	cmp	r3, #4
 8004b96:	d00a      	beq.n	8004bae <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004b98:	4b16      	ldr	r3, [pc, #88]	@ (8004bf4 <HAL_PWREx_ConfigSupply+0x70>)
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	f003 0307 	and.w	r3, r3, #7
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d001      	beq.n	8004baa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e01f      	b.n	8004bea <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004baa:	2300      	movs	r3, #0
 8004bac:	e01d      	b.n	8004bea <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004bae:	4b11      	ldr	r3, [pc, #68]	@ (8004bf4 <HAL_PWREx_ConfigSupply+0x70>)
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	f023 0207 	bic.w	r2, r3, #7
 8004bb6:	490f      	ldr	r1, [pc, #60]	@ (8004bf4 <HAL_PWREx_ConfigSupply+0x70>)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004bbe:	f7fd f847 	bl	8001c50 <HAL_GetTick>
 8004bc2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004bc4:	e009      	b.n	8004bda <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004bc6:	f7fd f843 	bl	8001c50 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004bd4:	d901      	bls.n	8004bda <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e007      	b.n	8004bea <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004bda:	4b06      	ldr	r3, [pc, #24]	@ (8004bf4 <HAL_PWREx_ConfigSupply+0x70>)
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004be2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004be6:	d1ee      	bne.n	8004bc6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	58024800 	.word	0x58024800

08004bf8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08c      	sub	sp, #48	@ 0x30
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e3c8      	b.n	800539c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f000 8087 	beq.w	8004d26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c18:	4b88      	ldr	r3, [pc, #544]	@ (8004e3c <HAL_RCC_OscConfig+0x244>)
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c22:	4b86      	ldr	r3, [pc, #536]	@ (8004e3c <HAL_RCC_OscConfig+0x244>)
 8004c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c26:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c2a:	2b10      	cmp	r3, #16
 8004c2c:	d007      	beq.n	8004c3e <HAL_RCC_OscConfig+0x46>
 8004c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c30:	2b18      	cmp	r3, #24
 8004c32:	d110      	bne.n	8004c56 <HAL_RCC_OscConfig+0x5e>
 8004c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c36:	f003 0303 	and.w	r3, r3, #3
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d10b      	bne.n	8004c56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c3e:	4b7f      	ldr	r3, [pc, #508]	@ (8004e3c <HAL_RCC_OscConfig+0x244>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d06c      	beq.n	8004d24 <HAL_RCC_OscConfig+0x12c>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d168      	bne.n	8004d24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e3a2      	b.n	800539c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c5e:	d106      	bne.n	8004c6e <HAL_RCC_OscConfig+0x76>
 8004c60:	4b76      	ldr	r3, [pc, #472]	@ (8004e3c <HAL_RCC_OscConfig+0x244>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a75      	ldr	r2, [pc, #468]	@ (8004e3c <HAL_RCC_OscConfig+0x244>)
 8004c66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c6a:	6013      	str	r3, [r2, #0]
 8004c6c:	e02e      	b.n	8004ccc <HAL_RCC_OscConfig+0xd4>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10c      	bne.n	8004c90 <HAL_RCC_OscConfig+0x98>
 8004c76:	4b71      	ldr	r3, [pc, #452]	@ (8004e3c <HAL_RCC_OscConfig+0x244>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a70      	ldr	r2, [pc, #448]	@ (8004e3c <HAL_RCC_OscConfig+0x244>)
 8004c7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c80:	6013      	str	r3, [r2, #0]
 8004c82:	4b6e      	ldr	r3, [pc, #440]	@ (8004e3c <HAL_RCC_OscConfig+0x244>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a6d      	ldr	r2, [pc, #436]	@ (8004e3c <HAL_RCC_OscConfig+0x244>)
 8004c88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c8c:	6013      	str	r3, [r2, #0]
 8004c8e:	e01d      	b.n	8004ccc <HAL_RCC_OscConfig+0xd4>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c98:	d10c      	bne.n	8004cb4 <HAL_RCC_OscConfig+0xbc>
 8004c9a:	4b68      	ldr	r3, [pc, #416]	@ (8004e3c <HAL_RCC_OscConfig+0x244>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a67      	ldr	r2, [pc, #412]	@ (8004e3c <HAL_RCC_OscConfig+0x244>)
 8004ca0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ca4:	6013      	str	r3, [r2, #0]
 8004ca6:	4b65      	ldr	r3, [pc, #404]	@ (8004e3c <HAL_RCC_OscConfig+0x244>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a64      	ldr	r2, [pc, #400]	@ (8004e3c <HAL_RCC_OscConfig+0x244>)
 8004cac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cb0:	6013      	str	r3, [r2, #0]
 8004cb2:	e00b      	b.n	8004ccc <HAL_RCC_OscConfig+0xd4>
 8004cb4:	4b61      	ldr	r3, [pc, #388]	@ (8004e3c <HAL_RCC_OscConfig+0x244>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a60      	ldr	r2, [pc, #384]	@ (8004e3c <HAL_RCC_OscConfig+0x244>)
 8004cba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cbe:	6013      	str	r3, [r2, #0]
 8004cc0:	4b5e      	ldr	r3, [pc, #376]	@ (8004e3c <HAL_RCC_OscConfig+0x244>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a5d      	ldr	r2, [pc, #372]	@ (8004e3c <HAL_RCC_OscConfig+0x244>)
 8004cc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d013      	beq.n	8004cfc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd4:	f7fc ffbc 	bl	8001c50 <HAL_GetTick>
 8004cd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cdc:	f7fc ffb8 	bl	8001c50 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b64      	cmp	r3, #100	@ 0x64
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e356      	b.n	800539c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cee:	4b53      	ldr	r3, [pc, #332]	@ (8004e3c <HAL_RCC_OscConfig+0x244>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d0f0      	beq.n	8004cdc <HAL_RCC_OscConfig+0xe4>
 8004cfa:	e014      	b.n	8004d26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfc:	f7fc ffa8 	bl	8001c50 <HAL_GetTick>
 8004d00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d04:	f7fc ffa4 	bl	8001c50 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b64      	cmp	r3, #100	@ 0x64
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e342      	b.n	800539c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d16:	4b49      	ldr	r3, [pc, #292]	@ (8004e3c <HAL_RCC_OscConfig+0x244>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1f0      	bne.n	8004d04 <HAL_RCC_OscConfig+0x10c>
 8004d22:	e000      	b.n	8004d26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 808c 	beq.w	8004e4c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d34:	4b41      	ldr	r3, [pc, #260]	@ (8004e3c <HAL_RCC_OscConfig+0x244>)
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d3c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d3e:	4b3f      	ldr	r3, [pc, #252]	@ (8004e3c <HAL_RCC_OscConfig+0x244>)
 8004d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d42:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004d44:	6a3b      	ldr	r3, [r7, #32]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d007      	beq.n	8004d5a <HAL_RCC_OscConfig+0x162>
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	2b18      	cmp	r3, #24
 8004d4e:	d137      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x1c8>
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	f003 0303 	and.w	r3, r3, #3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d132      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d5a:	4b38      	ldr	r3, [pc, #224]	@ (8004e3c <HAL_RCC_OscConfig+0x244>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0304 	and.w	r3, r3, #4
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d005      	beq.n	8004d72 <HAL_RCC_OscConfig+0x17a>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e314      	b.n	800539c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d72:	4b32      	ldr	r3, [pc, #200]	@ (8004e3c <HAL_RCC_OscConfig+0x244>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f023 0219 	bic.w	r2, r3, #25
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	492f      	ldr	r1, [pc, #188]	@ (8004e3c <HAL_RCC_OscConfig+0x244>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d84:	f7fc ff64 	bl	8001c50 <HAL_GetTick>
 8004d88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d8a:	e008      	b.n	8004d9e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d8c:	f7fc ff60 	bl	8001c50 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e2fe      	b.n	800539c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d9e:	4b27      	ldr	r3, [pc, #156]	@ (8004e3c <HAL_RCC_OscConfig+0x244>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0304 	and.w	r3, r3, #4
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d0f0      	beq.n	8004d8c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004daa:	4b24      	ldr	r3, [pc, #144]	@ (8004e3c <HAL_RCC_OscConfig+0x244>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	061b      	lsls	r3, r3, #24
 8004db8:	4920      	ldr	r1, [pc, #128]	@ (8004e3c <HAL_RCC_OscConfig+0x244>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dbe:	e045      	b.n	8004e4c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d026      	beq.n	8004e16 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004dc8:	4b1c      	ldr	r3, [pc, #112]	@ (8004e3c <HAL_RCC_OscConfig+0x244>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f023 0219 	bic.w	r2, r3, #25
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	4919      	ldr	r1, [pc, #100]	@ (8004e3c <HAL_RCC_OscConfig+0x244>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dda:	f7fc ff39 	bl	8001c50 <HAL_GetTick>
 8004dde:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004de0:	e008      	b.n	8004df4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004de2:	f7fc ff35 	bl	8001c50 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d901      	bls.n	8004df4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e2d3      	b.n	800539c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004df4:	4b11      	ldr	r3, [pc, #68]	@ (8004e3c <HAL_RCC_OscConfig+0x244>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0304 	and.w	r3, r3, #4
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d0f0      	beq.n	8004de2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e00:	4b0e      	ldr	r3, [pc, #56]	@ (8004e3c <HAL_RCC_OscConfig+0x244>)
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	061b      	lsls	r3, r3, #24
 8004e0e:	490b      	ldr	r1, [pc, #44]	@ (8004e3c <HAL_RCC_OscConfig+0x244>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	604b      	str	r3, [r1, #4]
 8004e14:	e01a      	b.n	8004e4c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e16:	4b09      	ldr	r3, [pc, #36]	@ (8004e3c <HAL_RCC_OscConfig+0x244>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a08      	ldr	r2, [pc, #32]	@ (8004e3c <HAL_RCC_OscConfig+0x244>)
 8004e1c:	f023 0301 	bic.w	r3, r3, #1
 8004e20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e22:	f7fc ff15 	bl	8001c50 <HAL_GetTick>
 8004e26:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e28:	e00a      	b.n	8004e40 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e2a:	f7fc ff11 	bl	8001c50 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d903      	bls.n	8004e40 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e2af      	b.n	800539c <HAL_RCC_OscConfig+0x7a4>
 8004e3c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e40:	4b96      	ldr	r3, [pc, #600]	@ (800509c <HAL_RCC_OscConfig+0x4a4>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0304 	and.w	r3, r3, #4
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1ee      	bne.n	8004e2a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0310 	and.w	r3, r3, #16
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d06a      	beq.n	8004f2e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e58:	4b90      	ldr	r3, [pc, #576]	@ (800509c <HAL_RCC_OscConfig+0x4a4>)
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e60:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e62:	4b8e      	ldr	r3, [pc, #568]	@ (800509c <HAL_RCC_OscConfig+0x4a4>)
 8004e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e66:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	2b08      	cmp	r3, #8
 8004e6c:	d007      	beq.n	8004e7e <HAL_RCC_OscConfig+0x286>
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	2b18      	cmp	r3, #24
 8004e72:	d11b      	bne.n	8004eac <HAL_RCC_OscConfig+0x2b4>
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f003 0303 	and.w	r3, r3, #3
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d116      	bne.n	8004eac <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e7e:	4b87      	ldr	r3, [pc, #540]	@ (800509c <HAL_RCC_OscConfig+0x4a4>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d005      	beq.n	8004e96 <HAL_RCC_OscConfig+0x29e>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	2b80      	cmp	r3, #128	@ 0x80
 8004e90:	d001      	beq.n	8004e96 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e282      	b.n	800539c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e96:	4b81      	ldr	r3, [pc, #516]	@ (800509c <HAL_RCC_OscConfig+0x4a4>)
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	061b      	lsls	r3, r3, #24
 8004ea4:	497d      	ldr	r1, [pc, #500]	@ (800509c <HAL_RCC_OscConfig+0x4a4>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004eaa:	e040      	b.n	8004f2e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d023      	beq.n	8004efc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004eb4:	4b79      	ldr	r3, [pc, #484]	@ (800509c <HAL_RCC_OscConfig+0x4a4>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a78      	ldr	r2, [pc, #480]	@ (800509c <HAL_RCC_OscConfig+0x4a4>)
 8004eba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec0:	f7fc fec6 	bl	8001c50 <HAL_GetTick>
 8004ec4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004ec8:	f7fc fec2 	bl	8001c50 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e260      	b.n	800539c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004eda:	4b70      	ldr	r3, [pc, #448]	@ (800509c <HAL_RCC_OscConfig+0x4a4>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d0f0      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ee6:	4b6d      	ldr	r3, [pc, #436]	@ (800509c <HAL_RCC_OscConfig+0x4a4>)
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	061b      	lsls	r3, r3, #24
 8004ef4:	4969      	ldr	r1, [pc, #420]	@ (800509c <HAL_RCC_OscConfig+0x4a4>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	60cb      	str	r3, [r1, #12]
 8004efa:	e018      	b.n	8004f2e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004efc:	4b67      	ldr	r3, [pc, #412]	@ (800509c <HAL_RCC_OscConfig+0x4a4>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a66      	ldr	r2, [pc, #408]	@ (800509c <HAL_RCC_OscConfig+0x4a4>)
 8004f02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f08:	f7fc fea2 	bl	8001c50 <HAL_GetTick>
 8004f0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f0e:	e008      	b.n	8004f22 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004f10:	f7fc fe9e 	bl	8001c50 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e23c      	b.n	800539c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f22:	4b5e      	ldr	r3, [pc, #376]	@ (800509c <HAL_RCC_OscConfig+0x4a4>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1f0      	bne.n	8004f10 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0308 	and.w	r3, r3, #8
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d036      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d019      	beq.n	8004f76 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f42:	4b56      	ldr	r3, [pc, #344]	@ (800509c <HAL_RCC_OscConfig+0x4a4>)
 8004f44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f46:	4a55      	ldr	r2, [pc, #340]	@ (800509c <HAL_RCC_OscConfig+0x4a4>)
 8004f48:	f043 0301 	orr.w	r3, r3, #1
 8004f4c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f4e:	f7fc fe7f 	bl	8001c50 <HAL_GetTick>
 8004f52:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f54:	e008      	b.n	8004f68 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f56:	f7fc fe7b 	bl	8001c50 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d901      	bls.n	8004f68 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e219      	b.n	800539c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f68:	4b4c      	ldr	r3, [pc, #304]	@ (800509c <HAL_RCC_OscConfig+0x4a4>)
 8004f6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d0f0      	beq.n	8004f56 <HAL_RCC_OscConfig+0x35e>
 8004f74:	e018      	b.n	8004fa8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f76:	4b49      	ldr	r3, [pc, #292]	@ (800509c <HAL_RCC_OscConfig+0x4a4>)
 8004f78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f7a:	4a48      	ldr	r2, [pc, #288]	@ (800509c <HAL_RCC_OscConfig+0x4a4>)
 8004f7c:	f023 0301 	bic.w	r3, r3, #1
 8004f80:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f82:	f7fc fe65 	bl	8001c50 <HAL_GetTick>
 8004f86:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f88:	e008      	b.n	8004f9c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f8a:	f7fc fe61 	bl	8001c50 <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d901      	bls.n	8004f9c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e1ff      	b.n	800539c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f9c:	4b3f      	ldr	r3, [pc, #252]	@ (800509c <HAL_RCC_OscConfig+0x4a4>)
 8004f9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1f0      	bne.n	8004f8a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0320 	and.w	r3, r3, #32
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d036      	beq.n	8005022 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d019      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004fbc:	4b37      	ldr	r3, [pc, #220]	@ (800509c <HAL_RCC_OscConfig+0x4a4>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a36      	ldr	r2, [pc, #216]	@ (800509c <HAL_RCC_OscConfig+0x4a4>)
 8004fc2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004fc6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004fc8:	f7fc fe42 	bl	8001c50 <HAL_GetTick>
 8004fcc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004fce:	e008      	b.n	8004fe2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fd0:	f7fc fe3e 	bl	8001c50 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e1dc      	b.n	800539c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004fe2:	4b2e      	ldr	r3, [pc, #184]	@ (800509c <HAL_RCC_OscConfig+0x4a4>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d0f0      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x3d8>
 8004fee:	e018      	b.n	8005022 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ff0:	4b2a      	ldr	r3, [pc, #168]	@ (800509c <HAL_RCC_OscConfig+0x4a4>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a29      	ldr	r2, [pc, #164]	@ (800509c <HAL_RCC_OscConfig+0x4a4>)
 8004ff6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ffa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004ffc:	f7fc fe28 	bl	8001c50 <HAL_GetTick>
 8005000:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005002:	e008      	b.n	8005016 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005004:	f7fc fe24 	bl	8001c50 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d901      	bls.n	8005016 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e1c2      	b.n	800539c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005016:	4b21      	ldr	r3, [pc, #132]	@ (800509c <HAL_RCC_OscConfig+0x4a4>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1f0      	bne.n	8005004 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0304 	and.w	r3, r3, #4
 800502a:	2b00      	cmp	r3, #0
 800502c:	f000 8086 	beq.w	800513c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005030:	4b1b      	ldr	r3, [pc, #108]	@ (80050a0 <HAL_RCC_OscConfig+0x4a8>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a1a      	ldr	r2, [pc, #104]	@ (80050a0 <HAL_RCC_OscConfig+0x4a8>)
 8005036:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800503a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800503c:	f7fc fe08 	bl	8001c50 <HAL_GetTick>
 8005040:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005042:	e008      	b.n	8005056 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005044:	f7fc fe04 	bl	8001c50 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b64      	cmp	r3, #100	@ 0x64
 8005050:	d901      	bls.n	8005056 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e1a2      	b.n	800539c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005056:	4b12      	ldr	r3, [pc, #72]	@ (80050a0 <HAL_RCC_OscConfig+0x4a8>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800505e:	2b00      	cmp	r3, #0
 8005060:	d0f0      	beq.n	8005044 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d106      	bne.n	8005078 <HAL_RCC_OscConfig+0x480>
 800506a:	4b0c      	ldr	r3, [pc, #48]	@ (800509c <HAL_RCC_OscConfig+0x4a4>)
 800506c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800506e:	4a0b      	ldr	r2, [pc, #44]	@ (800509c <HAL_RCC_OscConfig+0x4a4>)
 8005070:	f043 0301 	orr.w	r3, r3, #1
 8005074:	6713      	str	r3, [r2, #112]	@ 0x70
 8005076:	e032      	b.n	80050de <HAL_RCC_OscConfig+0x4e6>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d111      	bne.n	80050a4 <HAL_RCC_OscConfig+0x4ac>
 8005080:	4b06      	ldr	r3, [pc, #24]	@ (800509c <HAL_RCC_OscConfig+0x4a4>)
 8005082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005084:	4a05      	ldr	r2, [pc, #20]	@ (800509c <HAL_RCC_OscConfig+0x4a4>)
 8005086:	f023 0301 	bic.w	r3, r3, #1
 800508a:	6713      	str	r3, [r2, #112]	@ 0x70
 800508c:	4b03      	ldr	r3, [pc, #12]	@ (800509c <HAL_RCC_OscConfig+0x4a4>)
 800508e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005090:	4a02      	ldr	r2, [pc, #8]	@ (800509c <HAL_RCC_OscConfig+0x4a4>)
 8005092:	f023 0304 	bic.w	r3, r3, #4
 8005096:	6713      	str	r3, [r2, #112]	@ 0x70
 8005098:	e021      	b.n	80050de <HAL_RCC_OscConfig+0x4e6>
 800509a:	bf00      	nop
 800509c:	58024400 	.word	0x58024400
 80050a0:	58024800 	.word	0x58024800
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	2b05      	cmp	r3, #5
 80050aa:	d10c      	bne.n	80050c6 <HAL_RCC_OscConfig+0x4ce>
 80050ac:	4b83      	ldr	r3, [pc, #524]	@ (80052bc <HAL_RCC_OscConfig+0x6c4>)
 80050ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050b0:	4a82      	ldr	r2, [pc, #520]	@ (80052bc <HAL_RCC_OscConfig+0x6c4>)
 80050b2:	f043 0304 	orr.w	r3, r3, #4
 80050b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80050b8:	4b80      	ldr	r3, [pc, #512]	@ (80052bc <HAL_RCC_OscConfig+0x6c4>)
 80050ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050bc:	4a7f      	ldr	r2, [pc, #508]	@ (80052bc <HAL_RCC_OscConfig+0x6c4>)
 80050be:	f043 0301 	orr.w	r3, r3, #1
 80050c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80050c4:	e00b      	b.n	80050de <HAL_RCC_OscConfig+0x4e6>
 80050c6:	4b7d      	ldr	r3, [pc, #500]	@ (80052bc <HAL_RCC_OscConfig+0x6c4>)
 80050c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ca:	4a7c      	ldr	r2, [pc, #496]	@ (80052bc <HAL_RCC_OscConfig+0x6c4>)
 80050cc:	f023 0301 	bic.w	r3, r3, #1
 80050d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80050d2:	4b7a      	ldr	r3, [pc, #488]	@ (80052bc <HAL_RCC_OscConfig+0x6c4>)
 80050d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050d6:	4a79      	ldr	r2, [pc, #484]	@ (80052bc <HAL_RCC_OscConfig+0x6c4>)
 80050d8:	f023 0304 	bic.w	r3, r3, #4
 80050dc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d015      	beq.n	8005112 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e6:	f7fc fdb3 	bl	8001c50 <HAL_GetTick>
 80050ea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050ec:	e00a      	b.n	8005104 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ee:	f7fc fdaf 	bl	8001c50 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d901      	bls.n	8005104 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e14b      	b.n	800539c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005104:	4b6d      	ldr	r3, [pc, #436]	@ (80052bc <HAL_RCC_OscConfig+0x6c4>)
 8005106:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005108:	f003 0302 	and.w	r3, r3, #2
 800510c:	2b00      	cmp	r3, #0
 800510e:	d0ee      	beq.n	80050ee <HAL_RCC_OscConfig+0x4f6>
 8005110:	e014      	b.n	800513c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005112:	f7fc fd9d 	bl	8001c50 <HAL_GetTick>
 8005116:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005118:	e00a      	b.n	8005130 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800511a:	f7fc fd99 	bl	8001c50 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005128:	4293      	cmp	r3, r2
 800512a:	d901      	bls.n	8005130 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e135      	b.n	800539c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005130:	4b62      	ldr	r3, [pc, #392]	@ (80052bc <HAL_RCC_OscConfig+0x6c4>)
 8005132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1ee      	bne.n	800511a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005140:	2b00      	cmp	r3, #0
 8005142:	f000 812a 	beq.w	800539a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005146:	4b5d      	ldr	r3, [pc, #372]	@ (80052bc <HAL_RCC_OscConfig+0x6c4>)
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800514e:	2b18      	cmp	r3, #24
 8005150:	f000 80ba 	beq.w	80052c8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005158:	2b02      	cmp	r3, #2
 800515a:	f040 8095 	bne.w	8005288 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800515e:	4b57      	ldr	r3, [pc, #348]	@ (80052bc <HAL_RCC_OscConfig+0x6c4>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a56      	ldr	r2, [pc, #344]	@ (80052bc <HAL_RCC_OscConfig+0x6c4>)
 8005164:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005168:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800516a:	f7fc fd71 	bl	8001c50 <HAL_GetTick>
 800516e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005170:	e008      	b.n	8005184 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005172:	f7fc fd6d 	bl	8001c50 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	2b02      	cmp	r3, #2
 800517e:	d901      	bls.n	8005184 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e10b      	b.n	800539c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005184:	4b4d      	ldr	r3, [pc, #308]	@ (80052bc <HAL_RCC_OscConfig+0x6c4>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d1f0      	bne.n	8005172 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005190:	4b4a      	ldr	r3, [pc, #296]	@ (80052bc <HAL_RCC_OscConfig+0x6c4>)
 8005192:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005194:	4b4a      	ldr	r3, [pc, #296]	@ (80052c0 <HAL_RCC_OscConfig+0x6c8>)
 8005196:	4013      	ands	r3, r2
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80051a0:	0112      	lsls	r2, r2, #4
 80051a2:	430a      	orrs	r2, r1
 80051a4:	4945      	ldr	r1, [pc, #276]	@ (80052bc <HAL_RCC_OscConfig+0x6c4>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	628b      	str	r3, [r1, #40]	@ 0x28
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ae:	3b01      	subs	r3, #1
 80051b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051b8:	3b01      	subs	r3, #1
 80051ba:	025b      	lsls	r3, r3, #9
 80051bc:	b29b      	uxth	r3, r3
 80051be:	431a      	orrs	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c4:	3b01      	subs	r3, #1
 80051c6:	041b      	lsls	r3, r3, #16
 80051c8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80051cc:	431a      	orrs	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051d2:	3b01      	subs	r3, #1
 80051d4:	061b      	lsls	r3, r3, #24
 80051d6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80051da:	4938      	ldr	r1, [pc, #224]	@ (80052bc <HAL_RCC_OscConfig+0x6c4>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80051e0:	4b36      	ldr	r3, [pc, #216]	@ (80052bc <HAL_RCC_OscConfig+0x6c4>)
 80051e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e4:	4a35      	ldr	r2, [pc, #212]	@ (80052bc <HAL_RCC_OscConfig+0x6c4>)
 80051e6:	f023 0301 	bic.w	r3, r3, #1
 80051ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80051ec:	4b33      	ldr	r3, [pc, #204]	@ (80052bc <HAL_RCC_OscConfig+0x6c4>)
 80051ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051f0:	4b34      	ldr	r3, [pc, #208]	@ (80052c4 <HAL_RCC_OscConfig+0x6cc>)
 80051f2:	4013      	ands	r3, r2
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80051f8:	00d2      	lsls	r2, r2, #3
 80051fa:	4930      	ldr	r1, [pc, #192]	@ (80052bc <HAL_RCC_OscConfig+0x6c4>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005200:	4b2e      	ldr	r3, [pc, #184]	@ (80052bc <HAL_RCC_OscConfig+0x6c4>)
 8005202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005204:	f023 020c 	bic.w	r2, r3, #12
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800520c:	492b      	ldr	r1, [pc, #172]	@ (80052bc <HAL_RCC_OscConfig+0x6c4>)
 800520e:	4313      	orrs	r3, r2
 8005210:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005212:	4b2a      	ldr	r3, [pc, #168]	@ (80052bc <HAL_RCC_OscConfig+0x6c4>)
 8005214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005216:	f023 0202 	bic.w	r2, r3, #2
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800521e:	4927      	ldr	r1, [pc, #156]	@ (80052bc <HAL_RCC_OscConfig+0x6c4>)
 8005220:	4313      	orrs	r3, r2
 8005222:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005224:	4b25      	ldr	r3, [pc, #148]	@ (80052bc <HAL_RCC_OscConfig+0x6c4>)
 8005226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005228:	4a24      	ldr	r2, [pc, #144]	@ (80052bc <HAL_RCC_OscConfig+0x6c4>)
 800522a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800522e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005230:	4b22      	ldr	r3, [pc, #136]	@ (80052bc <HAL_RCC_OscConfig+0x6c4>)
 8005232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005234:	4a21      	ldr	r2, [pc, #132]	@ (80052bc <HAL_RCC_OscConfig+0x6c4>)
 8005236:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800523a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800523c:	4b1f      	ldr	r3, [pc, #124]	@ (80052bc <HAL_RCC_OscConfig+0x6c4>)
 800523e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005240:	4a1e      	ldr	r2, [pc, #120]	@ (80052bc <HAL_RCC_OscConfig+0x6c4>)
 8005242:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005246:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005248:	4b1c      	ldr	r3, [pc, #112]	@ (80052bc <HAL_RCC_OscConfig+0x6c4>)
 800524a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800524c:	4a1b      	ldr	r2, [pc, #108]	@ (80052bc <HAL_RCC_OscConfig+0x6c4>)
 800524e:	f043 0301 	orr.w	r3, r3, #1
 8005252:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005254:	4b19      	ldr	r3, [pc, #100]	@ (80052bc <HAL_RCC_OscConfig+0x6c4>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a18      	ldr	r2, [pc, #96]	@ (80052bc <HAL_RCC_OscConfig+0x6c4>)
 800525a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800525e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005260:	f7fc fcf6 	bl	8001c50 <HAL_GetTick>
 8005264:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005268:	f7fc fcf2 	bl	8001c50 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b02      	cmp	r3, #2
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e090      	b.n	800539c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800527a:	4b10      	ldr	r3, [pc, #64]	@ (80052bc <HAL_RCC_OscConfig+0x6c4>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d0f0      	beq.n	8005268 <HAL_RCC_OscConfig+0x670>
 8005286:	e088      	b.n	800539a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005288:	4b0c      	ldr	r3, [pc, #48]	@ (80052bc <HAL_RCC_OscConfig+0x6c4>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a0b      	ldr	r2, [pc, #44]	@ (80052bc <HAL_RCC_OscConfig+0x6c4>)
 800528e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005292:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005294:	f7fc fcdc 	bl	8001c50 <HAL_GetTick>
 8005298:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800529a:	e008      	b.n	80052ae <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800529c:	f7fc fcd8 	bl	8001c50 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d901      	bls.n	80052ae <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e076      	b.n	800539c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052ae:	4b03      	ldr	r3, [pc, #12]	@ (80052bc <HAL_RCC_OscConfig+0x6c4>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1f0      	bne.n	800529c <HAL_RCC_OscConfig+0x6a4>
 80052ba:	e06e      	b.n	800539a <HAL_RCC_OscConfig+0x7a2>
 80052bc:	58024400 	.word	0x58024400
 80052c0:	fffffc0c 	.word	0xfffffc0c
 80052c4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80052c8:	4b36      	ldr	r3, [pc, #216]	@ (80053a4 <HAL_RCC_OscConfig+0x7ac>)
 80052ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052cc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80052ce:	4b35      	ldr	r3, [pc, #212]	@ (80053a4 <HAL_RCC_OscConfig+0x7ac>)
 80052d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052d2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d031      	beq.n	8005340 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	f003 0203 	and.w	r2, r3, #3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d12a      	bne.n	8005340 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	091b      	lsrs	r3, r3, #4
 80052ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d122      	bne.n	8005340 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005304:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005306:	429a      	cmp	r2, r3
 8005308:	d11a      	bne.n	8005340 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	0a5b      	lsrs	r3, r3, #9
 800530e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005316:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005318:	429a      	cmp	r2, r3
 800531a:	d111      	bne.n	8005340 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	0c1b      	lsrs	r3, r3, #16
 8005320:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005328:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800532a:	429a      	cmp	r2, r3
 800532c:	d108      	bne.n	8005340 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	0e1b      	lsrs	r3, r3, #24
 8005332:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800533a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800533c:	429a      	cmp	r2, r3
 800533e:	d001      	beq.n	8005344 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e02b      	b.n	800539c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005344:	4b17      	ldr	r3, [pc, #92]	@ (80053a4 <HAL_RCC_OscConfig+0x7ac>)
 8005346:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005348:	08db      	lsrs	r3, r3, #3
 800534a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800534e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	429a      	cmp	r2, r3
 8005358:	d01f      	beq.n	800539a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800535a:	4b12      	ldr	r3, [pc, #72]	@ (80053a4 <HAL_RCC_OscConfig+0x7ac>)
 800535c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800535e:	4a11      	ldr	r2, [pc, #68]	@ (80053a4 <HAL_RCC_OscConfig+0x7ac>)
 8005360:	f023 0301 	bic.w	r3, r3, #1
 8005364:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005366:	f7fc fc73 	bl	8001c50 <HAL_GetTick>
 800536a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800536c:	bf00      	nop
 800536e:	f7fc fc6f 	bl	8001c50 <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005376:	4293      	cmp	r3, r2
 8005378:	d0f9      	beq.n	800536e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800537a:	4b0a      	ldr	r3, [pc, #40]	@ (80053a4 <HAL_RCC_OscConfig+0x7ac>)
 800537c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800537e:	4b0a      	ldr	r3, [pc, #40]	@ (80053a8 <HAL_RCC_OscConfig+0x7b0>)
 8005380:	4013      	ands	r3, r2
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005386:	00d2      	lsls	r2, r2, #3
 8005388:	4906      	ldr	r1, [pc, #24]	@ (80053a4 <HAL_RCC_OscConfig+0x7ac>)
 800538a:	4313      	orrs	r3, r2
 800538c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800538e:	4b05      	ldr	r3, [pc, #20]	@ (80053a4 <HAL_RCC_OscConfig+0x7ac>)
 8005390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005392:	4a04      	ldr	r2, [pc, #16]	@ (80053a4 <HAL_RCC_OscConfig+0x7ac>)
 8005394:	f043 0301 	orr.w	r3, r3, #1
 8005398:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3730      	adds	r7, #48	@ 0x30
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	58024400 	.word	0x58024400
 80053a8:	ffff0007 	.word	0xffff0007

080053ac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e19c      	b.n	80056fa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053c0:	4b8a      	ldr	r3, [pc, #552]	@ (80055ec <HAL_RCC_ClockConfig+0x240>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 030f 	and.w	r3, r3, #15
 80053c8:	683a      	ldr	r2, [r7, #0]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d910      	bls.n	80053f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ce:	4b87      	ldr	r3, [pc, #540]	@ (80055ec <HAL_RCC_ClockConfig+0x240>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f023 020f 	bic.w	r2, r3, #15
 80053d6:	4985      	ldr	r1, [pc, #532]	@ (80055ec <HAL_RCC_ClockConfig+0x240>)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	4313      	orrs	r3, r2
 80053dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053de:	4b83      	ldr	r3, [pc, #524]	@ (80055ec <HAL_RCC_ClockConfig+0x240>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 030f 	and.w	r3, r3, #15
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d001      	beq.n	80053f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e184      	b.n	80056fa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0304 	and.w	r3, r3, #4
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d010      	beq.n	800541e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	691a      	ldr	r2, [r3, #16]
 8005400:	4b7b      	ldr	r3, [pc, #492]	@ (80055f0 <HAL_RCC_ClockConfig+0x244>)
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005408:	429a      	cmp	r2, r3
 800540a:	d908      	bls.n	800541e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800540c:	4b78      	ldr	r3, [pc, #480]	@ (80055f0 <HAL_RCC_ClockConfig+0x244>)
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	4975      	ldr	r1, [pc, #468]	@ (80055f0 <HAL_RCC_ClockConfig+0x244>)
 800541a:	4313      	orrs	r3, r2
 800541c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0308 	and.w	r3, r3, #8
 8005426:	2b00      	cmp	r3, #0
 8005428:	d010      	beq.n	800544c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	695a      	ldr	r2, [r3, #20]
 800542e:	4b70      	ldr	r3, [pc, #448]	@ (80055f0 <HAL_RCC_ClockConfig+0x244>)
 8005430:	69db      	ldr	r3, [r3, #28]
 8005432:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005436:	429a      	cmp	r2, r3
 8005438:	d908      	bls.n	800544c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800543a:	4b6d      	ldr	r3, [pc, #436]	@ (80055f0 <HAL_RCC_ClockConfig+0x244>)
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	496a      	ldr	r1, [pc, #424]	@ (80055f0 <HAL_RCC_ClockConfig+0x244>)
 8005448:	4313      	orrs	r3, r2
 800544a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0310 	and.w	r3, r3, #16
 8005454:	2b00      	cmp	r3, #0
 8005456:	d010      	beq.n	800547a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	699a      	ldr	r2, [r3, #24]
 800545c:	4b64      	ldr	r3, [pc, #400]	@ (80055f0 <HAL_RCC_ClockConfig+0x244>)
 800545e:	69db      	ldr	r3, [r3, #28]
 8005460:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005464:	429a      	cmp	r2, r3
 8005466:	d908      	bls.n	800547a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005468:	4b61      	ldr	r3, [pc, #388]	@ (80055f0 <HAL_RCC_ClockConfig+0x244>)
 800546a:	69db      	ldr	r3, [r3, #28]
 800546c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	495e      	ldr	r1, [pc, #376]	@ (80055f0 <HAL_RCC_ClockConfig+0x244>)
 8005476:	4313      	orrs	r3, r2
 8005478:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0320 	and.w	r3, r3, #32
 8005482:	2b00      	cmp	r3, #0
 8005484:	d010      	beq.n	80054a8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	69da      	ldr	r2, [r3, #28]
 800548a:	4b59      	ldr	r3, [pc, #356]	@ (80055f0 <HAL_RCC_ClockConfig+0x244>)
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005492:	429a      	cmp	r2, r3
 8005494:	d908      	bls.n	80054a8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005496:	4b56      	ldr	r3, [pc, #344]	@ (80055f0 <HAL_RCC_ClockConfig+0x244>)
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	4953      	ldr	r1, [pc, #332]	@ (80055f0 <HAL_RCC_ClockConfig+0x244>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0302 	and.w	r3, r3, #2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d010      	beq.n	80054d6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68da      	ldr	r2, [r3, #12]
 80054b8:	4b4d      	ldr	r3, [pc, #308]	@ (80055f0 <HAL_RCC_ClockConfig+0x244>)
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	f003 030f 	and.w	r3, r3, #15
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d908      	bls.n	80054d6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054c4:	4b4a      	ldr	r3, [pc, #296]	@ (80055f0 <HAL_RCC_ClockConfig+0x244>)
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	f023 020f 	bic.w	r2, r3, #15
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	4947      	ldr	r1, [pc, #284]	@ (80055f0 <HAL_RCC_ClockConfig+0x244>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d055      	beq.n	800558e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80054e2:	4b43      	ldr	r3, [pc, #268]	@ (80055f0 <HAL_RCC_ClockConfig+0x244>)
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	4940      	ldr	r1, [pc, #256]	@ (80055f0 <HAL_RCC_ClockConfig+0x244>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d107      	bne.n	800550c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054fc:	4b3c      	ldr	r3, [pc, #240]	@ (80055f0 <HAL_RCC_ClockConfig+0x244>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d121      	bne.n	800554c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e0f6      	b.n	80056fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	2b03      	cmp	r3, #3
 8005512:	d107      	bne.n	8005524 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005514:	4b36      	ldr	r3, [pc, #216]	@ (80055f0 <HAL_RCC_ClockConfig+0x244>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d115      	bne.n	800554c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e0ea      	b.n	80056fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d107      	bne.n	800553c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800552c:	4b30      	ldr	r3, [pc, #192]	@ (80055f0 <HAL_RCC_ClockConfig+0x244>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005534:	2b00      	cmp	r3, #0
 8005536:	d109      	bne.n	800554c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e0de      	b.n	80056fa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800553c:	4b2c      	ldr	r3, [pc, #176]	@ (80055f0 <HAL_RCC_ClockConfig+0x244>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0304 	and.w	r3, r3, #4
 8005544:	2b00      	cmp	r3, #0
 8005546:	d101      	bne.n	800554c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e0d6      	b.n	80056fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800554c:	4b28      	ldr	r3, [pc, #160]	@ (80055f0 <HAL_RCC_ClockConfig+0x244>)
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	f023 0207 	bic.w	r2, r3, #7
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	4925      	ldr	r1, [pc, #148]	@ (80055f0 <HAL_RCC_ClockConfig+0x244>)
 800555a:	4313      	orrs	r3, r2
 800555c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800555e:	f7fc fb77 	bl	8001c50 <HAL_GetTick>
 8005562:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005564:	e00a      	b.n	800557c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005566:	f7fc fb73 	bl	8001c50 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005574:	4293      	cmp	r3, r2
 8005576:	d901      	bls.n	800557c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e0be      	b.n	80056fa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800557c:	4b1c      	ldr	r3, [pc, #112]	@ (80055f0 <HAL_RCC_ClockConfig+0x244>)
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	00db      	lsls	r3, r3, #3
 800558a:	429a      	cmp	r2, r3
 800558c:	d1eb      	bne.n	8005566 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d010      	beq.n	80055bc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68da      	ldr	r2, [r3, #12]
 800559e:	4b14      	ldr	r3, [pc, #80]	@ (80055f0 <HAL_RCC_ClockConfig+0x244>)
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	f003 030f 	and.w	r3, r3, #15
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d208      	bcs.n	80055bc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055aa:	4b11      	ldr	r3, [pc, #68]	@ (80055f0 <HAL_RCC_ClockConfig+0x244>)
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	f023 020f 	bic.w	r2, r3, #15
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	490e      	ldr	r1, [pc, #56]	@ (80055f0 <HAL_RCC_ClockConfig+0x244>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055bc:	4b0b      	ldr	r3, [pc, #44]	@ (80055ec <HAL_RCC_ClockConfig+0x240>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 030f 	and.w	r3, r3, #15
 80055c4:	683a      	ldr	r2, [r7, #0]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d214      	bcs.n	80055f4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ca:	4b08      	ldr	r3, [pc, #32]	@ (80055ec <HAL_RCC_ClockConfig+0x240>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f023 020f 	bic.w	r2, r3, #15
 80055d2:	4906      	ldr	r1, [pc, #24]	@ (80055ec <HAL_RCC_ClockConfig+0x240>)
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055da:	4b04      	ldr	r3, [pc, #16]	@ (80055ec <HAL_RCC_ClockConfig+0x240>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 030f 	and.w	r3, r3, #15
 80055e2:	683a      	ldr	r2, [r7, #0]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d005      	beq.n	80055f4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e086      	b.n	80056fa <HAL_RCC_ClockConfig+0x34e>
 80055ec:	52002000 	.word	0x52002000
 80055f0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0304 	and.w	r3, r3, #4
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d010      	beq.n	8005622 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	691a      	ldr	r2, [r3, #16]
 8005604:	4b3f      	ldr	r3, [pc, #252]	@ (8005704 <HAL_RCC_ClockConfig+0x358>)
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800560c:	429a      	cmp	r2, r3
 800560e:	d208      	bcs.n	8005622 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005610:	4b3c      	ldr	r3, [pc, #240]	@ (8005704 <HAL_RCC_ClockConfig+0x358>)
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	4939      	ldr	r1, [pc, #228]	@ (8005704 <HAL_RCC_ClockConfig+0x358>)
 800561e:	4313      	orrs	r3, r2
 8005620:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0308 	and.w	r3, r3, #8
 800562a:	2b00      	cmp	r3, #0
 800562c:	d010      	beq.n	8005650 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	695a      	ldr	r2, [r3, #20]
 8005632:	4b34      	ldr	r3, [pc, #208]	@ (8005704 <HAL_RCC_ClockConfig+0x358>)
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800563a:	429a      	cmp	r2, r3
 800563c:	d208      	bcs.n	8005650 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800563e:	4b31      	ldr	r3, [pc, #196]	@ (8005704 <HAL_RCC_ClockConfig+0x358>)
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	492e      	ldr	r1, [pc, #184]	@ (8005704 <HAL_RCC_ClockConfig+0x358>)
 800564c:	4313      	orrs	r3, r2
 800564e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0310 	and.w	r3, r3, #16
 8005658:	2b00      	cmp	r3, #0
 800565a:	d010      	beq.n	800567e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	699a      	ldr	r2, [r3, #24]
 8005660:	4b28      	ldr	r3, [pc, #160]	@ (8005704 <HAL_RCC_ClockConfig+0x358>)
 8005662:	69db      	ldr	r3, [r3, #28]
 8005664:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005668:	429a      	cmp	r2, r3
 800566a:	d208      	bcs.n	800567e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800566c:	4b25      	ldr	r3, [pc, #148]	@ (8005704 <HAL_RCC_ClockConfig+0x358>)
 800566e:	69db      	ldr	r3, [r3, #28]
 8005670:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	4922      	ldr	r1, [pc, #136]	@ (8005704 <HAL_RCC_ClockConfig+0x358>)
 800567a:	4313      	orrs	r3, r2
 800567c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0320 	and.w	r3, r3, #32
 8005686:	2b00      	cmp	r3, #0
 8005688:	d010      	beq.n	80056ac <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	69da      	ldr	r2, [r3, #28]
 800568e:	4b1d      	ldr	r3, [pc, #116]	@ (8005704 <HAL_RCC_ClockConfig+0x358>)
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005696:	429a      	cmp	r2, r3
 8005698:	d208      	bcs.n	80056ac <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800569a:	4b1a      	ldr	r3, [pc, #104]	@ (8005704 <HAL_RCC_ClockConfig+0x358>)
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	69db      	ldr	r3, [r3, #28]
 80056a6:	4917      	ldr	r1, [pc, #92]	@ (8005704 <HAL_RCC_ClockConfig+0x358>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80056ac:	f000 f834 	bl	8005718 <HAL_RCC_GetSysClockFreq>
 80056b0:	4602      	mov	r2, r0
 80056b2:	4b14      	ldr	r3, [pc, #80]	@ (8005704 <HAL_RCC_ClockConfig+0x358>)
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	0a1b      	lsrs	r3, r3, #8
 80056b8:	f003 030f 	and.w	r3, r3, #15
 80056bc:	4912      	ldr	r1, [pc, #72]	@ (8005708 <HAL_RCC_ClockConfig+0x35c>)
 80056be:	5ccb      	ldrb	r3, [r1, r3]
 80056c0:	f003 031f 	and.w	r3, r3, #31
 80056c4:	fa22 f303 	lsr.w	r3, r2, r3
 80056c8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80056ca:	4b0e      	ldr	r3, [pc, #56]	@ (8005704 <HAL_RCC_ClockConfig+0x358>)
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	f003 030f 	and.w	r3, r3, #15
 80056d2:	4a0d      	ldr	r2, [pc, #52]	@ (8005708 <HAL_RCC_ClockConfig+0x35c>)
 80056d4:	5cd3      	ldrb	r3, [r2, r3]
 80056d6:	f003 031f 	and.w	r3, r3, #31
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	fa22 f303 	lsr.w	r3, r2, r3
 80056e0:	4a0a      	ldr	r2, [pc, #40]	@ (800570c <HAL_RCC_ClockConfig+0x360>)
 80056e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80056e4:	4a0a      	ldr	r2, [pc, #40]	@ (8005710 <HAL_RCC_ClockConfig+0x364>)
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80056ea:	4b0a      	ldr	r3, [pc, #40]	@ (8005714 <HAL_RCC_ClockConfig+0x368>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7fc fa64 	bl	8001bbc <HAL_InitTick>
 80056f4:	4603      	mov	r3, r0
 80056f6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80056f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3718      	adds	r7, #24
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	58024400 	.word	0x58024400
 8005708:	0800d6bc 	.word	0x0800d6bc
 800570c:	24000004 	.word	0x24000004
 8005710:	24000000 	.word	0x24000000
 8005714:	24000008 	.word	0x24000008

08005718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005718:	b480      	push	{r7}
 800571a:	b089      	sub	sp, #36	@ 0x24
 800571c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800571e:	4bb3      	ldr	r3, [pc, #716]	@ (80059ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005726:	2b18      	cmp	r3, #24
 8005728:	f200 8155 	bhi.w	80059d6 <HAL_RCC_GetSysClockFreq+0x2be>
 800572c:	a201      	add	r2, pc, #4	@ (adr r2, 8005734 <HAL_RCC_GetSysClockFreq+0x1c>)
 800572e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005732:	bf00      	nop
 8005734:	08005799 	.word	0x08005799
 8005738:	080059d7 	.word	0x080059d7
 800573c:	080059d7 	.word	0x080059d7
 8005740:	080059d7 	.word	0x080059d7
 8005744:	080059d7 	.word	0x080059d7
 8005748:	080059d7 	.word	0x080059d7
 800574c:	080059d7 	.word	0x080059d7
 8005750:	080059d7 	.word	0x080059d7
 8005754:	080057bf 	.word	0x080057bf
 8005758:	080059d7 	.word	0x080059d7
 800575c:	080059d7 	.word	0x080059d7
 8005760:	080059d7 	.word	0x080059d7
 8005764:	080059d7 	.word	0x080059d7
 8005768:	080059d7 	.word	0x080059d7
 800576c:	080059d7 	.word	0x080059d7
 8005770:	080059d7 	.word	0x080059d7
 8005774:	080057c5 	.word	0x080057c5
 8005778:	080059d7 	.word	0x080059d7
 800577c:	080059d7 	.word	0x080059d7
 8005780:	080059d7 	.word	0x080059d7
 8005784:	080059d7 	.word	0x080059d7
 8005788:	080059d7 	.word	0x080059d7
 800578c:	080059d7 	.word	0x080059d7
 8005790:	080059d7 	.word	0x080059d7
 8005794:	080057cb 	.word	0x080057cb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005798:	4b94      	ldr	r3, [pc, #592]	@ (80059ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0320 	and.w	r3, r3, #32
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d009      	beq.n	80057b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057a4:	4b91      	ldr	r3, [pc, #580]	@ (80059ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	08db      	lsrs	r3, r3, #3
 80057aa:	f003 0303 	and.w	r3, r3, #3
 80057ae:	4a90      	ldr	r2, [pc, #576]	@ (80059f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057b0:	fa22 f303 	lsr.w	r3, r2, r3
 80057b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80057b6:	e111      	b.n	80059dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80057b8:	4b8d      	ldr	r3, [pc, #564]	@ (80059f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057ba:	61bb      	str	r3, [r7, #24]
      break;
 80057bc:	e10e      	b.n	80059dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80057be:	4b8d      	ldr	r3, [pc, #564]	@ (80059f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80057c0:	61bb      	str	r3, [r7, #24]
      break;
 80057c2:	e10b      	b.n	80059dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80057c4:	4b8c      	ldr	r3, [pc, #560]	@ (80059f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80057c6:	61bb      	str	r3, [r7, #24]
      break;
 80057c8:	e108      	b.n	80059dc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80057ca:	4b88      	ldr	r3, [pc, #544]	@ (80059ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ce:	f003 0303 	and.w	r3, r3, #3
 80057d2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80057d4:	4b85      	ldr	r3, [pc, #532]	@ (80059ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057d8:	091b      	lsrs	r3, r3, #4
 80057da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057de:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80057e0:	4b82      	ldr	r3, [pc, #520]	@ (80059ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e4:	f003 0301 	and.w	r3, r3, #1
 80057e8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80057ea:	4b80      	ldr	r3, [pc, #512]	@ (80059ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057ee:	08db      	lsrs	r3, r3, #3
 80057f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	fb02 f303 	mul.w	r3, r2, r3
 80057fa:	ee07 3a90 	vmov	s15, r3
 80057fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005802:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	2b00      	cmp	r3, #0
 800580a:	f000 80e1 	beq.w	80059d0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	2b02      	cmp	r3, #2
 8005812:	f000 8083 	beq.w	800591c <HAL_RCC_GetSysClockFreq+0x204>
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2b02      	cmp	r3, #2
 800581a:	f200 80a1 	bhi.w	8005960 <HAL_RCC_GetSysClockFreq+0x248>
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d003      	beq.n	800582c <HAL_RCC_GetSysClockFreq+0x114>
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d056      	beq.n	80058d8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800582a:	e099      	b.n	8005960 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800582c:	4b6f      	ldr	r3, [pc, #444]	@ (80059ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0320 	and.w	r3, r3, #32
 8005834:	2b00      	cmp	r3, #0
 8005836:	d02d      	beq.n	8005894 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005838:	4b6c      	ldr	r3, [pc, #432]	@ (80059ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	08db      	lsrs	r3, r3, #3
 800583e:	f003 0303 	and.w	r3, r3, #3
 8005842:	4a6b      	ldr	r2, [pc, #428]	@ (80059f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005844:	fa22 f303 	lsr.w	r3, r2, r3
 8005848:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	ee07 3a90 	vmov	s15, r3
 8005850:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	ee07 3a90 	vmov	s15, r3
 800585a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800585e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005862:	4b62      	ldr	r3, [pc, #392]	@ (80059ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800586a:	ee07 3a90 	vmov	s15, r3
 800586e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005872:	ed97 6a02 	vldr	s12, [r7, #8]
 8005876:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80059fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800587a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800587e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005882:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800588a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800588e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005892:	e087      	b.n	80059a4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	ee07 3a90 	vmov	s15, r3
 800589a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800589e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005a00 <HAL_RCC_GetSysClockFreq+0x2e8>
 80058a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058a6:	4b51      	ldr	r3, [pc, #324]	@ (80059ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ae:	ee07 3a90 	vmov	s15, r3
 80058b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80058ba:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80059fc <HAL_RCC_GetSysClockFreq+0x2e4>
 80058be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058d6:	e065      	b.n	80059a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	ee07 3a90 	vmov	s15, r3
 80058de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058e2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005a04 <HAL_RCC_GetSysClockFreq+0x2ec>
 80058e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ea:	4b40      	ldr	r3, [pc, #256]	@ (80059ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058f2:	ee07 3a90 	vmov	s15, r3
 80058f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80058fe:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80059fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800590a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800590e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005916:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800591a:	e043      	b.n	80059a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	ee07 3a90 	vmov	s15, r3
 8005922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005926:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005a08 <HAL_RCC_GetSysClockFreq+0x2f0>
 800592a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800592e:	4b2f      	ldr	r3, [pc, #188]	@ (80059ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005936:	ee07 3a90 	vmov	s15, r3
 800593a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800593e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005942:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80059fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800594a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800594e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800595a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800595e:	e021      	b.n	80059a4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	ee07 3a90 	vmov	s15, r3
 8005966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800596a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005a04 <HAL_RCC_GetSysClockFreq+0x2ec>
 800596e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005972:	4b1e      	ldr	r3, [pc, #120]	@ (80059ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800597a:	ee07 3a90 	vmov	s15, r3
 800597e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005982:	ed97 6a02 	vldr	s12, [r7, #8]
 8005986:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80059fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800598a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800598e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005992:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800599a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800599e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80059a2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80059a4:	4b11      	ldr	r3, [pc, #68]	@ (80059ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059a8:	0a5b      	lsrs	r3, r3, #9
 80059aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059ae:	3301      	adds	r3, #1
 80059b0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	ee07 3a90 	vmov	s15, r3
 80059b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80059bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80059c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059c8:	ee17 3a90 	vmov	r3, s15
 80059cc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80059ce:	e005      	b.n	80059dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80059d0:	2300      	movs	r3, #0
 80059d2:	61bb      	str	r3, [r7, #24]
      break;
 80059d4:	e002      	b.n	80059dc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80059d6:	4b07      	ldr	r3, [pc, #28]	@ (80059f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80059d8:	61bb      	str	r3, [r7, #24]
      break;
 80059da:	bf00      	nop
  }

  return sysclockfreq;
 80059dc:	69bb      	ldr	r3, [r7, #24]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3724      	adds	r7, #36	@ 0x24
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	58024400 	.word	0x58024400
 80059f0:	03d09000 	.word	0x03d09000
 80059f4:	003d0900 	.word	0x003d0900
 80059f8:	017d7840 	.word	0x017d7840
 80059fc:	46000000 	.word	0x46000000
 8005a00:	4c742400 	.word	0x4c742400
 8005a04:	4a742400 	.word	0x4a742400
 8005a08:	4bbebc20 	.word	0x4bbebc20

08005a0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005a12:	f7ff fe81 	bl	8005718 <HAL_RCC_GetSysClockFreq>
 8005a16:	4602      	mov	r2, r0
 8005a18:	4b10      	ldr	r3, [pc, #64]	@ (8005a5c <HAL_RCC_GetHCLKFreq+0x50>)
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	0a1b      	lsrs	r3, r3, #8
 8005a1e:	f003 030f 	and.w	r3, r3, #15
 8005a22:	490f      	ldr	r1, [pc, #60]	@ (8005a60 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a24:	5ccb      	ldrb	r3, [r1, r3]
 8005a26:	f003 031f 	and.w	r3, r3, #31
 8005a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a2e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a30:	4b0a      	ldr	r3, [pc, #40]	@ (8005a5c <HAL_RCC_GetHCLKFreq+0x50>)
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	f003 030f 	and.w	r3, r3, #15
 8005a38:	4a09      	ldr	r2, [pc, #36]	@ (8005a60 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a3a:	5cd3      	ldrb	r3, [r2, r3]
 8005a3c:	f003 031f 	and.w	r3, r3, #31
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	fa22 f303 	lsr.w	r3, r2, r3
 8005a46:	4a07      	ldr	r2, [pc, #28]	@ (8005a64 <HAL_RCC_GetHCLKFreq+0x58>)
 8005a48:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a4a:	4a07      	ldr	r2, [pc, #28]	@ (8005a68 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005a50:	4b04      	ldr	r3, [pc, #16]	@ (8005a64 <HAL_RCC_GetHCLKFreq+0x58>)
 8005a52:	681b      	ldr	r3, [r3, #0]
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3708      	adds	r7, #8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	58024400 	.word	0x58024400
 8005a60:	0800d6bc 	.word	0x0800d6bc
 8005a64:	24000004 	.word	0x24000004
 8005a68:	24000000 	.word	0x24000000

08005a6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005a70:	f7ff ffcc 	bl	8005a0c <HAL_RCC_GetHCLKFreq>
 8005a74:	4602      	mov	r2, r0
 8005a76:	4b06      	ldr	r3, [pc, #24]	@ (8005a90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	091b      	lsrs	r3, r3, #4
 8005a7c:	f003 0307 	and.w	r3, r3, #7
 8005a80:	4904      	ldr	r1, [pc, #16]	@ (8005a94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a82:	5ccb      	ldrb	r3, [r1, r3]
 8005a84:	f003 031f 	and.w	r3, r3, #31
 8005a88:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	58024400 	.word	0x58024400
 8005a94:	0800d6bc 	.word	0x0800d6bc

08005a98 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a9c:	b0c6      	sub	sp, #280	@ 0x118
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005aaa:	2300      	movs	r3, #0
 8005aac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005abc:	2500      	movs	r5, #0
 8005abe:	ea54 0305 	orrs.w	r3, r4, r5
 8005ac2:	d049      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ac8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005aca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005ace:	d02f      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005ad0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005ad4:	d828      	bhi.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005ad6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ada:	d01a      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005adc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ae0:	d822      	bhi.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005ae6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005aea:	d007      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005aec:	e01c      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aee:	4bab      	ldr	r3, [pc, #684]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005af2:	4aaa      	ldr	r2, [pc, #680]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005af4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005af8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005afa:	e01a      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b00:	3308      	adds	r3, #8
 8005b02:	2102      	movs	r1, #2
 8005b04:	4618      	mov	r0, r3
 8005b06:	f002 fa49 	bl	8007f9c <RCCEx_PLL2_Config>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b10:	e00f      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b16:	3328      	adds	r3, #40	@ 0x28
 8005b18:	2102      	movs	r1, #2
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f002 faf0 	bl	8008100 <RCCEx_PLL3_Config>
 8005b20:	4603      	mov	r3, r0
 8005b22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b26:	e004      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005b2e:	e000      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005b30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10a      	bne.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005b3a:	4b98      	ldr	r3, [pc, #608]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b3e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b48:	4a94      	ldr	r2, [pc, #592]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b4a:	430b      	orrs	r3, r1
 8005b4c:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b4e:	e003      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b60:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005b64:	f04f 0900 	mov.w	r9, #0
 8005b68:	ea58 0309 	orrs.w	r3, r8, r9
 8005b6c:	d047      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b74:	2b04      	cmp	r3, #4
 8005b76:	d82a      	bhi.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005b78:	a201      	add	r2, pc, #4	@ (adr r2, 8005b80 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7e:	bf00      	nop
 8005b80:	08005b95 	.word	0x08005b95
 8005b84:	08005ba3 	.word	0x08005ba3
 8005b88:	08005bb9 	.word	0x08005bb9
 8005b8c:	08005bd7 	.word	0x08005bd7
 8005b90:	08005bd7 	.word	0x08005bd7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b94:	4b81      	ldr	r3, [pc, #516]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b98:	4a80      	ldr	r2, [pc, #512]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ba0:	e01a      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ba6:	3308      	adds	r3, #8
 8005ba8:	2100      	movs	r1, #0
 8005baa:	4618      	mov	r0, r3
 8005bac:	f002 f9f6 	bl	8007f9c <RCCEx_PLL2_Config>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bb6:	e00f      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bbc:	3328      	adds	r3, #40	@ 0x28
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f002 fa9d 	bl	8008100 <RCCEx_PLL3_Config>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bcc:	e004      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005bd4:	e000      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005bd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10a      	bne.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005be0:	4b6e      	ldr	r3, [pc, #440]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005be2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005be4:	f023 0107 	bic.w	r1, r3, #7
 8005be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bee:	4a6b      	ldr	r2, [pc, #428]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bf0:	430b      	orrs	r3, r1
 8005bf2:	6513      	str	r3, [r2, #80]	@ 0x50
 8005bf4:	e003      	b.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bf6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bfa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c06:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8005c0a:	f04f 0b00 	mov.w	fp, #0
 8005c0e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005c12:	d05b      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c1c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005c20:	d03b      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005c22:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005c26:	d834      	bhi.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c28:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c2c:	d037      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005c2e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c32:	d82e      	bhi.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c34:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c38:	d033      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005c3a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c3e:	d828      	bhi.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c44:	d01a      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005c46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c4a:	d822      	bhi.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d003      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005c50:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c54:	d007      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005c56:	e01c      	b.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c58:	4b50      	ldr	r3, [pc, #320]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c5c:	4a4f      	ldr	r2, [pc, #316]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c64:	e01e      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c6a:	3308      	adds	r3, #8
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f002 f994 	bl	8007f9c <RCCEx_PLL2_Config>
 8005c74:	4603      	mov	r3, r0
 8005c76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005c7a:	e013      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c80:	3328      	adds	r3, #40	@ 0x28
 8005c82:	2100      	movs	r1, #0
 8005c84:	4618      	mov	r0, r3
 8005c86:	f002 fa3b 	bl	8008100 <RCCEx_PLL3_Config>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c90:	e008      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005c98:	e004      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005c9a:	bf00      	nop
 8005c9c:	e002      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005c9e:	bf00      	nop
 8005ca0:	e000      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005ca2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ca4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d10b      	bne.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005cac:	4b3b      	ldr	r3, [pc, #236]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cb0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005cbc:	4a37      	ldr	r2, [pc, #220]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cbe:	430b      	orrs	r3, r1
 8005cc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cc2:	e003      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005cc8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005cd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005cdc:	2300      	movs	r3, #0
 8005cde:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005ce2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	d05d      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cf0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005cf4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005cf8:	d03b      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005cfa:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005cfe:	d834      	bhi.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d04:	d037      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005d06:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d0a:	d82e      	bhi.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d0c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d10:	d033      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005d12:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d16:	d828      	bhi.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d1c:	d01a      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005d1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d22:	d822      	bhi.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d003      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005d28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d2c:	d007      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005d2e:	e01c      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d30:	4b1a      	ldr	r3, [pc, #104]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d34:	4a19      	ldr	r2, [pc, #100]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d3c:	e01e      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d42:	3308      	adds	r3, #8
 8005d44:	2100      	movs	r1, #0
 8005d46:	4618      	mov	r0, r3
 8005d48:	f002 f928 	bl	8007f9c <RCCEx_PLL2_Config>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005d52:	e013      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d58:	3328      	adds	r3, #40	@ 0x28
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f002 f9cf 	bl	8008100 <RCCEx_PLL3_Config>
 8005d62:	4603      	mov	r3, r0
 8005d64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d68:	e008      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005d70:	e004      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005d72:	bf00      	nop
 8005d74:	e002      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005d76:	bf00      	nop
 8005d78:	e000      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005d7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d10d      	bne.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005d84:	4b05      	ldr	r3, [pc, #20]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d88:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d90:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005d94:	4a01      	ldr	r2, [pc, #4]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d96:	430b      	orrs	r3, r1
 8005d98:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d9a:	e005      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005d9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005da0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005da4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005db4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005db8:	2300      	movs	r3, #0
 8005dba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005dbe:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	d03a      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dce:	2b30      	cmp	r3, #48	@ 0x30
 8005dd0:	d01f      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005dd2:	2b30      	cmp	r3, #48	@ 0x30
 8005dd4:	d819      	bhi.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005dd6:	2b20      	cmp	r3, #32
 8005dd8:	d00c      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005dda:	2b20      	cmp	r3, #32
 8005ddc:	d815      	bhi.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d019      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005de2:	2b10      	cmp	r3, #16
 8005de4:	d111      	bne.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005de6:	4baa      	ldr	r3, [pc, #680]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dea:	4aa9      	ldr	r2, [pc, #676]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005dec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005df0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005df2:	e011      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005df8:	3308      	adds	r3, #8
 8005dfa:	2102      	movs	r1, #2
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f002 f8cd 	bl	8007f9c <RCCEx_PLL2_Config>
 8005e02:	4603      	mov	r3, r0
 8005e04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005e08:	e006      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e10:	e002      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005e12:	bf00      	nop
 8005e14:	e000      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005e16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d10a      	bne.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005e20:	4b9b      	ldr	r3, [pc, #620]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e24:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e2e:	4a98      	ldr	r2, [pc, #608]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e30:	430b      	orrs	r3, r1
 8005e32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e34:	e003      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e3a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e46:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005e4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e4e:	2300      	movs	r3, #0
 8005e50:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e54:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005e58:	460b      	mov	r3, r1
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	d051      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e68:	d035      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005e6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e6e:	d82e      	bhi.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005e70:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e74:	d031      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005e76:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e7a:	d828      	bhi.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005e7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e80:	d01a      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005e82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e86:	d822      	bhi.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d003      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005e8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e90:	d007      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005e92:	e01c      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e94:	4b7e      	ldr	r3, [pc, #504]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e98:	4a7d      	ldr	r2, [pc, #500]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ea0:	e01c      	b.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ea6:	3308      	adds	r3, #8
 8005ea8:	2100      	movs	r1, #0
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f002 f876 	bl	8007f9c <RCCEx_PLL2_Config>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005eb6:	e011      	b.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ebc:	3328      	adds	r3, #40	@ 0x28
 8005ebe:	2100      	movs	r1, #0
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f002 f91d 	bl	8008100 <RCCEx_PLL3_Config>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ecc:	e006      	b.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005ed4:	e002      	b.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005ed6:	bf00      	nop
 8005ed8:	e000      	b.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005eda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005edc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d10a      	bne.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005ee4:	4b6a      	ldr	r3, [pc, #424]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ee6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ee8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ef2:	4a67      	ldr	r2, [pc, #412]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ef4:	430b      	orrs	r3, r1
 8005ef6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ef8:	e003      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005efa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005efe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005f0e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f12:	2300      	movs	r3, #0
 8005f14:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f18:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	d053      	beq.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f2c:	d033      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005f2e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f32:	d82c      	bhi.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f34:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f38:	d02f      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x502>
 8005f3a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f3e:	d826      	bhi.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f40:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f44:	d02b      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005f46:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f4a:	d820      	bhi.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f50:	d012      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005f52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f56:	d81a      	bhi.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d022      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f60:	d115      	bne.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f66:	3308      	adds	r3, #8
 8005f68:	2101      	movs	r1, #1
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f002 f816 	bl	8007f9c <RCCEx_PLL2_Config>
 8005f70:	4603      	mov	r3, r0
 8005f72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f76:	e015      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f7c:	3328      	adds	r3, #40	@ 0x28
 8005f7e:	2101      	movs	r1, #1
 8005f80:	4618      	mov	r0, r3
 8005f82:	f002 f8bd 	bl	8008100 <RCCEx_PLL3_Config>
 8005f86:	4603      	mov	r3, r0
 8005f88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f8c:	e00a      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f94:	e006      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005f96:	bf00      	nop
 8005f98:	e004      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005f9a:	bf00      	nop
 8005f9c:	e002      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005f9e:	bf00      	nop
 8005fa0:	e000      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005fa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fa4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d10a      	bne.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005fac:	4b38      	ldr	r3, [pc, #224]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fb0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fba:	4a35      	ldr	r2, [pc, #212]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fbc:	430b      	orrs	r3, r1
 8005fbe:	6513      	str	r3, [r2, #80]	@ 0x50
 8005fc0:	e003      	b.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fc2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fc6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005fd6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005fda:	2300      	movs	r3, #0
 8005fdc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005fe0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	d058      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005ff2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ff6:	d033      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005ff8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ffc:	d82c      	bhi.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006002:	d02f      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006004:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006008:	d826      	bhi.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800600a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800600e:	d02b      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006010:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006014:	d820      	bhi.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006016:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800601a:	d012      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800601c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006020:	d81a      	bhi.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006022:	2b00      	cmp	r3, #0
 8006024:	d022      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006026:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800602a:	d115      	bne.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800602c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006030:	3308      	adds	r3, #8
 8006032:	2101      	movs	r1, #1
 8006034:	4618      	mov	r0, r3
 8006036:	f001 ffb1 	bl	8007f9c <RCCEx_PLL2_Config>
 800603a:	4603      	mov	r3, r0
 800603c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006040:	e015      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006042:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006046:	3328      	adds	r3, #40	@ 0x28
 8006048:	2101      	movs	r1, #1
 800604a:	4618      	mov	r0, r3
 800604c:	f002 f858 	bl	8008100 <RCCEx_PLL3_Config>
 8006050:	4603      	mov	r3, r0
 8006052:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006056:	e00a      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800605e:	e006      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006060:	bf00      	nop
 8006062:	e004      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006064:	bf00      	nop
 8006066:	e002      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006068:	bf00      	nop
 800606a:	e000      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800606c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800606e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10e      	bne.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006076:	4b06      	ldr	r3, [pc, #24]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800607a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800607e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006082:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006086:	4a02      	ldr	r2, [pc, #8]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006088:	430b      	orrs	r3, r1
 800608a:	6593      	str	r3, [r2, #88]	@ 0x58
 800608c:	e006      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800608e:	bf00      	nop
 8006090:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006094:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006098:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800609c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80060a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80060ac:	2300      	movs	r3, #0
 80060ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80060b2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80060b6:	460b      	mov	r3, r1
 80060b8:	4313      	orrs	r3, r2
 80060ba:	d037      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80060bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060c6:	d00e      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80060c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060cc:	d816      	bhi.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x664>
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d018      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80060d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060d6:	d111      	bne.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060d8:	4bc4      	ldr	r3, [pc, #784]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060dc:	4ac3      	ldr	r2, [pc, #780]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80060e4:	e00f      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ea:	3308      	adds	r3, #8
 80060ec:	2101      	movs	r1, #1
 80060ee:	4618      	mov	r0, r3
 80060f0:	f001 ff54 	bl	8007f9c <RCCEx_PLL2_Config>
 80060f4:	4603      	mov	r3, r0
 80060f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80060fa:	e004      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006102:	e000      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006104:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006106:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10a      	bne.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800610e:	4bb7      	ldr	r3, [pc, #732]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006110:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006112:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006116:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800611a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800611c:	4ab3      	ldr	r2, [pc, #716]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800611e:	430b      	orrs	r3, r1
 8006120:	6513      	str	r3, [r2, #80]	@ 0x50
 8006122:	e003      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006124:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006128:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800612c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006134:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006138:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800613c:	2300      	movs	r3, #0
 800613e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006142:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006146:	460b      	mov	r3, r1
 8006148:	4313      	orrs	r3, r2
 800614a:	d039      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800614c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006150:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006152:	2b03      	cmp	r3, #3
 8006154:	d81c      	bhi.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006156:	a201      	add	r2, pc, #4	@ (adr r2, 800615c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800615c:	08006199 	.word	0x08006199
 8006160:	0800616d 	.word	0x0800616d
 8006164:	0800617b 	.word	0x0800617b
 8006168:	08006199 	.word	0x08006199
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800616c:	4b9f      	ldr	r3, [pc, #636]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800616e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006170:	4a9e      	ldr	r2, [pc, #632]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006172:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006176:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006178:	e00f      	b.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800617a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800617e:	3308      	adds	r3, #8
 8006180:	2102      	movs	r1, #2
 8006182:	4618      	mov	r0, r3
 8006184:	f001 ff0a 	bl	8007f9c <RCCEx_PLL2_Config>
 8006188:	4603      	mov	r3, r0
 800618a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800618e:	e004      	b.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006196:	e000      	b.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006198:	bf00      	nop
    }

    if (ret == HAL_OK)
 800619a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d10a      	bne.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80061a2:	4b92      	ldr	r3, [pc, #584]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061a6:	f023 0103 	bic.w	r1, r3, #3
 80061aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061b0:	4a8e      	ldr	r2, [pc, #568]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061b2:	430b      	orrs	r3, r1
 80061b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80061b6:	e003      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80061cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80061d0:	2300      	movs	r3, #0
 80061d2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80061d6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80061da:	460b      	mov	r3, r1
 80061dc:	4313      	orrs	r3, r2
 80061de:	f000 8099 	beq.w	8006314 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061e2:	4b83      	ldr	r3, [pc, #524]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a82      	ldr	r2, [pc, #520]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80061e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061ee:	f7fb fd2f 	bl	8001c50 <HAL_GetTick>
 80061f2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061f6:	e00b      	b.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061f8:	f7fb fd2a 	bl	8001c50 <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	2b64      	cmp	r3, #100	@ 0x64
 8006206:	d903      	bls.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800620e:	e005      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006210:	4b77      	ldr	r3, [pc, #476]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006218:	2b00      	cmp	r3, #0
 800621a:	d0ed      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800621c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006220:	2b00      	cmp	r3, #0
 8006222:	d173      	bne.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006224:	4b71      	ldr	r3, [pc, #452]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006226:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006228:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800622c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006230:	4053      	eors	r3, r2
 8006232:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006236:	2b00      	cmp	r3, #0
 8006238:	d015      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800623a:	4b6c      	ldr	r3, [pc, #432]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800623c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800623e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006242:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006246:	4b69      	ldr	r3, [pc, #420]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800624a:	4a68      	ldr	r2, [pc, #416]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800624c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006250:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006252:	4b66      	ldr	r3, [pc, #408]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006256:	4a65      	ldr	r2, [pc, #404]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006258:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800625c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800625e:	4a63      	ldr	r2, [pc, #396]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006260:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006264:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006266:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800626a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800626e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006272:	d118      	bne.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006274:	f7fb fcec 	bl	8001c50 <HAL_GetTick>
 8006278:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800627c:	e00d      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800627e:	f7fb fce7 	bl	8001c50 <HAL_GetTick>
 8006282:	4602      	mov	r2, r0
 8006284:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006288:	1ad2      	subs	r2, r2, r3
 800628a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800628e:	429a      	cmp	r2, r3
 8006290:	d903      	bls.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8006298:	e005      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800629a:	4b54      	ldr	r3, [pc, #336]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800629c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800629e:	f003 0302 	and.w	r3, r3, #2
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d0eb      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80062a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d129      	bne.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062be:	d10e      	bne.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x846>
 80062c0:	4b4a      	ldr	r3, [pc, #296]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80062c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062d0:	091a      	lsrs	r2, r3, #4
 80062d2:	4b48      	ldr	r3, [pc, #288]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80062d4:	4013      	ands	r3, r2
 80062d6:	4a45      	ldr	r2, [pc, #276]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062d8:	430b      	orrs	r3, r1
 80062da:	6113      	str	r3, [r2, #16]
 80062dc:	e005      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x852>
 80062de:	4b43      	ldr	r3, [pc, #268]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	4a42      	ldr	r2, [pc, #264]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80062e8:	6113      	str	r3, [r2, #16]
 80062ea:	4b40      	ldr	r3, [pc, #256]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062ec:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80062ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062fa:	4a3c      	ldr	r2, [pc, #240]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062fc:	430b      	orrs	r3, r1
 80062fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006300:	e008      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006302:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006306:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800630a:	e003      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800630c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006310:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631c:	f002 0301 	and.w	r3, r2, #1
 8006320:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006324:	2300      	movs	r3, #0
 8006326:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800632a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800632e:	460b      	mov	r3, r1
 8006330:	4313      	orrs	r3, r2
 8006332:	f000 808f 	beq.w	8006454 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006336:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800633a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800633c:	2b28      	cmp	r3, #40	@ 0x28
 800633e:	d871      	bhi.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006340:	a201      	add	r2, pc, #4	@ (adr r2, 8006348 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006346:	bf00      	nop
 8006348:	0800642d 	.word	0x0800642d
 800634c:	08006425 	.word	0x08006425
 8006350:	08006425 	.word	0x08006425
 8006354:	08006425 	.word	0x08006425
 8006358:	08006425 	.word	0x08006425
 800635c:	08006425 	.word	0x08006425
 8006360:	08006425 	.word	0x08006425
 8006364:	08006425 	.word	0x08006425
 8006368:	080063f9 	.word	0x080063f9
 800636c:	08006425 	.word	0x08006425
 8006370:	08006425 	.word	0x08006425
 8006374:	08006425 	.word	0x08006425
 8006378:	08006425 	.word	0x08006425
 800637c:	08006425 	.word	0x08006425
 8006380:	08006425 	.word	0x08006425
 8006384:	08006425 	.word	0x08006425
 8006388:	0800640f 	.word	0x0800640f
 800638c:	08006425 	.word	0x08006425
 8006390:	08006425 	.word	0x08006425
 8006394:	08006425 	.word	0x08006425
 8006398:	08006425 	.word	0x08006425
 800639c:	08006425 	.word	0x08006425
 80063a0:	08006425 	.word	0x08006425
 80063a4:	08006425 	.word	0x08006425
 80063a8:	0800642d 	.word	0x0800642d
 80063ac:	08006425 	.word	0x08006425
 80063b0:	08006425 	.word	0x08006425
 80063b4:	08006425 	.word	0x08006425
 80063b8:	08006425 	.word	0x08006425
 80063bc:	08006425 	.word	0x08006425
 80063c0:	08006425 	.word	0x08006425
 80063c4:	08006425 	.word	0x08006425
 80063c8:	0800642d 	.word	0x0800642d
 80063cc:	08006425 	.word	0x08006425
 80063d0:	08006425 	.word	0x08006425
 80063d4:	08006425 	.word	0x08006425
 80063d8:	08006425 	.word	0x08006425
 80063dc:	08006425 	.word	0x08006425
 80063e0:	08006425 	.word	0x08006425
 80063e4:	08006425 	.word	0x08006425
 80063e8:	0800642d 	.word	0x0800642d
 80063ec:	58024400 	.word	0x58024400
 80063f0:	58024800 	.word	0x58024800
 80063f4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063fc:	3308      	adds	r3, #8
 80063fe:	2101      	movs	r1, #1
 8006400:	4618      	mov	r0, r3
 8006402:	f001 fdcb 	bl	8007f9c <RCCEx_PLL2_Config>
 8006406:	4603      	mov	r3, r0
 8006408:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800640c:	e00f      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800640e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006412:	3328      	adds	r3, #40	@ 0x28
 8006414:	2101      	movs	r1, #1
 8006416:	4618      	mov	r0, r3
 8006418:	f001 fe72 	bl	8008100 <RCCEx_PLL3_Config>
 800641c:	4603      	mov	r3, r0
 800641e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006422:	e004      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800642a:	e000      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800642c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800642e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006432:	2b00      	cmp	r3, #0
 8006434:	d10a      	bne.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006436:	4bbf      	ldr	r3, [pc, #764]	@ (8006734 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800643a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800643e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006442:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006444:	4abb      	ldr	r2, [pc, #748]	@ (8006734 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006446:	430b      	orrs	r3, r1
 8006448:	6553      	str	r3, [r2, #84]	@ 0x54
 800644a:	e003      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800644c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006450:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645c:	f002 0302 	and.w	r3, r2, #2
 8006460:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006464:	2300      	movs	r3, #0
 8006466:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800646a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800646e:	460b      	mov	r3, r1
 8006470:	4313      	orrs	r3, r2
 8006472:	d041      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006478:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800647a:	2b05      	cmp	r3, #5
 800647c:	d824      	bhi.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800647e:	a201      	add	r2, pc, #4	@ (adr r2, 8006484 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006484:	080064d1 	.word	0x080064d1
 8006488:	0800649d 	.word	0x0800649d
 800648c:	080064b3 	.word	0x080064b3
 8006490:	080064d1 	.word	0x080064d1
 8006494:	080064d1 	.word	0x080064d1
 8006498:	080064d1 	.word	0x080064d1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800649c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064a0:	3308      	adds	r3, #8
 80064a2:	2101      	movs	r1, #1
 80064a4:	4618      	mov	r0, r3
 80064a6:	f001 fd79 	bl	8007f9c <RCCEx_PLL2_Config>
 80064aa:	4603      	mov	r3, r0
 80064ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80064b0:	e00f      	b.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064b6:	3328      	adds	r3, #40	@ 0x28
 80064b8:	2101      	movs	r1, #1
 80064ba:	4618      	mov	r0, r3
 80064bc:	f001 fe20 	bl	8008100 <RCCEx_PLL3_Config>
 80064c0:	4603      	mov	r3, r0
 80064c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80064c6:	e004      	b.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80064ce:	e000      	b.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80064d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10a      	bne.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80064da:	4b96      	ldr	r3, [pc, #600]	@ (8006734 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80064dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064de:	f023 0107 	bic.w	r1, r3, #7
 80064e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064e8:	4a92      	ldr	r2, [pc, #584]	@ (8006734 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80064ea:	430b      	orrs	r3, r1
 80064ec:	6553      	str	r3, [r2, #84]	@ 0x54
 80064ee:	e003      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006500:	f002 0304 	and.w	r3, r2, #4
 8006504:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006508:	2300      	movs	r3, #0
 800650a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800650e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006512:	460b      	mov	r3, r1
 8006514:	4313      	orrs	r3, r2
 8006516:	d044      	beq.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800651c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006520:	2b05      	cmp	r3, #5
 8006522:	d825      	bhi.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006524:	a201      	add	r2, pc, #4	@ (adr r2, 800652c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800652a:	bf00      	nop
 800652c:	08006579 	.word	0x08006579
 8006530:	08006545 	.word	0x08006545
 8006534:	0800655b 	.word	0x0800655b
 8006538:	08006579 	.word	0x08006579
 800653c:	08006579 	.word	0x08006579
 8006540:	08006579 	.word	0x08006579
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006548:	3308      	adds	r3, #8
 800654a:	2101      	movs	r1, #1
 800654c:	4618      	mov	r0, r3
 800654e:	f001 fd25 	bl	8007f9c <RCCEx_PLL2_Config>
 8006552:	4603      	mov	r3, r0
 8006554:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006558:	e00f      	b.n	800657a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800655a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800655e:	3328      	adds	r3, #40	@ 0x28
 8006560:	2101      	movs	r1, #1
 8006562:	4618      	mov	r0, r3
 8006564:	f001 fdcc 	bl	8008100 <RCCEx_PLL3_Config>
 8006568:	4603      	mov	r3, r0
 800656a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800656e:	e004      	b.n	800657a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006576:	e000      	b.n	800657a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006578:	bf00      	nop
    }

    if (ret == HAL_OK)
 800657a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800657e:	2b00      	cmp	r3, #0
 8006580:	d10b      	bne.n	800659a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006582:	4b6c      	ldr	r3, [pc, #432]	@ (8006734 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006586:	f023 0107 	bic.w	r1, r3, #7
 800658a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800658e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006592:	4a68      	ldr	r2, [pc, #416]	@ (8006734 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006594:	430b      	orrs	r3, r1
 8006596:	6593      	str	r3, [r2, #88]	@ 0x58
 8006598:	e003      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800659a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800659e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80065a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065aa:	f002 0320 	and.w	r3, r2, #32
 80065ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80065b2:	2300      	movs	r3, #0
 80065b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80065b8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80065bc:	460b      	mov	r3, r1
 80065be:	4313      	orrs	r3, r2
 80065c0:	d055      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80065c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065ce:	d033      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80065d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065d4:	d82c      	bhi.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80065d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065da:	d02f      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80065dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065e0:	d826      	bhi.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80065e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065e6:	d02b      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80065e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065ec:	d820      	bhi.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80065ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065f2:	d012      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80065f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065f8:	d81a      	bhi.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d022      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80065fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006602:	d115      	bne.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006608:	3308      	adds	r3, #8
 800660a:	2100      	movs	r1, #0
 800660c:	4618      	mov	r0, r3
 800660e:	f001 fcc5 	bl	8007f9c <RCCEx_PLL2_Config>
 8006612:	4603      	mov	r3, r0
 8006614:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006618:	e015      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800661a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800661e:	3328      	adds	r3, #40	@ 0x28
 8006620:	2102      	movs	r1, #2
 8006622:	4618      	mov	r0, r3
 8006624:	f001 fd6c 	bl	8008100 <RCCEx_PLL3_Config>
 8006628:	4603      	mov	r3, r0
 800662a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800662e:	e00a      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006636:	e006      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006638:	bf00      	nop
 800663a:	e004      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800663c:	bf00      	nop
 800663e:	e002      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006640:	bf00      	nop
 8006642:	e000      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006644:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006646:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10b      	bne.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800664e:	4b39      	ldr	r3, [pc, #228]	@ (8006734 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006652:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006656:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800665a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800665e:	4a35      	ldr	r2, [pc, #212]	@ (8006734 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006660:	430b      	orrs	r3, r1
 8006662:	6553      	str	r3, [r2, #84]	@ 0x54
 8006664:	e003      	b.n	800666e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006666:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800666a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800666e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006676:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800667a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800667e:	2300      	movs	r3, #0
 8006680:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006684:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006688:	460b      	mov	r3, r1
 800668a:	4313      	orrs	r3, r2
 800668c:	d058      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800668e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006692:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006696:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800669a:	d033      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800669c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80066a0:	d82c      	bhi.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80066a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066a6:	d02f      	beq.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80066a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066ac:	d826      	bhi.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80066ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066b2:	d02b      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80066b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066b8:	d820      	bhi.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80066ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066be:	d012      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80066c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066c4:	d81a      	bhi.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d022      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80066ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066ce:	d115      	bne.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d4:	3308      	adds	r3, #8
 80066d6:	2100      	movs	r1, #0
 80066d8:	4618      	mov	r0, r3
 80066da:	f001 fc5f 	bl	8007f9c <RCCEx_PLL2_Config>
 80066de:	4603      	mov	r3, r0
 80066e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80066e4:	e015      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ea:	3328      	adds	r3, #40	@ 0x28
 80066ec:	2102      	movs	r1, #2
 80066ee:	4618      	mov	r0, r3
 80066f0:	f001 fd06 	bl	8008100 <RCCEx_PLL3_Config>
 80066f4:	4603      	mov	r3, r0
 80066f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80066fa:	e00a      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006702:	e006      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006704:	bf00      	nop
 8006706:	e004      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006708:	bf00      	nop
 800670a:	e002      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800670c:	bf00      	nop
 800670e:	e000      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006710:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006712:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10e      	bne.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800671a:	4b06      	ldr	r3, [pc, #24]	@ (8006734 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800671c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800671e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006726:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800672a:	4a02      	ldr	r2, [pc, #8]	@ (8006734 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800672c:	430b      	orrs	r3, r1
 800672e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006730:	e006      	b.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006732:	bf00      	nop
 8006734:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006738:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800673c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006748:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800674c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006750:	2300      	movs	r3, #0
 8006752:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006756:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800675a:	460b      	mov	r3, r1
 800675c:	4313      	orrs	r3, r2
 800675e:	d055      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006764:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006768:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800676c:	d033      	beq.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800676e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006772:	d82c      	bhi.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006774:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006778:	d02f      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800677a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800677e:	d826      	bhi.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006780:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006784:	d02b      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006786:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800678a:	d820      	bhi.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800678c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006790:	d012      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006792:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006796:	d81a      	bhi.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006798:	2b00      	cmp	r3, #0
 800679a:	d022      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800679c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067a0:	d115      	bne.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067a6:	3308      	adds	r3, #8
 80067a8:	2100      	movs	r1, #0
 80067aa:	4618      	mov	r0, r3
 80067ac:	f001 fbf6 	bl	8007f9c <RCCEx_PLL2_Config>
 80067b0:	4603      	mov	r3, r0
 80067b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067b6:	e015      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067bc:	3328      	adds	r3, #40	@ 0x28
 80067be:	2102      	movs	r1, #2
 80067c0:	4618      	mov	r0, r3
 80067c2:	f001 fc9d 	bl	8008100 <RCCEx_PLL3_Config>
 80067c6:	4603      	mov	r3, r0
 80067c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067cc:	e00a      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80067d4:	e006      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80067d6:	bf00      	nop
 80067d8:	e004      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80067da:	bf00      	nop
 80067dc:	e002      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80067de:	bf00      	nop
 80067e0:	e000      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80067e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d10b      	bne.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80067ec:	4ba0      	ldr	r3, [pc, #640]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80067ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067f0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80067f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80067fc:	4a9c      	ldr	r2, [pc, #624]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80067fe:	430b      	orrs	r3, r1
 8006800:	6593      	str	r3, [r2, #88]	@ 0x58
 8006802:	e003      	b.n	800680c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006804:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006808:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800680c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006814:	f002 0308 	and.w	r3, r2, #8
 8006818:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800681c:	2300      	movs	r3, #0
 800681e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006822:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006826:	460b      	mov	r3, r1
 8006828:	4313      	orrs	r3, r2
 800682a:	d01e      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800682c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006830:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006834:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006838:	d10c      	bne.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800683a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800683e:	3328      	adds	r3, #40	@ 0x28
 8006840:	2102      	movs	r1, #2
 8006842:	4618      	mov	r0, r3
 8006844:	f001 fc5c 	bl	8008100 <RCCEx_PLL3_Config>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d002      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006854:	4b86      	ldr	r3, [pc, #536]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006858:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800685c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006860:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006864:	4a82      	ldr	r2, [pc, #520]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006866:	430b      	orrs	r3, r1
 8006868:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800686a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800686e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006872:	f002 0310 	and.w	r3, r2, #16
 8006876:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800687a:	2300      	movs	r3, #0
 800687c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006880:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006884:	460b      	mov	r3, r1
 8006886:	4313      	orrs	r3, r2
 8006888:	d01e      	beq.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800688a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800688e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006892:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006896:	d10c      	bne.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800689c:	3328      	adds	r3, #40	@ 0x28
 800689e:	2102      	movs	r1, #2
 80068a0:	4618      	mov	r0, r3
 80068a2:	f001 fc2d 	bl	8008100 <RCCEx_PLL3_Config>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d002      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80068b2:	4b6f      	ldr	r3, [pc, #444]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068b6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80068ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068c2:	4a6b      	ldr	r2, [pc, #428]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068c4:	430b      	orrs	r3, r1
 80068c6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80068c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80068d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80068d6:	2300      	movs	r3, #0
 80068d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80068da:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80068de:	460b      	mov	r3, r1
 80068e0:	4313      	orrs	r3, r2
 80068e2:	d03e      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80068e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80068ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068f0:	d022      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80068f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068f6:	d81b      	bhi.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d003      	beq.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80068fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006900:	d00b      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006902:	e015      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006904:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006908:	3308      	adds	r3, #8
 800690a:	2100      	movs	r1, #0
 800690c:	4618      	mov	r0, r3
 800690e:	f001 fb45 	bl	8007f9c <RCCEx_PLL2_Config>
 8006912:	4603      	mov	r3, r0
 8006914:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006918:	e00f      	b.n	800693a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800691a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800691e:	3328      	adds	r3, #40	@ 0x28
 8006920:	2102      	movs	r1, #2
 8006922:	4618      	mov	r0, r3
 8006924:	f001 fbec 	bl	8008100 <RCCEx_PLL3_Config>
 8006928:	4603      	mov	r3, r0
 800692a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800692e:	e004      	b.n	800693a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006936:	e000      	b.n	800693a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006938:	bf00      	nop
    }

    if (ret == HAL_OK)
 800693a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10b      	bne.n	800695a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006942:	4b4b      	ldr	r3, [pc, #300]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006946:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800694a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800694e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006952:	4a47      	ldr	r2, [pc, #284]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006954:	430b      	orrs	r3, r1
 8006956:	6593      	str	r3, [r2, #88]	@ 0x58
 8006958:	e003      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800695a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800695e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006962:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800696e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006970:	2300      	movs	r3, #0
 8006972:	677b      	str	r3, [r7, #116]	@ 0x74
 8006974:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006978:	460b      	mov	r3, r1
 800697a:	4313      	orrs	r3, r2
 800697c:	d03b      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800697e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006982:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006986:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800698a:	d01f      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800698c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006990:	d818      	bhi.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006992:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006996:	d003      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006998:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800699c:	d007      	beq.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800699e:	e011      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069a0:	4b33      	ldr	r3, [pc, #204]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a4:	4a32      	ldr	r2, [pc, #200]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80069ac:	e00f      	b.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069b2:	3328      	adds	r3, #40	@ 0x28
 80069b4:	2101      	movs	r1, #1
 80069b6:	4618      	mov	r0, r3
 80069b8:	f001 fba2 	bl	8008100 <RCCEx_PLL3_Config>
 80069bc:	4603      	mov	r3, r0
 80069be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80069c2:	e004      	b.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80069ca:	e000      	b.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80069cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10b      	bne.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069d6:	4b26      	ldr	r3, [pc, #152]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069da:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80069de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069e6:	4a22      	ldr	r2, [pc, #136]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069e8:	430b      	orrs	r3, r1
 80069ea:	6553      	str	r3, [r2, #84]	@ 0x54
 80069ec:	e003      	b.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80069f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fe:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006a02:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a04:	2300      	movs	r3, #0
 8006a06:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a08:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	d034      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d003      	beq.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006a1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a20:	d007      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006a22:	e011      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a24:	4b12      	ldr	r3, [pc, #72]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a28:	4a11      	ldr	r2, [pc, #68]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a30:	e00e      	b.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a36:	3308      	adds	r3, #8
 8006a38:	2102      	movs	r1, #2
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f001 faae 	bl	8007f9c <RCCEx_PLL2_Config>
 8006a40:	4603      	mov	r3, r0
 8006a42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a46:	e003      	b.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d10d      	bne.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006a58:	4b05      	ldr	r3, [pc, #20]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a5c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a66:	4a02      	ldr	r2, [pc, #8]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a68:	430b      	orrs	r3, r1
 8006a6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006a6c:	e006      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006a6e:	bf00      	nop
 8006a70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a84:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006a88:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a8e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006a92:	460b      	mov	r3, r1
 8006a94:	4313      	orrs	r3, r2
 8006a96:	d00c      	beq.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a9c:	3328      	adds	r3, #40	@ 0x28
 8006a9e:	2102      	movs	r1, #2
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f001 fb2d 	bl	8008100 <RCCEx_PLL3_Config>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d002      	beq.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aba:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006abe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ac4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006ac8:	460b      	mov	r3, r1
 8006aca:	4313      	orrs	r3, r2
 8006acc:	d036      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ad2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ad4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ad8:	d018      	beq.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006ada:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ade:	d811      	bhi.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006ae0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ae4:	d014      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006ae6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006aea:	d80b      	bhi.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d011      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006af0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006af4:	d106      	bne.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006af6:	4bb7      	ldr	r3, [pc, #732]	@ (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006afa:	4ab6      	ldr	r2, [pc, #728]	@ (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006afc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006b02:	e008      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b0a:	e004      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006b0c:	bf00      	nop
 8006b0e:	e002      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006b10:	bf00      	nop
 8006b12:	e000      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006b14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10a      	bne.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b1e:	4bad      	ldr	r3, [pc, #692]	@ (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b22:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b2c:	4aa9      	ldr	r2, [pc, #676]	@ (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b2e:	430b      	orrs	r3, r1
 8006b30:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b32:	e003      	b.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b44:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006b48:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b4e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006b52:	460b      	mov	r3, r1
 8006b54:	4313      	orrs	r3, r2
 8006b56:	d009      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006b58:	4b9e      	ldr	r3, [pc, #632]	@ (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b5c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b66:	4a9b      	ldr	r2, [pc, #620]	@ (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b68:	430b      	orrs	r3, r1
 8006b6a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b74:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006b78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b7e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006b82:	460b      	mov	r3, r1
 8006b84:	4313      	orrs	r3, r2
 8006b86:	d009      	beq.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006b88:	4b92      	ldr	r3, [pc, #584]	@ (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b8c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b96:	4a8f      	ldr	r2, [pc, #572]	@ (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b98:	430b      	orrs	r3, r1
 8006b9a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006ba8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006baa:	2300      	movs	r3, #0
 8006bac:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bae:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	d00e      	beq.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006bb8:	4b86      	ldr	r3, [pc, #536]	@ (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	4a85      	ldr	r2, [pc, #532]	@ (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bbe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006bc2:	6113      	str	r3, [r2, #16]
 8006bc4:	4b83      	ldr	r3, [pc, #524]	@ (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bc6:	6919      	ldr	r1, [r3, #16]
 8006bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bcc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006bd0:	4a80      	ldr	r2, [pc, #512]	@ (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bd2:	430b      	orrs	r3, r1
 8006bd4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bde:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006be2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006be4:	2300      	movs	r3, #0
 8006be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006be8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006bec:	460b      	mov	r3, r1
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	d009      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006bf2:	4b78      	ldr	r3, [pc, #480]	@ (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bf6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c00:	4a74      	ldr	r2, [pc, #464]	@ (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c02:	430b      	orrs	r3, r1
 8006c04:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006c12:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c14:	2300      	movs	r3, #0
 8006c16:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c18:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	d00a      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c22:	4b6c      	ldr	r3, [pc, #432]	@ (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c26:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c32:	4a68      	ldr	r2, [pc, #416]	@ (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c34:	430b      	orrs	r3, r1
 8006c36:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c40:	2100      	movs	r1, #0
 8006c42:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006c44:	f003 0301 	and.w	r3, r3, #1
 8006c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c4a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006c4e:	460b      	mov	r3, r1
 8006c50:	4313      	orrs	r3, r2
 8006c52:	d011      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c58:	3308      	adds	r3, #8
 8006c5a:	2100      	movs	r1, #0
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f001 f99d 	bl	8007f9c <RCCEx_PLL2_Config>
 8006c62:	4603      	mov	r3, r0
 8006c64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006c68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d003      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c80:	2100      	movs	r1, #0
 8006c82:	6239      	str	r1, [r7, #32]
 8006c84:	f003 0302 	and.w	r3, r3, #2
 8006c88:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c8a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006c8e:	460b      	mov	r3, r1
 8006c90:	4313      	orrs	r3, r2
 8006c92:	d011      	beq.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c98:	3308      	adds	r3, #8
 8006c9a:	2101      	movs	r1, #1
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f001 f97d 	bl	8007f9c <RCCEx_PLL2_Config>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006ca8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d003      	beq.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cb4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc0:	2100      	movs	r1, #0
 8006cc2:	61b9      	str	r1, [r7, #24]
 8006cc4:	f003 0304 	and.w	r3, r3, #4
 8006cc8:	61fb      	str	r3, [r7, #28]
 8006cca:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006cce:	460b      	mov	r3, r1
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	d011      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cd8:	3308      	adds	r3, #8
 8006cda:	2102      	movs	r1, #2
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f001 f95d 	bl	8007f9c <RCCEx_PLL2_Config>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006ce8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d003      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cf0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cf4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d00:	2100      	movs	r1, #0
 8006d02:	6139      	str	r1, [r7, #16]
 8006d04:	f003 0308 	and.w	r3, r3, #8
 8006d08:	617b      	str	r3, [r7, #20]
 8006d0a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006d0e:	460b      	mov	r3, r1
 8006d10:	4313      	orrs	r3, r2
 8006d12:	d011      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d18:	3328      	adds	r3, #40	@ 0x28
 8006d1a:	2100      	movs	r1, #0
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f001 f9ef 	bl	8008100 <RCCEx_PLL3_Config>
 8006d22:	4603      	mov	r3, r0
 8006d24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8006d28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d003      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d40:	2100      	movs	r1, #0
 8006d42:	60b9      	str	r1, [r7, #8]
 8006d44:	f003 0310 	and.w	r3, r3, #16
 8006d48:	60fb      	str	r3, [r7, #12]
 8006d4a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006d4e:	460b      	mov	r3, r1
 8006d50:	4313      	orrs	r3, r2
 8006d52:	d011      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d58:	3328      	adds	r3, #40	@ 0x28
 8006d5a:	2101      	movs	r1, #1
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f001 f9cf 	bl	8008100 <RCCEx_PLL3_Config>
 8006d62:	4603      	mov	r3, r0
 8006d64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006d68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d003      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d80:	2100      	movs	r1, #0
 8006d82:	6039      	str	r1, [r7, #0]
 8006d84:	f003 0320 	and.w	r3, r3, #32
 8006d88:	607b      	str	r3, [r7, #4]
 8006d8a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006d8e:	460b      	mov	r3, r1
 8006d90:	4313      	orrs	r3, r2
 8006d92:	d011      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d98:	3328      	adds	r3, #40	@ 0x28
 8006d9a:	2102      	movs	r1, #2
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f001 f9af 	bl	8008100 <RCCEx_PLL3_Config>
 8006da2:	4603      	mov	r3, r0
 8006da4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006da8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d003      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006db0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006db4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8006db8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d101      	bne.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	e000      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dd2:	bf00      	nop
 8006dd4:	58024400 	.word	0x58024400

08006dd8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b090      	sub	sp, #64	@ 0x40
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006de2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006de6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006dea:	430b      	orrs	r3, r1
 8006dec:	f040 8094 	bne.w	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006df0:	4b9b      	ldr	r3, [pc, #620]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006df2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006df4:	f003 0307 	and.w	r3, r3, #7
 8006df8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dfc:	2b04      	cmp	r3, #4
 8006dfe:	f200 8087 	bhi.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006e02:	a201      	add	r2, pc, #4	@ (adr r2, 8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e08:	08006e1d 	.word	0x08006e1d
 8006e0c:	08006e45 	.word	0x08006e45
 8006e10:	08006e6d 	.word	0x08006e6d
 8006e14:	08006f09 	.word	0x08006f09
 8006e18:	08006e95 	.word	0x08006e95
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e1c:	4b90      	ldr	r3, [pc, #576]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e24:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e28:	d108      	bne.n	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f000 ff62 	bl	8007cf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e38:	f000 bc93 	b.w	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e40:	f000 bc8f 	b.w	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e44:	4b86      	ldr	r3, [pc, #536]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e50:	d108      	bne.n	8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e52:	f107 0318 	add.w	r3, r7, #24
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 fca6 	bl	80077a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e60:	f000 bc7f 	b.w	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006e64:	2300      	movs	r3, #0
 8006e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e68:	f000 bc7b 	b.w	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e6c:	4b7c      	ldr	r3, [pc, #496]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e78:	d108      	bne.n	8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e7a:	f107 030c 	add.w	r3, r7, #12
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f000 fde6 	bl	8007a50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e88:	f000 bc6b 	b.w	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e90:	f000 bc67 	b.w	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e94:	4b72      	ldr	r3, [pc, #456]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006e96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e98:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006e9c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e9e:	4b70      	ldr	r3, [pc, #448]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 0304 	and.w	r3, r3, #4
 8006ea6:	2b04      	cmp	r3, #4
 8006ea8:	d10c      	bne.n	8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d109      	bne.n	8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006eb0:	4b6b      	ldr	r3, [pc, #428]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	08db      	lsrs	r3, r3, #3
 8006eb6:	f003 0303 	and.w	r3, r3, #3
 8006eba:	4a6a      	ldr	r2, [pc, #424]	@ (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8006ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8006ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ec2:	e01f      	b.n	8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ec4:	4b66      	ldr	r3, [pc, #408]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ecc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ed0:	d106      	bne.n	8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ed4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ed8:	d102      	bne.n	8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006eda:	4b63      	ldr	r3, [pc, #396]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ede:	e011      	b.n	8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ee0:	4b5f      	ldr	r3, [pc, #380]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ee8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006eec:	d106      	bne.n	8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ef0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ef4:	d102      	bne.n	8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006ef6:	4b5d      	ldr	r3, [pc, #372]	@ (800706c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006efa:	e003      	b.n	8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006efc:	2300      	movs	r3, #0
 8006efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006f00:	f000 bc2f 	b.w	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006f04:	f000 bc2d 	b.w	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006f08:	4b59      	ldr	r3, [pc, #356]	@ (8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f0c:	f000 bc29 	b.w	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006f10:	2300      	movs	r3, #0
 8006f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f14:	f000 bc25 	b.w	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006f18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f1c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006f20:	430b      	orrs	r3, r1
 8006f22:	f040 80a7 	bne.w	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006f26:	4b4e      	ldr	r3, [pc, #312]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f2a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8006f2e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f32:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006f36:	d054      	beq.n	8006fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8006f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006f3e:	f200 808b 	bhi.w	8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8006f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f44:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006f48:	f000 8083 	beq.w	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8006f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f4e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006f52:	f200 8081 	bhi.w	8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8006f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f5c:	d02f      	beq.n	8006fbe <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f64:	d878      	bhi.n	8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8006f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d004      	beq.n	8006f76 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8006f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f72:	d012      	beq.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8006f74:	e070      	b.n	8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f76:	4b3a      	ldr	r3, [pc, #232]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f82:	d107      	bne.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f000 feb5 	bl	8007cf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f92:	e3e6      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006f94:	2300      	movs	r3, #0
 8006f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f98:	e3e3      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f9a:	4b31      	ldr	r3, [pc, #196]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fa2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006fa6:	d107      	bne.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fa8:	f107 0318 	add.w	r3, r7, #24
 8006fac:	4618      	mov	r0, r3
 8006fae:	f000 fbfb 	bl	80077a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fb6:	e3d4      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fbc:	e3d1      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006fbe:	4b28      	ldr	r3, [pc, #160]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006fc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fca:	d107      	bne.n	8006fdc <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fcc:	f107 030c 	add.w	r3, r7, #12
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f000 fd3d 	bl	8007a50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fda:	e3c2      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fe0:	e3bf      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006fe2:	4b1f      	ldr	r3, [pc, #124]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fe6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006fea:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006fec:	4b1c      	ldr	r3, [pc, #112]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0304 	and.w	r3, r3, #4
 8006ff4:	2b04      	cmp	r3, #4
 8006ff6:	d10c      	bne.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8006ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d109      	bne.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ffe:	4b18      	ldr	r3, [pc, #96]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	08db      	lsrs	r3, r3, #3
 8007004:	f003 0303 	and.w	r3, r3, #3
 8007008:	4a16      	ldr	r2, [pc, #88]	@ (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800700a:	fa22 f303 	lsr.w	r3, r2, r3
 800700e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007010:	e01e      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007012:	4b13      	ldr	r3, [pc, #76]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800701a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800701e:	d106      	bne.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8007020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007022:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007026:	d102      	bne.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007028:	4b0f      	ldr	r3, [pc, #60]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800702a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800702c:	e010      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800702e:	4b0c      	ldr	r3, [pc, #48]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007036:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800703a:	d106      	bne.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800703c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800703e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007042:	d102      	bne.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007044:	4b09      	ldr	r3, [pc, #36]	@ (800706c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007046:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007048:	e002      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800704a:	2300      	movs	r3, #0
 800704c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800704e:	e388      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007050:	e387      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007052:	4b07      	ldr	r3, [pc, #28]	@ (8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007054:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007056:	e384      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007058:	2300      	movs	r3, #0
 800705a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800705c:	e381      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800705e:	bf00      	nop
 8007060:	58024400 	.word	0x58024400
 8007064:	03d09000 	.word	0x03d09000
 8007068:	003d0900 	.word	0x003d0900
 800706c:	017d7840 	.word	0x017d7840
 8007070:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007074:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007078:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800707c:	430b      	orrs	r3, r1
 800707e:	f040 809c 	bne.w	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007082:	4b9e      	ldr	r3, [pc, #632]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007086:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800708a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800708c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800708e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007092:	d054      	beq.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8007094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007096:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800709a:	f200 808b 	bhi.w	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800709e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80070a4:	f000 8083 	beq.w	80071ae <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80070a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070aa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80070ae:	f200 8081 	bhi.w	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80070b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070b8:	d02f      	beq.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80070ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070c0:	d878      	bhi.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80070c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d004      	beq.n	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80070c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80070ce:	d012      	beq.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80070d0:	e070      	b.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80070d2:	4b8a      	ldr	r3, [pc, #552]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070de:	d107      	bne.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070e4:	4618      	mov	r0, r3
 80070e6:	f000 fe07 	bl	8007cf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070ee:	e338      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80070f0:	2300      	movs	r3, #0
 80070f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070f4:	e335      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070f6:	4b81      	ldr	r3, [pc, #516]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007102:	d107      	bne.n	8007114 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007104:	f107 0318 	add.w	r3, r7, #24
 8007108:	4618      	mov	r0, r3
 800710a:	f000 fb4d 	bl	80077a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007112:	e326      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007114:	2300      	movs	r3, #0
 8007116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007118:	e323      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800711a:	4b78      	ldr	r3, [pc, #480]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007122:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007126:	d107      	bne.n	8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007128:	f107 030c 	add.w	r3, r7, #12
 800712c:	4618      	mov	r0, r3
 800712e:	f000 fc8f 	bl	8007a50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007136:	e314      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007138:	2300      	movs	r3, #0
 800713a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800713c:	e311      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800713e:	4b6f      	ldr	r3, [pc, #444]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007142:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007146:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007148:	4b6c      	ldr	r3, [pc, #432]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0304 	and.w	r3, r3, #4
 8007150:	2b04      	cmp	r3, #4
 8007152:	d10c      	bne.n	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8007154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007156:	2b00      	cmp	r3, #0
 8007158:	d109      	bne.n	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800715a:	4b68      	ldr	r3, [pc, #416]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	08db      	lsrs	r3, r3, #3
 8007160:	f003 0303 	and.w	r3, r3, #3
 8007164:	4a66      	ldr	r2, [pc, #408]	@ (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8007166:	fa22 f303 	lsr.w	r3, r2, r3
 800716a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800716c:	e01e      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800716e:	4b63      	ldr	r3, [pc, #396]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007176:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800717a:	d106      	bne.n	800718a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800717c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800717e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007182:	d102      	bne.n	800718a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007184:	4b5f      	ldr	r3, [pc, #380]	@ (8007304 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007186:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007188:	e010      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800718a:	4b5c      	ldr	r3, [pc, #368]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007192:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007196:	d106      	bne.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8007198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800719a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800719e:	d102      	bne.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80071a0:	4b59      	ldr	r3, [pc, #356]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80071a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071a4:	e002      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80071a6:	2300      	movs	r3, #0
 80071a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80071aa:	e2da      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80071ac:	e2d9      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80071ae:	4b57      	ldr	r3, [pc, #348]	@ (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80071b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071b2:	e2d6      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80071b4:	2300      	movs	r3, #0
 80071b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071b8:	e2d3      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80071ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071be:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80071c2:	430b      	orrs	r3, r1
 80071c4:	f040 80a7 	bne.w	8007316 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80071c8:	4b4c      	ldr	r3, [pc, #304]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80071ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071cc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80071d0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80071d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80071d8:	d055      	beq.n	8007286 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 80071da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80071e0:	f200 8096 	bhi.w	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80071e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80071ea:	f000 8084 	beq.w	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 80071ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80071f4:	f200 808c 	bhi.w	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80071f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071fe:	d030      	beq.n	8007262 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007202:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007206:	f200 8083 	bhi.w	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800720a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800720c:	2b00      	cmp	r3, #0
 800720e:	d004      	beq.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8007210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007212:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007216:	d012      	beq.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8007218:	e07a      	b.n	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800721a:	4b38      	ldr	r3, [pc, #224]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007222:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007226:	d107      	bne.n	8007238 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007228:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800722c:	4618      	mov	r0, r3
 800722e:	f000 fd63 	bl	8007cf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007234:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007236:	e294      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007238:	2300      	movs	r3, #0
 800723a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800723c:	e291      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800723e:	4b2f      	ldr	r3, [pc, #188]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007246:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800724a:	d107      	bne.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800724c:	f107 0318 	add.w	r3, r7, #24
 8007250:	4618      	mov	r0, r3
 8007252:	f000 faa9 	bl	80077a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800725a:	e282      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800725c:	2300      	movs	r3, #0
 800725e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007260:	e27f      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007262:	4b26      	ldr	r3, [pc, #152]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800726a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800726e:	d107      	bne.n	8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007270:	f107 030c 	add.w	r3, r7, #12
 8007274:	4618      	mov	r0, r3
 8007276:	f000 fbeb 	bl	8007a50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800727e:	e270      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007280:	2300      	movs	r3, #0
 8007282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007284:	e26d      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007286:	4b1d      	ldr	r3, [pc, #116]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800728a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800728e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007290:	4b1a      	ldr	r3, [pc, #104]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 0304 	and.w	r3, r3, #4
 8007298:	2b04      	cmp	r3, #4
 800729a:	d10c      	bne.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800729c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d109      	bne.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072a2:	4b16      	ldr	r3, [pc, #88]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	08db      	lsrs	r3, r3, #3
 80072a8:	f003 0303 	and.w	r3, r3, #3
 80072ac:	4a14      	ldr	r2, [pc, #80]	@ (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80072ae:	fa22 f303 	lsr.w	r3, r2, r3
 80072b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072b4:	e01e      	b.n	80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80072b6:	4b11      	ldr	r3, [pc, #68]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072c2:	d106      	bne.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80072c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072ca:	d102      	bne.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80072cc:	4b0d      	ldr	r3, [pc, #52]	@ (8007304 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80072ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072d0:	e010      	b.n	80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80072d2:	4b0a      	ldr	r3, [pc, #40]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072de:	d106      	bne.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80072e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072e6:	d102      	bne.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80072e8:	4b07      	ldr	r3, [pc, #28]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072ec:	e002      	b.n	80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80072ee:	2300      	movs	r3, #0
 80072f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80072f2:	e236      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80072f4:	e235      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80072f6:	4b05      	ldr	r3, [pc, #20]	@ (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80072f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072fa:	e232      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80072fc:	58024400 	.word	0x58024400
 8007300:	03d09000 	.word	0x03d09000
 8007304:	003d0900 	.word	0x003d0900
 8007308:	017d7840 	.word	0x017d7840
 800730c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8007310:	2300      	movs	r3, #0
 8007312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007314:	e225      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007316:	e9d7 2300 	ldrd	r2, r3, [r7]
 800731a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800731e:	430b      	orrs	r3, r1
 8007320:	f040 8085 	bne.w	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007324:	4b9c      	ldr	r3, [pc, #624]	@ (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007326:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007328:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800732c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800732e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007330:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007334:	d06b      	beq.n	800740e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8007336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007338:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800733c:	d874      	bhi.n	8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800733e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007340:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007344:	d056      	beq.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8007346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007348:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800734c:	d86c      	bhi.n	8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800734e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007350:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007354:	d03b      	beq.n	80073ce <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8007356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007358:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800735c:	d864      	bhi.n	8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800735e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007360:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007364:	d021      	beq.n	80073aa <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8007366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007368:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800736c:	d85c      	bhi.n	8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800736e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007370:	2b00      	cmp	r3, #0
 8007372:	d004      	beq.n	800737e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8007374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007376:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800737a:	d004      	beq.n	8007386 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800737c:	e054      	b.n	8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800737e:	f7fe fb75 	bl	8005a6c <HAL_RCC_GetPCLK1Freq>
 8007382:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007384:	e1ed      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007386:	4b84      	ldr	r3, [pc, #528]	@ (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800738e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007392:	d107      	bne.n	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007394:	f107 0318 	add.w	r3, r7, #24
 8007398:	4618      	mov	r0, r3
 800739a:	f000 fa05 	bl	80077a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073a2:	e1de      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80073a4:	2300      	movs	r3, #0
 80073a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073a8:	e1db      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80073aa:	4b7b      	ldr	r3, [pc, #492]	@ (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80073b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073b6:	d107      	bne.n	80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073b8:	f107 030c 	add.w	r3, r7, #12
 80073bc:	4618      	mov	r0, r3
 80073be:	f000 fb47 	bl	8007a50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073c6:	e1cc      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80073c8:	2300      	movs	r3, #0
 80073ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073cc:	e1c9      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80073ce:	4b72      	ldr	r3, [pc, #456]	@ (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f003 0304 	and.w	r3, r3, #4
 80073d6:	2b04      	cmp	r3, #4
 80073d8:	d109      	bne.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80073da:	4b6f      	ldr	r3, [pc, #444]	@ (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	08db      	lsrs	r3, r3, #3
 80073e0:	f003 0303 	and.w	r3, r3, #3
 80073e4:	4a6d      	ldr	r2, [pc, #436]	@ (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80073e6:	fa22 f303 	lsr.w	r3, r2, r3
 80073ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073ec:	e1b9      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80073ee:	2300      	movs	r3, #0
 80073f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073f2:	e1b6      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80073f4:	4b68      	ldr	r3, [pc, #416]	@ (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007400:	d102      	bne.n	8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8007402:	4b67      	ldr	r3, [pc, #412]	@ (80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8007404:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007406:	e1ac      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007408:	2300      	movs	r3, #0
 800740a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800740c:	e1a9      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800740e:	4b62      	ldr	r3, [pc, #392]	@ (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007416:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800741a:	d102      	bne.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800741c:	4b61      	ldr	r3, [pc, #388]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800741e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007420:	e19f      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007422:	2300      	movs	r3, #0
 8007424:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007426:	e19c      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007428:	2300      	movs	r3, #0
 800742a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800742c:	e199      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800742e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007432:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007436:	430b      	orrs	r3, r1
 8007438:	d173      	bne.n	8007522 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800743a:	4b57      	ldr	r3, [pc, #348]	@ (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800743c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800743e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007442:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007446:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800744a:	d02f      	beq.n	80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800744c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800744e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007452:	d863      	bhi.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8007454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007456:	2b00      	cmp	r3, #0
 8007458:	d004      	beq.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800745a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800745c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007460:	d012      	beq.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8007462:	e05b      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007464:	4b4c      	ldr	r3, [pc, #304]	@ (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800746c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007470:	d107      	bne.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007472:	f107 0318 	add.w	r3, r7, #24
 8007476:	4618      	mov	r0, r3
 8007478:	f000 f996 	bl	80077a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007480:	e16f      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007482:	2300      	movs	r3, #0
 8007484:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007486:	e16c      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007488:	4b43      	ldr	r3, [pc, #268]	@ (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007490:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007494:	d107      	bne.n	80074a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007496:	f107 030c 	add.w	r3, r7, #12
 800749a:	4618      	mov	r0, r3
 800749c:	f000 fad8 	bl	8007a50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074a4:	e15d      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80074a6:	2300      	movs	r3, #0
 80074a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074aa:	e15a      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80074ac:	4b3a      	ldr	r3, [pc, #232]	@ (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80074ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80074b4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80074b6:	4b38      	ldr	r3, [pc, #224]	@ (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 0304 	and.w	r3, r3, #4
 80074be:	2b04      	cmp	r3, #4
 80074c0:	d10c      	bne.n	80074dc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80074c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d109      	bne.n	80074dc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074c8:	4b33      	ldr	r3, [pc, #204]	@ (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	08db      	lsrs	r3, r3, #3
 80074ce:	f003 0303 	and.w	r3, r3, #3
 80074d2:	4a32      	ldr	r2, [pc, #200]	@ (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80074d4:	fa22 f303 	lsr.w	r3, r2, r3
 80074d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074da:	e01e      	b.n	800751a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80074dc:	4b2e      	ldr	r3, [pc, #184]	@ (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074e8:	d106      	bne.n	80074f8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80074ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074f0:	d102      	bne.n	80074f8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80074f2:	4b2b      	ldr	r3, [pc, #172]	@ (80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80074f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074f6:	e010      	b.n	800751a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80074f8:	4b27      	ldr	r3, [pc, #156]	@ (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007500:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007504:	d106      	bne.n	8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8007506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007508:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800750c:	d102      	bne.n	8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800750e:	4b25      	ldr	r3, [pc, #148]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8007510:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007512:	e002      	b.n	800751a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007514:	2300      	movs	r3, #0
 8007516:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007518:	e123      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800751a:	e122      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800751c:	2300      	movs	r3, #0
 800751e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007520:	e11f      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007522:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007526:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800752a:	430b      	orrs	r3, r1
 800752c:	d13c      	bne.n	80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800752e:	4b1a      	ldr	r3, [pc, #104]	@ (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007532:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007536:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800753a:	2b00      	cmp	r3, #0
 800753c:	d004      	beq.n	8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800753e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007544:	d012      	beq.n	800756c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8007546:	e023      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007548:	4b13      	ldr	r3, [pc, #76]	@ (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007550:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007554:	d107      	bne.n	8007566 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007556:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800755a:	4618      	mov	r0, r3
 800755c:	f000 fbcc 	bl	8007cf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007564:	e0fd      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007566:	2300      	movs	r3, #0
 8007568:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800756a:	e0fa      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800756c:	4b0a      	ldr	r3, [pc, #40]	@ (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007574:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007578:	d107      	bne.n	800758a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800757a:	f107 0318 	add.w	r3, r7, #24
 800757e:	4618      	mov	r0, r3
 8007580:	f000 f912 	bl	80077a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007584:	6a3b      	ldr	r3, [r7, #32]
 8007586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007588:	e0eb      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800758a:	2300      	movs	r3, #0
 800758c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800758e:	e0e8      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007590:	2300      	movs	r3, #0
 8007592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007594:	e0e5      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007596:	bf00      	nop
 8007598:	58024400 	.word	0x58024400
 800759c:	03d09000 	.word	0x03d09000
 80075a0:	003d0900 	.word	0x003d0900
 80075a4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80075a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075ac:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80075b0:	430b      	orrs	r3, r1
 80075b2:	f040 8085 	bne.w	80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80075b6:	4b6d      	ldr	r3, [pc, #436]	@ (800776c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80075b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075ba:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80075be:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80075c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80075c6:	d06b      	beq.n	80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 80075c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80075ce:	d874      	bhi.n	80076ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80075d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075d6:	d056      	beq.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 80075d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075de:	d86c      	bhi.n	80076ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80075e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80075e6:	d03b      	beq.n	8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 80075e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80075ee:	d864      	bhi.n	80076ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80075f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075f6:	d021      	beq.n	800763c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80075f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075fe:	d85c      	bhi.n	80076ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8007600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007602:	2b00      	cmp	r3, #0
 8007604:	d004      	beq.n	8007610 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8007606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007608:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800760c:	d004      	beq.n	8007618 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800760e:	e054      	b.n	80076ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007610:	f000 f8b4 	bl	800777c <HAL_RCCEx_GetD3PCLK1Freq>
 8007614:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007616:	e0a4      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007618:	4b54      	ldr	r3, [pc, #336]	@ (800776c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007620:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007624:	d107      	bne.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007626:	f107 0318 	add.w	r3, r7, #24
 800762a:	4618      	mov	r0, r3
 800762c:	f000 f8bc 	bl	80077a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007634:	e095      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007636:	2300      	movs	r3, #0
 8007638:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800763a:	e092      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800763c:	4b4b      	ldr	r3, [pc, #300]	@ (800776c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007644:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007648:	d107      	bne.n	800765a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800764a:	f107 030c 	add.w	r3, r7, #12
 800764e:	4618      	mov	r0, r3
 8007650:	f000 f9fe 	bl	8007a50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007658:	e083      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800765a:	2300      	movs	r3, #0
 800765c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800765e:	e080      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007660:	4b42      	ldr	r3, [pc, #264]	@ (800776c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 0304 	and.w	r3, r3, #4
 8007668:	2b04      	cmp	r3, #4
 800766a:	d109      	bne.n	8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800766c:	4b3f      	ldr	r3, [pc, #252]	@ (800776c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	08db      	lsrs	r3, r3, #3
 8007672:	f003 0303 	and.w	r3, r3, #3
 8007676:	4a3e      	ldr	r2, [pc, #248]	@ (8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8007678:	fa22 f303 	lsr.w	r3, r2, r3
 800767c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800767e:	e070      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007680:	2300      	movs	r3, #0
 8007682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007684:	e06d      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007686:	4b39      	ldr	r3, [pc, #228]	@ (800776c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800768e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007692:	d102      	bne.n	800769a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8007694:	4b37      	ldr	r3, [pc, #220]	@ (8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007696:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007698:	e063      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800769a:	2300      	movs	r3, #0
 800769c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800769e:	e060      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80076a0:	4b32      	ldr	r3, [pc, #200]	@ (800776c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076ac:	d102      	bne.n	80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 80076ae:	4b32      	ldr	r3, [pc, #200]	@ (8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80076b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076b2:	e056      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80076b4:	2300      	movs	r3, #0
 80076b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076b8:	e053      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80076ba:	2300      	movs	r3, #0
 80076bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076be:	e050      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80076c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076c4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80076c8:	430b      	orrs	r3, r1
 80076ca:	d148      	bne.n	800775e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80076cc:	4b27      	ldr	r3, [pc, #156]	@ (800776c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80076ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80076d4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80076d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076dc:	d02a      	beq.n	8007734 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 80076de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076e4:	d838      	bhi.n	8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80076e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d004      	beq.n	80076f6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80076ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076f2:	d00d      	beq.n	8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80076f4:	e030      	b.n	8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80076f6:	4b1d      	ldr	r3, [pc, #116]	@ (800776c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007702:	d102      	bne.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8007704:	4b1c      	ldr	r3, [pc, #112]	@ (8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007708:	e02b      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800770a:	2300      	movs	r3, #0
 800770c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800770e:	e028      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007710:	4b16      	ldr	r3, [pc, #88]	@ (800776c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007718:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800771c:	d107      	bne.n	800772e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800771e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007722:	4618      	mov	r0, r3
 8007724:	f000 fae8 	bl	8007cf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800772a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800772c:	e019      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800772e:	2300      	movs	r3, #0
 8007730:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007732:	e016      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007734:	4b0d      	ldr	r3, [pc, #52]	@ (800776c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800773c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007740:	d107      	bne.n	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007742:	f107 0318 	add.w	r3, r7, #24
 8007746:	4618      	mov	r0, r3
 8007748:	f000 f82e 	bl	80077a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007750:	e007      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007752:	2300      	movs	r3, #0
 8007754:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007756:	e004      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007758:	2300      	movs	r3, #0
 800775a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800775c:	e001      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800775e:	2300      	movs	r3, #0
 8007760:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8007762:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007764:	4618      	mov	r0, r3
 8007766:	3740      	adds	r7, #64	@ 0x40
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}
 800776c:	58024400 	.word	0x58024400
 8007770:	03d09000 	.word	0x03d09000
 8007774:	003d0900 	.word	0x003d0900
 8007778:	017d7840 	.word	0x017d7840

0800777c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007780:	f7fe f944 	bl	8005a0c <HAL_RCC_GetHCLKFreq>
 8007784:	4602      	mov	r2, r0
 8007786:	4b06      	ldr	r3, [pc, #24]	@ (80077a0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007788:	6a1b      	ldr	r3, [r3, #32]
 800778a:	091b      	lsrs	r3, r3, #4
 800778c:	f003 0307 	and.w	r3, r3, #7
 8007790:	4904      	ldr	r1, [pc, #16]	@ (80077a4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007792:	5ccb      	ldrb	r3, [r1, r3]
 8007794:	f003 031f 	and.w	r3, r3, #31
 8007798:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800779c:	4618      	mov	r0, r3
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	58024400 	.word	0x58024400
 80077a4:	0800d6bc 	.word	0x0800d6bc

080077a8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b089      	sub	sp, #36	@ 0x24
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80077b0:	4ba1      	ldr	r3, [pc, #644]	@ (8007a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077b4:	f003 0303 	and.w	r3, r3, #3
 80077b8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80077ba:	4b9f      	ldr	r3, [pc, #636]	@ (8007a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077be:	0b1b      	lsrs	r3, r3, #12
 80077c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077c4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80077c6:	4b9c      	ldr	r3, [pc, #624]	@ (8007a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ca:	091b      	lsrs	r3, r3, #4
 80077cc:	f003 0301 	and.w	r3, r3, #1
 80077d0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80077d2:	4b99      	ldr	r3, [pc, #612]	@ (8007a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077d6:	08db      	lsrs	r3, r3, #3
 80077d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077dc:	693a      	ldr	r2, [r7, #16]
 80077de:	fb02 f303 	mul.w	r3, r2, r3
 80077e2:	ee07 3a90 	vmov	s15, r3
 80077e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f000 8111 	beq.w	8007a18 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	f000 8083 	beq.w	8007904 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	2b02      	cmp	r3, #2
 8007802:	f200 80a1 	bhi.w	8007948 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d003      	beq.n	8007814 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	2b01      	cmp	r3, #1
 8007810:	d056      	beq.n	80078c0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007812:	e099      	b.n	8007948 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007814:	4b88      	ldr	r3, [pc, #544]	@ (8007a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 0320 	and.w	r3, r3, #32
 800781c:	2b00      	cmp	r3, #0
 800781e:	d02d      	beq.n	800787c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007820:	4b85      	ldr	r3, [pc, #532]	@ (8007a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	08db      	lsrs	r3, r3, #3
 8007826:	f003 0303 	and.w	r3, r3, #3
 800782a:	4a84      	ldr	r2, [pc, #528]	@ (8007a3c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800782c:	fa22 f303 	lsr.w	r3, r2, r3
 8007830:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	ee07 3a90 	vmov	s15, r3
 8007838:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	ee07 3a90 	vmov	s15, r3
 8007842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800784a:	4b7b      	ldr	r3, [pc, #492]	@ (8007a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800784c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800784e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007852:	ee07 3a90 	vmov	s15, r3
 8007856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800785a:	ed97 6a03 	vldr	s12, [r7, #12]
 800785e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007a40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800786a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800786e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007876:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800787a:	e087      	b.n	800798c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	ee07 3a90 	vmov	s15, r3
 8007882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007886:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007a44 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800788a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800788e:	4b6a      	ldr	r3, [pc, #424]	@ (8007a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007896:	ee07 3a90 	vmov	s15, r3
 800789a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800789e:	ed97 6a03 	vldr	s12, [r7, #12]
 80078a2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007a40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80078a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078be:	e065      	b.n	800798c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	ee07 3a90 	vmov	s15, r3
 80078c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007a48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80078ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078d2:	4b59      	ldr	r3, [pc, #356]	@ (8007a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078da:	ee07 3a90 	vmov	s15, r3
 80078de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80078e6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007a40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80078ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007902:	e043      	b.n	800798c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	ee07 3a90 	vmov	s15, r3
 800790a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800790e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007a4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007916:	4b48      	ldr	r3, [pc, #288]	@ (8007a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800791a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800791e:	ee07 3a90 	vmov	s15, r3
 8007922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007926:	ed97 6a03 	vldr	s12, [r7, #12]
 800792a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007a40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800792e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007936:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800793a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800793e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007942:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007946:	e021      	b.n	800798c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	ee07 3a90 	vmov	s15, r3
 800794e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007952:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007a48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800795a:	4b37      	ldr	r3, [pc, #220]	@ (8007a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800795c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800795e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007962:	ee07 3a90 	vmov	s15, r3
 8007966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800796a:	ed97 6a03 	vldr	s12, [r7, #12]
 800796e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007a40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800797a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800797e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007986:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800798a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800798c:	4b2a      	ldr	r3, [pc, #168]	@ (8007a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800798e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007990:	0a5b      	lsrs	r3, r3, #9
 8007992:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007996:	ee07 3a90 	vmov	s15, r3
 800799a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800799e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80079a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80079aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079b2:	ee17 2a90 	vmov	r2, s15
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80079ba:	4b1f      	ldr	r3, [pc, #124]	@ (8007a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079be:	0c1b      	lsrs	r3, r3, #16
 80079c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079c4:	ee07 3a90 	vmov	s15, r3
 80079c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80079d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80079d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079e0:	ee17 2a90 	vmov	r2, s15
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80079e8:	4b13      	ldr	r3, [pc, #76]	@ (8007a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ec:	0e1b      	lsrs	r3, r3, #24
 80079ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079f2:	ee07 3a90 	vmov	s15, r3
 80079f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80079fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a02:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a0e:	ee17 2a90 	vmov	r2, s15
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007a16:	e008      	b.n	8007a2a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	609a      	str	r2, [r3, #8]
}
 8007a2a:	bf00      	nop
 8007a2c:	3724      	adds	r7, #36	@ 0x24
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop
 8007a38:	58024400 	.word	0x58024400
 8007a3c:	03d09000 	.word	0x03d09000
 8007a40:	46000000 	.word	0x46000000
 8007a44:	4c742400 	.word	0x4c742400
 8007a48:	4a742400 	.word	0x4a742400
 8007a4c:	4bbebc20 	.word	0x4bbebc20

08007a50 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b089      	sub	sp, #36	@ 0x24
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a58:	4ba1      	ldr	r3, [pc, #644]	@ (8007ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a5c:	f003 0303 	and.w	r3, r3, #3
 8007a60:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007a62:	4b9f      	ldr	r3, [pc, #636]	@ (8007ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a66:	0d1b      	lsrs	r3, r3, #20
 8007a68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a6c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007a6e:	4b9c      	ldr	r3, [pc, #624]	@ (8007ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a72:	0a1b      	lsrs	r3, r3, #8
 8007a74:	f003 0301 	and.w	r3, r3, #1
 8007a78:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007a7a:	4b99      	ldr	r3, [pc, #612]	@ (8007ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a7e:	08db      	lsrs	r3, r3, #3
 8007a80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a84:	693a      	ldr	r2, [r7, #16]
 8007a86:	fb02 f303 	mul.w	r3, r2, r3
 8007a8a:	ee07 3a90 	vmov	s15, r3
 8007a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 8111 	beq.w	8007cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	2b02      	cmp	r3, #2
 8007aa2:	f000 8083 	beq.w	8007bac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	f200 80a1 	bhi.w	8007bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d003      	beq.n	8007abc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d056      	beq.n	8007b68 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007aba:	e099      	b.n	8007bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007abc:	4b88      	ldr	r3, [pc, #544]	@ (8007ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 0320 	and.w	r3, r3, #32
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d02d      	beq.n	8007b24 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ac8:	4b85      	ldr	r3, [pc, #532]	@ (8007ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	08db      	lsrs	r3, r3, #3
 8007ace:	f003 0303 	and.w	r3, r3, #3
 8007ad2:	4a84      	ldr	r2, [pc, #528]	@ (8007ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ad8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	ee07 3a90 	vmov	s15, r3
 8007ae0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	ee07 3a90 	vmov	s15, r3
 8007aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007af2:	4b7b      	ldr	r3, [pc, #492]	@ (8007ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007afa:	ee07 3a90 	vmov	s15, r3
 8007afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b02:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b06:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007b22:	e087      	b.n	8007c34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	ee07 3a90 	vmov	s15, r3
 8007b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b2e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007cec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b36:	4b6a      	ldr	r3, [pc, #424]	@ (8007ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b3e:	ee07 3a90 	vmov	s15, r3
 8007b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b46:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b4a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b66:	e065      	b.n	8007c34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	ee07 3a90 	vmov	s15, r3
 8007b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b72:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b7a:	4b59      	ldr	r3, [pc, #356]	@ (8007ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b82:	ee07 3a90 	vmov	s15, r3
 8007b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b8e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ba6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007baa:	e043      	b.n	8007c34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	ee07 3a90 	vmov	s15, r3
 8007bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bb6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bbe:	4b48      	ldr	r3, [pc, #288]	@ (8007ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bc6:	ee07 3a90 	vmov	s15, r3
 8007bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bd2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bee:	e021      	b.n	8007c34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	ee07 3a90 	vmov	s15, r3
 8007bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bfa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c02:	4b37      	ldr	r3, [pc, #220]	@ (8007ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c0a:	ee07 3a90 	vmov	s15, r3
 8007c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c12:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c16:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c32:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007c34:	4b2a      	ldr	r3, [pc, #168]	@ (8007ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c38:	0a5b      	lsrs	r3, r3, #9
 8007c3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c3e:	ee07 3a90 	vmov	s15, r3
 8007c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c5a:	ee17 2a90 	vmov	r2, s15
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007c62:	4b1f      	ldr	r3, [pc, #124]	@ (8007ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c66:	0c1b      	lsrs	r3, r3, #16
 8007c68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c6c:	ee07 3a90 	vmov	s15, r3
 8007c70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c88:	ee17 2a90 	vmov	r2, s15
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007c90:	4b13      	ldr	r3, [pc, #76]	@ (8007ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c94:	0e1b      	lsrs	r3, r3, #24
 8007c96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c9a:	ee07 3a90 	vmov	s15, r3
 8007c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ca2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ca6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007caa:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cb6:	ee17 2a90 	vmov	r2, s15
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007cbe:	e008      	b.n	8007cd2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	609a      	str	r2, [r3, #8]
}
 8007cd2:	bf00      	nop
 8007cd4:	3724      	adds	r7, #36	@ 0x24
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	58024400 	.word	0x58024400
 8007ce4:	03d09000 	.word	0x03d09000
 8007ce8:	46000000 	.word	0x46000000
 8007cec:	4c742400 	.word	0x4c742400
 8007cf0:	4a742400 	.word	0x4a742400
 8007cf4:	4bbebc20 	.word	0x4bbebc20

08007cf8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b089      	sub	sp, #36	@ 0x24
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d00:	4ba0      	ldr	r3, [pc, #640]	@ (8007f84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d04:	f003 0303 	and.w	r3, r3, #3
 8007d08:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007d0a:	4b9e      	ldr	r3, [pc, #632]	@ (8007f84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d0e:	091b      	lsrs	r3, r3, #4
 8007d10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d14:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007d16:	4b9b      	ldr	r3, [pc, #620]	@ (8007f84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d1a:	f003 0301 	and.w	r3, r3, #1
 8007d1e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007d20:	4b98      	ldr	r3, [pc, #608]	@ (8007f84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d24:	08db      	lsrs	r3, r3, #3
 8007d26:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	fb02 f303 	mul.w	r3, r2, r3
 8007d30:	ee07 3a90 	vmov	s15, r3
 8007d34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d38:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	f000 8111 	beq.w	8007f66 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	f000 8083 	beq.w	8007e52 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	f200 80a1 	bhi.w	8007e96 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d003      	beq.n	8007d62 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007d5a:	69bb      	ldr	r3, [r7, #24]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d056      	beq.n	8007e0e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007d60:	e099      	b.n	8007e96 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d62:	4b88      	ldr	r3, [pc, #544]	@ (8007f84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 0320 	and.w	r3, r3, #32
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d02d      	beq.n	8007dca <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d6e:	4b85      	ldr	r3, [pc, #532]	@ (8007f84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	08db      	lsrs	r3, r3, #3
 8007d74:	f003 0303 	and.w	r3, r3, #3
 8007d78:	4a83      	ldr	r2, [pc, #524]	@ (8007f88 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d7e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	ee07 3a90 	vmov	s15, r3
 8007d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	ee07 3a90 	vmov	s15, r3
 8007d90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d98:	4b7a      	ldr	r3, [pc, #488]	@ (8007f84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007da0:	ee07 3a90 	vmov	s15, r3
 8007da4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007da8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dac:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8007f8c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007db0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007db4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007db8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dc4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007dc8:	e087      	b.n	8007eda <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	ee07 3a90 	vmov	s15, r3
 8007dd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dd4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8007f90 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007dd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ddc:	4b69      	ldr	r3, [pc, #420]	@ (8007f84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007de0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007de4:	ee07 3a90 	vmov	s15, r3
 8007de8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dec:	ed97 6a03 	vldr	s12, [r7, #12]
 8007df0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8007f8c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007df4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007df8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dfc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e08:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e0c:	e065      	b.n	8007eda <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	ee07 3a90 	vmov	s15, r3
 8007e14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e18:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8007f94 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007e1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e20:	4b58      	ldr	r3, [pc, #352]	@ (8007f84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e28:	ee07 3a90 	vmov	s15, r3
 8007e2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e30:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e34:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8007f8c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007e38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e4c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e50:	e043      	b.n	8007eda <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	ee07 3a90 	vmov	s15, r3
 8007e58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e5c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8007f98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007e60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e64:	4b47      	ldr	r3, [pc, #284]	@ (8007f84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e6c:	ee07 3a90 	vmov	s15, r3
 8007e70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e74:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e78:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8007f8c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007e7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e90:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e94:	e021      	b.n	8007eda <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	ee07 3a90 	vmov	s15, r3
 8007e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ea0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8007f90 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007ea4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ea8:	4b36      	ldr	r3, [pc, #216]	@ (8007f84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eb0:	ee07 3a90 	vmov	s15, r3
 8007eb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eb8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ebc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8007f8c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007ec0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ec4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ec8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ecc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ed4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ed8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007eda:	4b2a      	ldr	r3, [pc, #168]	@ (8007f84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ede:	0a5b      	lsrs	r3, r3, #9
 8007ee0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ee4:	ee07 3a90 	vmov	s15, r3
 8007ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ef0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ef4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ef8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007efc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f00:	ee17 2a90 	vmov	r2, s15
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007f08:	4b1e      	ldr	r3, [pc, #120]	@ (8007f84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f0c:	0c1b      	lsrs	r3, r3, #16
 8007f0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f12:	ee07 3a90 	vmov	s15, r3
 8007f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007f1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f22:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f2e:	ee17 2a90 	vmov	r2, s15
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007f36:	4b13      	ldr	r3, [pc, #76]	@ (8007f84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f3a:	0e1b      	lsrs	r3, r3, #24
 8007f3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f40:	ee07 3a90 	vmov	s15, r3
 8007f44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007f4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f50:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f5c:	ee17 2a90 	vmov	r2, s15
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007f64:	e008      	b.n	8007f78 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	609a      	str	r2, [r3, #8]
}
 8007f78:	bf00      	nop
 8007f7a:	3724      	adds	r7, #36	@ 0x24
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr
 8007f84:	58024400 	.word	0x58024400
 8007f88:	03d09000 	.word	0x03d09000
 8007f8c:	46000000 	.word	0x46000000
 8007f90:	4c742400 	.word	0x4c742400
 8007f94:	4a742400 	.word	0x4a742400
 8007f98:	4bbebc20 	.word	0x4bbebc20

08007f9c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007faa:	4b53      	ldr	r3, [pc, #332]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8007fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fae:	f003 0303 	and.w	r3, r3, #3
 8007fb2:	2b03      	cmp	r3, #3
 8007fb4:	d101      	bne.n	8007fba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e099      	b.n	80080ee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007fba:	4b4f      	ldr	r3, [pc, #316]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a4e      	ldr	r2, [pc, #312]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8007fc0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007fc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fc6:	f7f9 fe43 	bl	8001c50 <HAL_GetTick>
 8007fca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007fcc:	e008      	b.n	8007fe0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007fce:	f7f9 fe3f 	bl	8001c50 <HAL_GetTick>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	1ad3      	subs	r3, r2, r3
 8007fd8:	2b02      	cmp	r3, #2
 8007fda:	d901      	bls.n	8007fe0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007fdc:	2303      	movs	r3, #3
 8007fde:	e086      	b.n	80080ee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007fe0:	4b45      	ldr	r3, [pc, #276]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d1f0      	bne.n	8007fce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007fec:	4b42      	ldr	r3, [pc, #264]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8007fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ff0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	031b      	lsls	r3, r3, #12
 8007ffa:	493f      	ldr	r1, [pc, #252]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	628b      	str	r3, [r1, #40]	@ 0x28
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	3b01      	subs	r3, #1
 8008006:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	3b01      	subs	r3, #1
 8008010:	025b      	lsls	r3, r3, #9
 8008012:	b29b      	uxth	r3, r3
 8008014:	431a      	orrs	r2, r3
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	3b01      	subs	r3, #1
 800801c:	041b      	lsls	r3, r3, #16
 800801e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008022:	431a      	orrs	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	691b      	ldr	r3, [r3, #16]
 8008028:	3b01      	subs	r3, #1
 800802a:	061b      	lsls	r3, r3, #24
 800802c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008030:	4931      	ldr	r1, [pc, #196]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8008032:	4313      	orrs	r3, r2
 8008034:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008036:	4b30      	ldr	r3, [pc, #192]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8008038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800803a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	695b      	ldr	r3, [r3, #20]
 8008042:	492d      	ldr	r1, [pc, #180]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8008044:	4313      	orrs	r3, r2
 8008046:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008048:	4b2b      	ldr	r3, [pc, #172]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 800804a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800804c:	f023 0220 	bic.w	r2, r3, #32
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	699b      	ldr	r3, [r3, #24]
 8008054:	4928      	ldr	r1, [pc, #160]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8008056:	4313      	orrs	r3, r2
 8008058:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800805a:	4b27      	ldr	r3, [pc, #156]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 800805c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800805e:	4a26      	ldr	r2, [pc, #152]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8008060:	f023 0310 	bic.w	r3, r3, #16
 8008064:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008066:	4b24      	ldr	r3, [pc, #144]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8008068:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800806a:	4b24      	ldr	r3, [pc, #144]	@ (80080fc <RCCEx_PLL2_Config+0x160>)
 800806c:	4013      	ands	r3, r2
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	69d2      	ldr	r2, [r2, #28]
 8008072:	00d2      	lsls	r2, r2, #3
 8008074:	4920      	ldr	r1, [pc, #128]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8008076:	4313      	orrs	r3, r2
 8008078:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800807a:	4b1f      	ldr	r3, [pc, #124]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 800807c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800807e:	4a1e      	ldr	r2, [pc, #120]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8008080:	f043 0310 	orr.w	r3, r3, #16
 8008084:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d106      	bne.n	800809a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800808c:	4b1a      	ldr	r3, [pc, #104]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 800808e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008090:	4a19      	ldr	r2, [pc, #100]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8008092:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008096:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008098:	e00f      	b.n	80080ba <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	2b01      	cmp	r3, #1
 800809e:	d106      	bne.n	80080ae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80080a0:	4b15      	ldr	r3, [pc, #84]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 80080a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080a4:	4a14      	ldr	r2, [pc, #80]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 80080a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80080aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80080ac:	e005      	b.n	80080ba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80080ae:	4b12      	ldr	r3, [pc, #72]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 80080b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b2:	4a11      	ldr	r2, [pc, #68]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 80080b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80080b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80080ba:	4b0f      	ldr	r3, [pc, #60]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a0e      	ldr	r2, [pc, #56]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 80080c0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80080c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080c6:	f7f9 fdc3 	bl	8001c50 <HAL_GetTick>
 80080ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80080cc:	e008      	b.n	80080e0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80080ce:	f7f9 fdbf 	bl	8001c50 <HAL_GetTick>
 80080d2:	4602      	mov	r2, r0
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	1ad3      	subs	r3, r2, r3
 80080d8:	2b02      	cmp	r3, #2
 80080da:	d901      	bls.n	80080e0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80080dc:	2303      	movs	r3, #3
 80080de:	e006      	b.n	80080ee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80080e0:	4b05      	ldr	r3, [pc, #20]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d0f0      	beq.n	80080ce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80080ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3710      	adds	r7, #16
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	58024400 	.word	0x58024400
 80080fc:	ffff0007 	.word	0xffff0007

08008100 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800810a:	2300      	movs	r3, #0
 800810c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800810e:	4b53      	ldr	r3, [pc, #332]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 8008110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008112:	f003 0303 	and.w	r3, r3, #3
 8008116:	2b03      	cmp	r3, #3
 8008118:	d101      	bne.n	800811e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	e099      	b.n	8008252 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800811e:	4b4f      	ldr	r3, [pc, #316]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a4e      	ldr	r2, [pc, #312]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 8008124:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008128:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800812a:	f7f9 fd91 	bl	8001c50 <HAL_GetTick>
 800812e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008130:	e008      	b.n	8008144 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008132:	f7f9 fd8d 	bl	8001c50 <HAL_GetTick>
 8008136:	4602      	mov	r2, r0
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	1ad3      	subs	r3, r2, r3
 800813c:	2b02      	cmp	r3, #2
 800813e:	d901      	bls.n	8008144 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008140:	2303      	movs	r3, #3
 8008142:	e086      	b.n	8008252 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008144:	4b45      	ldr	r3, [pc, #276]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800814c:	2b00      	cmp	r3, #0
 800814e:	d1f0      	bne.n	8008132 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008150:	4b42      	ldr	r3, [pc, #264]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 8008152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008154:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	051b      	lsls	r3, r3, #20
 800815e:	493f      	ldr	r1, [pc, #252]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 8008160:	4313      	orrs	r3, r2
 8008162:	628b      	str	r3, [r1, #40]	@ 0x28
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	3b01      	subs	r3, #1
 800816a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	3b01      	subs	r3, #1
 8008174:	025b      	lsls	r3, r3, #9
 8008176:	b29b      	uxth	r3, r3
 8008178:	431a      	orrs	r2, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	3b01      	subs	r3, #1
 8008180:	041b      	lsls	r3, r3, #16
 8008182:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008186:	431a      	orrs	r2, r3
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	691b      	ldr	r3, [r3, #16]
 800818c:	3b01      	subs	r3, #1
 800818e:	061b      	lsls	r3, r3, #24
 8008190:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008194:	4931      	ldr	r1, [pc, #196]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 8008196:	4313      	orrs	r3, r2
 8008198:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800819a:	4b30      	ldr	r3, [pc, #192]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 800819c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800819e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	695b      	ldr	r3, [r3, #20]
 80081a6:	492d      	ldr	r1, [pc, #180]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 80081a8:	4313      	orrs	r3, r2
 80081aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80081ac:	4b2b      	ldr	r3, [pc, #172]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 80081ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081b0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	699b      	ldr	r3, [r3, #24]
 80081b8:	4928      	ldr	r1, [pc, #160]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 80081ba:	4313      	orrs	r3, r2
 80081bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80081be:	4b27      	ldr	r3, [pc, #156]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 80081c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081c2:	4a26      	ldr	r2, [pc, #152]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 80081c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80081ca:	4b24      	ldr	r3, [pc, #144]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 80081cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80081ce:	4b24      	ldr	r3, [pc, #144]	@ (8008260 <RCCEx_PLL3_Config+0x160>)
 80081d0:	4013      	ands	r3, r2
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	69d2      	ldr	r2, [r2, #28]
 80081d6:	00d2      	lsls	r2, r2, #3
 80081d8:	4920      	ldr	r1, [pc, #128]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 80081da:	4313      	orrs	r3, r2
 80081dc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80081de:	4b1f      	ldr	r3, [pc, #124]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 80081e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e2:	4a1e      	ldr	r2, [pc, #120]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 80081e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d106      	bne.n	80081fe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80081f0:	4b1a      	ldr	r3, [pc, #104]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 80081f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081f4:	4a19      	ldr	r2, [pc, #100]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 80081f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80081fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80081fc:	e00f      	b.n	800821e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d106      	bne.n	8008212 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008204:	4b15      	ldr	r3, [pc, #84]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 8008206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008208:	4a14      	ldr	r2, [pc, #80]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 800820a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800820e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008210:	e005      	b.n	800821e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008212:	4b12      	ldr	r3, [pc, #72]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 8008214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008216:	4a11      	ldr	r2, [pc, #68]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 8008218:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800821c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800821e:	4b0f      	ldr	r3, [pc, #60]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a0e      	ldr	r2, [pc, #56]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 8008224:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008228:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800822a:	f7f9 fd11 	bl	8001c50 <HAL_GetTick>
 800822e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008230:	e008      	b.n	8008244 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008232:	f7f9 fd0d 	bl	8001c50 <HAL_GetTick>
 8008236:	4602      	mov	r2, r0
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	1ad3      	subs	r3, r2, r3
 800823c:	2b02      	cmp	r3, #2
 800823e:	d901      	bls.n	8008244 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008240:	2303      	movs	r3, #3
 8008242:	e006      	b.n	8008252 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008244:	4b05      	ldr	r3, [pc, #20]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800824c:	2b00      	cmp	r3, #0
 800824e:	d0f0      	beq.n	8008232 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008250:	7bfb      	ldrb	r3, [r7, #15]
}
 8008252:	4618      	mov	r0, r3
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	58024400 	.word	0x58024400
 8008260:	ffff0007 	.word	0xffff0007

08008264 <_ZdlPvj>:
 8008264:	f000 b800 	b.w	8008268 <_ZdlPv>

08008268 <_ZdlPv>:
 8008268:	f000 b808 	b.w	800827c <free>

0800826c <malloc>:
 800826c:	4b02      	ldr	r3, [pc, #8]	@ (8008278 <malloc+0xc>)
 800826e:	4601      	mov	r1, r0
 8008270:	6818      	ldr	r0, [r3, #0]
 8008272:	f000 b82d 	b.w	80082d0 <_malloc_r>
 8008276:	bf00      	nop
 8008278:	24000010 	.word	0x24000010

0800827c <free>:
 800827c:	4b02      	ldr	r3, [pc, #8]	@ (8008288 <free+0xc>)
 800827e:	4601      	mov	r1, r0
 8008280:	6818      	ldr	r0, [r3, #0]
 8008282:	f000 b8f5 	b.w	8008470 <_free_r>
 8008286:	bf00      	nop
 8008288:	24000010 	.word	0x24000010

0800828c <sbrk_aligned>:
 800828c:	b570      	push	{r4, r5, r6, lr}
 800828e:	4e0f      	ldr	r6, [pc, #60]	@ (80082cc <sbrk_aligned+0x40>)
 8008290:	460c      	mov	r4, r1
 8008292:	6831      	ldr	r1, [r6, #0]
 8008294:	4605      	mov	r5, r0
 8008296:	b911      	cbnz	r1, 800829e <sbrk_aligned+0x12>
 8008298:	f000 f8ae 	bl	80083f8 <_sbrk_r>
 800829c:	6030      	str	r0, [r6, #0]
 800829e:	4621      	mov	r1, r4
 80082a0:	4628      	mov	r0, r5
 80082a2:	f000 f8a9 	bl	80083f8 <_sbrk_r>
 80082a6:	1c43      	adds	r3, r0, #1
 80082a8:	d103      	bne.n	80082b2 <sbrk_aligned+0x26>
 80082aa:	f04f 34ff 	mov.w	r4, #4294967295
 80082ae:	4620      	mov	r0, r4
 80082b0:	bd70      	pop	{r4, r5, r6, pc}
 80082b2:	1cc4      	adds	r4, r0, #3
 80082b4:	f024 0403 	bic.w	r4, r4, #3
 80082b8:	42a0      	cmp	r0, r4
 80082ba:	d0f8      	beq.n	80082ae <sbrk_aligned+0x22>
 80082bc:	1a21      	subs	r1, r4, r0
 80082be:	4628      	mov	r0, r5
 80082c0:	f000 f89a 	bl	80083f8 <_sbrk_r>
 80082c4:	3001      	adds	r0, #1
 80082c6:	d1f2      	bne.n	80082ae <sbrk_aligned+0x22>
 80082c8:	e7ef      	b.n	80082aa <sbrk_aligned+0x1e>
 80082ca:	bf00      	nop
 80082cc:	2400077c 	.word	0x2400077c

080082d0 <_malloc_r>:
 80082d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082d4:	1ccd      	adds	r5, r1, #3
 80082d6:	f025 0503 	bic.w	r5, r5, #3
 80082da:	3508      	adds	r5, #8
 80082dc:	2d0c      	cmp	r5, #12
 80082de:	bf38      	it	cc
 80082e0:	250c      	movcc	r5, #12
 80082e2:	2d00      	cmp	r5, #0
 80082e4:	4606      	mov	r6, r0
 80082e6:	db01      	blt.n	80082ec <_malloc_r+0x1c>
 80082e8:	42a9      	cmp	r1, r5
 80082ea:	d904      	bls.n	80082f6 <_malloc_r+0x26>
 80082ec:	230c      	movs	r3, #12
 80082ee:	6033      	str	r3, [r6, #0]
 80082f0:	2000      	movs	r0, #0
 80082f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80083cc <_malloc_r+0xfc>
 80082fa:	f000 f869 	bl	80083d0 <__malloc_lock>
 80082fe:	f8d8 3000 	ldr.w	r3, [r8]
 8008302:	461c      	mov	r4, r3
 8008304:	bb44      	cbnz	r4, 8008358 <_malloc_r+0x88>
 8008306:	4629      	mov	r1, r5
 8008308:	4630      	mov	r0, r6
 800830a:	f7ff ffbf 	bl	800828c <sbrk_aligned>
 800830e:	1c43      	adds	r3, r0, #1
 8008310:	4604      	mov	r4, r0
 8008312:	d158      	bne.n	80083c6 <_malloc_r+0xf6>
 8008314:	f8d8 4000 	ldr.w	r4, [r8]
 8008318:	4627      	mov	r7, r4
 800831a:	2f00      	cmp	r7, #0
 800831c:	d143      	bne.n	80083a6 <_malloc_r+0xd6>
 800831e:	2c00      	cmp	r4, #0
 8008320:	d04b      	beq.n	80083ba <_malloc_r+0xea>
 8008322:	6823      	ldr	r3, [r4, #0]
 8008324:	4639      	mov	r1, r7
 8008326:	4630      	mov	r0, r6
 8008328:	eb04 0903 	add.w	r9, r4, r3
 800832c:	f000 f864 	bl	80083f8 <_sbrk_r>
 8008330:	4581      	cmp	r9, r0
 8008332:	d142      	bne.n	80083ba <_malloc_r+0xea>
 8008334:	6821      	ldr	r1, [r4, #0]
 8008336:	1a6d      	subs	r5, r5, r1
 8008338:	4629      	mov	r1, r5
 800833a:	4630      	mov	r0, r6
 800833c:	f7ff ffa6 	bl	800828c <sbrk_aligned>
 8008340:	3001      	adds	r0, #1
 8008342:	d03a      	beq.n	80083ba <_malloc_r+0xea>
 8008344:	6823      	ldr	r3, [r4, #0]
 8008346:	442b      	add	r3, r5
 8008348:	6023      	str	r3, [r4, #0]
 800834a:	f8d8 3000 	ldr.w	r3, [r8]
 800834e:	685a      	ldr	r2, [r3, #4]
 8008350:	bb62      	cbnz	r2, 80083ac <_malloc_r+0xdc>
 8008352:	f8c8 7000 	str.w	r7, [r8]
 8008356:	e00f      	b.n	8008378 <_malloc_r+0xa8>
 8008358:	6822      	ldr	r2, [r4, #0]
 800835a:	1b52      	subs	r2, r2, r5
 800835c:	d420      	bmi.n	80083a0 <_malloc_r+0xd0>
 800835e:	2a0b      	cmp	r2, #11
 8008360:	d917      	bls.n	8008392 <_malloc_r+0xc2>
 8008362:	1961      	adds	r1, r4, r5
 8008364:	42a3      	cmp	r3, r4
 8008366:	6025      	str	r5, [r4, #0]
 8008368:	bf18      	it	ne
 800836a:	6059      	strne	r1, [r3, #4]
 800836c:	6863      	ldr	r3, [r4, #4]
 800836e:	bf08      	it	eq
 8008370:	f8c8 1000 	streq.w	r1, [r8]
 8008374:	5162      	str	r2, [r4, r5]
 8008376:	604b      	str	r3, [r1, #4]
 8008378:	4630      	mov	r0, r6
 800837a:	f000 f82f 	bl	80083dc <__malloc_unlock>
 800837e:	f104 000b 	add.w	r0, r4, #11
 8008382:	1d23      	adds	r3, r4, #4
 8008384:	f020 0007 	bic.w	r0, r0, #7
 8008388:	1ac2      	subs	r2, r0, r3
 800838a:	bf1c      	itt	ne
 800838c:	1a1b      	subne	r3, r3, r0
 800838e:	50a3      	strne	r3, [r4, r2]
 8008390:	e7af      	b.n	80082f2 <_malloc_r+0x22>
 8008392:	6862      	ldr	r2, [r4, #4]
 8008394:	42a3      	cmp	r3, r4
 8008396:	bf0c      	ite	eq
 8008398:	f8c8 2000 	streq.w	r2, [r8]
 800839c:	605a      	strne	r2, [r3, #4]
 800839e:	e7eb      	b.n	8008378 <_malloc_r+0xa8>
 80083a0:	4623      	mov	r3, r4
 80083a2:	6864      	ldr	r4, [r4, #4]
 80083a4:	e7ae      	b.n	8008304 <_malloc_r+0x34>
 80083a6:	463c      	mov	r4, r7
 80083a8:	687f      	ldr	r7, [r7, #4]
 80083aa:	e7b6      	b.n	800831a <_malloc_r+0x4a>
 80083ac:	461a      	mov	r2, r3
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	42a3      	cmp	r3, r4
 80083b2:	d1fb      	bne.n	80083ac <_malloc_r+0xdc>
 80083b4:	2300      	movs	r3, #0
 80083b6:	6053      	str	r3, [r2, #4]
 80083b8:	e7de      	b.n	8008378 <_malloc_r+0xa8>
 80083ba:	230c      	movs	r3, #12
 80083bc:	6033      	str	r3, [r6, #0]
 80083be:	4630      	mov	r0, r6
 80083c0:	f000 f80c 	bl	80083dc <__malloc_unlock>
 80083c4:	e794      	b.n	80082f0 <_malloc_r+0x20>
 80083c6:	6005      	str	r5, [r0, #0]
 80083c8:	e7d6      	b.n	8008378 <_malloc_r+0xa8>
 80083ca:	bf00      	nop
 80083cc:	24000780 	.word	0x24000780

080083d0 <__malloc_lock>:
 80083d0:	4801      	ldr	r0, [pc, #4]	@ (80083d8 <__malloc_lock+0x8>)
 80083d2:	f000 b84b 	b.w	800846c <__retarget_lock_acquire_recursive>
 80083d6:	bf00      	nop
 80083d8:	240008c0 	.word	0x240008c0

080083dc <__malloc_unlock>:
 80083dc:	4801      	ldr	r0, [pc, #4]	@ (80083e4 <__malloc_unlock+0x8>)
 80083de:	f000 b846 	b.w	800846e <__retarget_lock_release_recursive>
 80083e2:	bf00      	nop
 80083e4:	240008c0 	.word	0x240008c0

080083e8 <memset>:
 80083e8:	4402      	add	r2, r0
 80083ea:	4603      	mov	r3, r0
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d100      	bne.n	80083f2 <memset+0xa>
 80083f0:	4770      	bx	lr
 80083f2:	f803 1b01 	strb.w	r1, [r3], #1
 80083f6:	e7f9      	b.n	80083ec <memset+0x4>

080083f8 <_sbrk_r>:
 80083f8:	b538      	push	{r3, r4, r5, lr}
 80083fa:	4d06      	ldr	r5, [pc, #24]	@ (8008414 <_sbrk_r+0x1c>)
 80083fc:	2300      	movs	r3, #0
 80083fe:	4604      	mov	r4, r0
 8008400:	4608      	mov	r0, r1
 8008402:	602b      	str	r3, [r5, #0]
 8008404:	f7f9 fac6 	bl	8001994 <_sbrk>
 8008408:	1c43      	adds	r3, r0, #1
 800840a:	d102      	bne.n	8008412 <_sbrk_r+0x1a>
 800840c:	682b      	ldr	r3, [r5, #0]
 800840e:	b103      	cbz	r3, 8008412 <_sbrk_r+0x1a>
 8008410:	6023      	str	r3, [r4, #0]
 8008412:	bd38      	pop	{r3, r4, r5, pc}
 8008414:	240008bc 	.word	0x240008bc

08008418 <__errno>:
 8008418:	4b01      	ldr	r3, [pc, #4]	@ (8008420 <__errno+0x8>)
 800841a:	6818      	ldr	r0, [r3, #0]
 800841c:	4770      	bx	lr
 800841e:	bf00      	nop
 8008420:	24000010 	.word	0x24000010

08008424 <__libc_init_array>:
 8008424:	b570      	push	{r4, r5, r6, lr}
 8008426:	4d0d      	ldr	r5, [pc, #52]	@ (800845c <__libc_init_array+0x38>)
 8008428:	4c0d      	ldr	r4, [pc, #52]	@ (8008460 <__libc_init_array+0x3c>)
 800842a:	1b64      	subs	r4, r4, r5
 800842c:	10a4      	asrs	r4, r4, #2
 800842e:	2600      	movs	r6, #0
 8008430:	42a6      	cmp	r6, r4
 8008432:	d109      	bne.n	8008448 <__libc_init_array+0x24>
 8008434:	4d0b      	ldr	r5, [pc, #44]	@ (8008464 <__libc_init_array+0x40>)
 8008436:	4c0c      	ldr	r4, [pc, #48]	@ (8008468 <__libc_init_array+0x44>)
 8008438:	f000 f864 	bl	8008504 <_init>
 800843c:	1b64      	subs	r4, r4, r5
 800843e:	10a4      	asrs	r4, r4, #2
 8008440:	2600      	movs	r6, #0
 8008442:	42a6      	cmp	r6, r4
 8008444:	d105      	bne.n	8008452 <__libc_init_array+0x2e>
 8008446:	bd70      	pop	{r4, r5, r6, pc}
 8008448:	f855 3b04 	ldr.w	r3, [r5], #4
 800844c:	4798      	blx	r3
 800844e:	3601      	adds	r6, #1
 8008450:	e7ee      	b.n	8008430 <__libc_init_array+0xc>
 8008452:	f855 3b04 	ldr.w	r3, [r5], #4
 8008456:	4798      	blx	r3
 8008458:	3601      	adds	r6, #1
 800845a:	e7f2      	b.n	8008442 <__libc_init_array+0x1e>
 800845c:	0800d6d4 	.word	0x0800d6d4
 8008460:	0800d6d4 	.word	0x0800d6d4
 8008464:	0800d6d4 	.word	0x0800d6d4
 8008468:	0800d6dc 	.word	0x0800d6dc

0800846c <__retarget_lock_acquire_recursive>:
 800846c:	4770      	bx	lr

0800846e <__retarget_lock_release_recursive>:
 800846e:	4770      	bx	lr

08008470 <_free_r>:
 8008470:	b538      	push	{r3, r4, r5, lr}
 8008472:	4605      	mov	r5, r0
 8008474:	2900      	cmp	r1, #0
 8008476:	d041      	beq.n	80084fc <_free_r+0x8c>
 8008478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800847c:	1f0c      	subs	r4, r1, #4
 800847e:	2b00      	cmp	r3, #0
 8008480:	bfb8      	it	lt
 8008482:	18e4      	addlt	r4, r4, r3
 8008484:	f7ff ffa4 	bl	80083d0 <__malloc_lock>
 8008488:	4a1d      	ldr	r2, [pc, #116]	@ (8008500 <_free_r+0x90>)
 800848a:	6813      	ldr	r3, [r2, #0]
 800848c:	b933      	cbnz	r3, 800849c <_free_r+0x2c>
 800848e:	6063      	str	r3, [r4, #4]
 8008490:	6014      	str	r4, [r2, #0]
 8008492:	4628      	mov	r0, r5
 8008494:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008498:	f7ff bfa0 	b.w	80083dc <__malloc_unlock>
 800849c:	42a3      	cmp	r3, r4
 800849e:	d908      	bls.n	80084b2 <_free_r+0x42>
 80084a0:	6820      	ldr	r0, [r4, #0]
 80084a2:	1821      	adds	r1, r4, r0
 80084a4:	428b      	cmp	r3, r1
 80084a6:	bf01      	itttt	eq
 80084a8:	6819      	ldreq	r1, [r3, #0]
 80084aa:	685b      	ldreq	r3, [r3, #4]
 80084ac:	1809      	addeq	r1, r1, r0
 80084ae:	6021      	streq	r1, [r4, #0]
 80084b0:	e7ed      	b.n	800848e <_free_r+0x1e>
 80084b2:	461a      	mov	r2, r3
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	b10b      	cbz	r3, 80084bc <_free_r+0x4c>
 80084b8:	42a3      	cmp	r3, r4
 80084ba:	d9fa      	bls.n	80084b2 <_free_r+0x42>
 80084bc:	6811      	ldr	r1, [r2, #0]
 80084be:	1850      	adds	r0, r2, r1
 80084c0:	42a0      	cmp	r0, r4
 80084c2:	d10b      	bne.n	80084dc <_free_r+0x6c>
 80084c4:	6820      	ldr	r0, [r4, #0]
 80084c6:	4401      	add	r1, r0
 80084c8:	1850      	adds	r0, r2, r1
 80084ca:	4283      	cmp	r3, r0
 80084cc:	6011      	str	r1, [r2, #0]
 80084ce:	d1e0      	bne.n	8008492 <_free_r+0x22>
 80084d0:	6818      	ldr	r0, [r3, #0]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	6053      	str	r3, [r2, #4]
 80084d6:	4408      	add	r0, r1
 80084d8:	6010      	str	r0, [r2, #0]
 80084da:	e7da      	b.n	8008492 <_free_r+0x22>
 80084dc:	d902      	bls.n	80084e4 <_free_r+0x74>
 80084de:	230c      	movs	r3, #12
 80084e0:	602b      	str	r3, [r5, #0]
 80084e2:	e7d6      	b.n	8008492 <_free_r+0x22>
 80084e4:	6820      	ldr	r0, [r4, #0]
 80084e6:	1821      	adds	r1, r4, r0
 80084e8:	428b      	cmp	r3, r1
 80084ea:	bf04      	itt	eq
 80084ec:	6819      	ldreq	r1, [r3, #0]
 80084ee:	685b      	ldreq	r3, [r3, #4]
 80084f0:	6063      	str	r3, [r4, #4]
 80084f2:	bf04      	itt	eq
 80084f4:	1809      	addeq	r1, r1, r0
 80084f6:	6021      	streq	r1, [r4, #0]
 80084f8:	6054      	str	r4, [r2, #4]
 80084fa:	e7ca      	b.n	8008492 <_free_r+0x22>
 80084fc:	bd38      	pop	{r3, r4, r5, pc}
 80084fe:	bf00      	nop
 8008500:	24000780 	.word	0x24000780

08008504 <_init>:
 8008504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008506:	bf00      	nop
 8008508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800850a:	bc08      	pop	{r3}
 800850c:	469e      	mov	lr, r3
 800850e:	4770      	bx	lr

08008510 <_fini>:
 8008510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008512:	bf00      	nop
 8008514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008516:	bc08      	pop	{r3}
 8008518:	469e      	mov	lr, r3
 800851a:	4770      	bx	lr
